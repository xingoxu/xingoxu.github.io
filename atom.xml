<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xingo&#39;s private plot</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xingoxu.com/"/>
  <updated>2019-12-21T05:35:44.503Z</updated>
  <id>https://blog.xingoxu.com/</id>
  
  <author>
    <name>xingo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Google I/O 2019 フロントエンドまとめ</title>
    <link href="https://blog.xingoxu.com/ja/2019/05/2019-05-17-google-io-tech/"/>
    <id>https://blog.xingoxu.com/ja/2019/05/2019-05-17-google-io-tech/</id>
    <published>2019-05-17T08:55:59.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-新プロダクト-新技術"><a href="#Web-新プロダクト-新技術" class="headerlink" title="Web 新プロダクト / 新技術"></a>Web 新プロダクト / 新技術</h1><ul><li>web.dev というサイト<ul><li><a href="https://web.dev" target="_blank" rel="noopener">https://web.dev</a></li><li>フレームワーク、パフォーマンス、Web各種技術など載っているグーグルが作ったまとめサイト</li><li>全部無料で学べる</li><li>今フレームワークはReact.jsだけけど、今後追加予定</li><li>実践 Codelab、その場で試すことはできます</li><li>翻訳は今進行中らしい</li></ul></li><li>Lighthouse Performance Budgets<ul><li><a href="https://developers.google.com/web/tools/lighthouse/audits/budgets" target="_blank" rel="noopener">https://developers.google.com/web/tools/lighthouse/audits/budgets</a></li><li>Lighthouseにパフォーマンス時間 / ファイル大きさ予算を設定し、Lighthouseが測ってくれる</li></ul></li><li>PWA Desktop<ul><li>PWA 今デスクトップOSにインストールできます</li></ul></li><li>Trusted Web Activity<ul><li><a href="https://developers.google.com/web/updates/2019/02/using-twa" target="_blank" rel="noopener">https://developers.google.com/web/updates/2019/02/using-twa</a></li><li>Chrome Custom Tab のアップグレード版、タイトルバーがない</li><li>よく見られるユースケースは、現存のアプリの中で、ファミリーアプリのウェブ版を入れて、ネイテイブ感を作る</li><li>ウェブページにはschema urlでアプリにメッセージ送れます</li><li>アプリは URL の後ろにパラメータ付けるならウェブページにメッセージ送れます</li></ul></li><li>Perception Toolkit<ul><li><a href="https://web.dev/perception-toolkit" target="_blank" rel="noopener">https://web.dev/perception-toolkit</a></li><li>Shape Detection APIを使ってるツールキット</li><li>バーコード、実物、画像を取得してウェブサイトのmetaから取った情報と比較して、関連カードを出す</li><li>APIまだ使えないブラウザにWeb Assemblyを使う、互換性を保つ</li></ul></li><li>Puppeteer with Firefox<ul><li>Firefoxが使えるようになりました</li><li><code>npm i puppeteer-firefox</code></li></ul></li></ul><a id="more"></a><h1 id="Web-にもうすぐ使えるもの-新Web-API-新-JavaScript-API-など"><a href="#Web-にもうすぐ使えるもの-新Web-API-新-JavaScript-API-など" class="headerlink" title="Web にもうすぐ使えるもの / 新Web API / 新 JavaScript API など"></a>Web にもうすぐ使えるもの / 新Web API / 新 JavaScript API など</h1><h2 id="Chrome-Only-w3cにまだ書いてない"><a href="#Chrome-Only-w3cにまだ書いてない" class="headerlink" title="Chrome Only (w3cにまだ書いてない)"></a>Chrome Only (w3cにまだ書いてない)</h2><ul><li>Lazy loading<ul><li>画像とiframeの中 loading=”lazy” のアトリビュートを追加すると遅延ロードくれます</li><li>Chrome 75 から</li></ul></li><li>Portals<ul><li><a href="https://web.dev/hands-on-portals" target="_blank" rel="noopener">https://web.dev/hands-on-portals</a></li><li>新たな要素、iframeみたい、埋め込む内容に切り替えるスムーズ体験を提供する</li><li>Chrome Canary 使える</li></ul></li><li>Web Packaging<ul><li><a href="https://github.com/WICG/webpackage" target="_blank" rel="noopener">https://github.com/WICG/webpackage</a></li><li>ウェブサイトをサインしてパッケージして、どこでもデプロイして、ブラウザはどこでも同じサイトとみなす（p2pの感じ）</li><li>例はまだない</li></ul></li><li>Paint Holding<ul><li>同じサイト画面遷移時白い画面は出ない</li><li>Chrome Canary 見れる</li></ul></li><li>Cookie は Chrome 76 からちょっと変わる<ul><li><a href="https://web.dev/samesite-cookies-explained" target="_blank" rel="noopener">https://web.dev/samesite-cookies-explained</a></li><li>Same-Site使っていないCookieは<code>Same-Site=LAX</code>を適用する</li></ul></li></ul><p>Chrome今開発中もの</p><ul><li><a href="https://github.com/WICG/native-file-system" target="_blank" rel="noopener">ネイテイブファイルシステム</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=897276" target="_blank" rel="noopener">申請しなくもローカルでファイルを保存できる</a></li><li><a href="https://github.com/sso-google/sms-otp-retrieval" target="_blank" rel="noopener">SMS基づくユーザー検証</a></li></ul><blockquote><p>関連Session： What’s New with Chrome and the Web (Google I/O ’19)</p></blockquote><p><em>独自APIを開発するから海外でも好評得ていないらしい…</em></p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><ul><li><p>開発中</p><ul><li>ウェブシェア -&gt; Web Share API (Shipped) -&gt; Web Share Target (v2) (Working)</li><li>media control on System level -&gt; mediaSession API (Shipped)</li><li>バーコード、画像、実物探知 -&gt; Shape Detection API (FaceDetect / BarcodeDetect both shipped in Chrome Canary) </li><li>App Badging (アプリアイコンの数字) -&gt; window.Badge / window.ExperimentalBadge (Origin Trial 78)</li><li>Wake Lock -&gt; (Screen wake lock / System wake lock) -&gt; Wake Lock (In Development)</li><li>ファイル -&gt; File Picker -&gt; chooseFileSystemEntries (提案中 / In Development)</li><li>シリアルデバイスサクセス（プリンターなど） -&gt; Serial API (提案済み)</li><li>HID デバイスアクセス -&gt; WebHID (提案済み / In Development)</li><li>連絡帳サクセス -&gt; Contacts Picker (提案済み / Experimenting)</li><li>インストールしたフォントをアクセス -&gt; 提案済み / In Development</li></ul></li><li><p>もうすぐ実装します</p><ul><li>Clipboard API with Image （クリップボードAPIに画像も添付できる）</li><li><a href="https://bit.ly/sms-verification-explainer" target="_blank" rel="noopener">SMS基づくOTP検証</a></li><li>Notification Triggers API （時間基づくプッシュ通知）</li></ul></li></ul><blockquote><p>上記内容年内実装<br>Chrome で試すまたフィードバックは下記サイトまで<br><a href="https://developers.chrome.com/origintrials" target="_blank" rel="noopener">https://developers.chrome.com/origintrials</a></p></blockquote><blockquote><p>Web API は Project huguで 確認できます <a href="https://bugs.chromium.org/p/chromium/issues/list?can=2&amp;q=proj-fugu&amp;sort=m&amp;colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified" target="_blank" rel="noopener">Project hugu</a></p></blockquote><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356dbrkpgj21rs0xs4qp.jpg" alt="Web API スケジュール"></p><blockquote><p>関連Session： Unlocking New Capabilities for the Web (Google I/O ’19)</p></blockquote><h2 id="JavaScript-API-Syntax"><a href="#JavaScript-API-Syntax" class="headerlink" title="JavaScript API / Syntax"></a>JavaScript API / Syntax</h2><ul><li>Class のプライベート属性 (実装済み) - working on privatter method and getters and setters</li><li>String.prototype.matchAll (実装済み)</li><li>Number spearater (Chrome 75)</li><li>BigInt (Chrome 74 と Firefox nightly と node 実装済み &amp; transpiler available)</li><li>Array.prototype.flat (in chrome firefox safari node)</li><li>Entries から Object に転換する Object.entriesの逆操作 (in chrome firefox safari node )</li><li>globalThis (in chrome firefox safari node )</li><li>Array.sortの安定性を標準の中に書くように努力してる</li><li>多言語について<ul><li>Intl.RelativeTimeFormat -&gt; today yesterday tomorrow (in chrome firefox node)</li><li>Intl.ListFormat -&gt; ex. A, B or C  (in chrome node)</li><li>Intl.DateTimeFormat -&gt; ex. May, 5  (in chrome)</li><li>Intl.Locale -&gt; Internal Translation (in chrome node)</li></ul></li><li>Promise.allSettled (in chrome 76 nightly) / Promise.any</li><li>WeakRef and finalizers (in chrome with flags) &amp; 標準の中に書くように</li></ul><blockquote><p>関連Session： What’s new in JavaScript (Google I/O ’19)</p></blockquote><h1 id="経験シェアとパフォーマンス"><a href="#経験シェアとパフォーマンス" class="headerlink" title="経験シェアとパフォーマンス"></a>経験シェアとパフォーマンス</h1><p>Chrome はフレームワークなどスケジュールAPIを提供したい、<br>連続実行、レンダリングの時もユーザーの操作受けるように。</p><ul><li>Scheduling API<ul><li><a href="https://github.com/WICG/main-thread-scheduling" target="_blank" rel="noopener">https://github.com/WICG/main-thread-scheduling</a></li><li><a href="https://github.com/WICG/is-input-pending" target="_blank" rel="noopener">https://github.com/WICG/is-input-pending</a></li><li><a href="https://github.com/WICG/display-locking" target="_blank" rel="noopener">https://github.com/WICG/display-locking</a></li></ul></li></ul><p>Google はパフォーマンスにやり方とアドバイス</p><ul><li>段階的SSR</li><li>JS完全ロード前のクリック事件を取るように</li><li>一定サイズの初期JS</li><li>インタラクション駆動型遅延ロード</li><li>依存関係グラフ、宣言型機能ロード、同時にデータを取る</li></ul><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356nnvqhfj21ra0z2e81.jpg" alt="Google Important Piece"></p><p>Google のパフォーマンスアドバイス</p><ol><li>遅延ロード</li><li>レスポンシブ画像（ピクセル密度による画像をロードする）</li><li>画像CDN</li><li>サードパーティのJSを遅延する</li><li>高価なライブラリを削除する</li><li>コード分割</li><li>Web Fontの白いフラッシュを避ける</li><li>Prefetch</li><li>Preconnect</li><li>Preload</li><li>クリティカルCSS（はじめの画面だけ必要のCSSをロードする）</li><li>gzip -&gt; Brotli </li><li>端末、ブラウザによるJSをロードする</li></ol><p>また、Lighthouse を使って、性能予算を設定する</p><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g358gekpplj21430l4k2y.jpg" alt="Performance Suggestion"></p><blockquote><p>関連Session：<br>Elevating the Web Platform with the JavaScript Framework Community (Google I/O ’19)<br>Speed at Scale: Web Performance Tips and Tricks from the Trenches (Google I/O ’19)</p></blockquote><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><p>他のパフォーマンスユースケース、ノウハウ、Web内容はここへ<br><a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i</a></p><!-- Google 的架构建议1. 为不断发展的Web API而设计程序2. 避免惩罚新浏览器（polyfill等）3. 持续服务器缓存，保持高CDN命中率4. 避免重大修改并增强现有工具 -->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-新プロダクト-新技術&quot;&gt;&lt;a href=&quot;#Web-新プロダクト-新技術&quot; class=&quot;headerlink&quot; title=&quot;Web 新プロダクト / 新技術&quot;&gt;&lt;/a&gt;Web 新プロダクト / 新技術&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;web.dev というサイト&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;フレームワーク、パフォーマンス、Web各種技術など載っているグーグルが作ったまとめサイト&lt;/li&gt;
&lt;li&gt;全部無料で学べる&lt;/li&gt;
&lt;li&gt;今フレームワークはReact.jsだけけど、今後追加予定&lt;/li&gt;
&lt;li&gt;実践 Codelab、その場で試すことはできます&lt;/li&gt;
&lt;li&gt;翻訳は今進行中らしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lighthouse Performance Budgets&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/budgets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/tools/lighthouse/audits/budgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lighthouseにパフォーマンス時間 / ファイル大きさ予算を設定し、Lighthouseが測ってくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PWA Desktop&lt;ul&gt;
&lt;li&gt;PWA 今デスクトップOSにインストールできます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trusted Web Activity&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/using-twa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/updates/2019/02/using-twa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome Custom Tab のアップグレード版、タイトルバーがない&lt;/li&gt;
&lt;li&gt;よく見られるユースケースは、現存のアプリの中で、ファミリーアプリのウェブ版を入れて、ネイテイブ感を作る&lt;/li&gt;
&lt;li&gt;ウェブページにはschema urlでアプリにメッセージ送れます&lt;/li&gt;
&lt;li&gt;アプリは URL の後ろにパラメータ付けるならウェブページにメッセージ送れます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perception Toolkit&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/perception-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev/perception-toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shape Detection APIを使ってるツールキット&lt;/li&gt;
&lt;li&gt;バーコード、実物、画像を取得してウェブサイトのmetaから取った情報と比較して、関連カードを出す&lt;/li&gt;
&lt;li&gt;APIまだ使えないブラウザにWeb Assemblyを使う、互換性を保つ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Puppeteer with Firefox&lt;ul&gt;
&lt;li&gt;Firefoxが使えるようになりました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i puppeteer-firefox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Google I/O 2019 Web 前端内容总结</title>
    <link href="https://blog.xingoxu.com//2019/05/2019-05-17-google-io-tech/"/>
    <id>https://blog.xingoxu.com//2019/05/2019-05-17-google-io-tech/</id>
    <published>2019-05-17T08:55:59.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-新产品-新技术"><a href="#Web-新产品-新技术" class="headerlink" title="Web 新产品 / 新技术"></a>Web 新产品 / 新技术</h1><ul><li>web.dev<ul><li><a href="https://web.dev" target="_blank" rel="noopener">https://web.dev</a></li><li>一个可以用来学习框架、性能、各种 Web 技术的地方</li><li>还有实战 Codelab</li><li>正在进行多国翻译</li></ul></li><li>Lighthouse Performance Budgets<ul><li><a href="https://developers.google.com/web/tools/lighthouse/audits/budgets" target="_blank" rel="noopener">https://developers.google.com/web/tools/lighthouse/audits/budgets</a></li><li>在Lighthouse中设定性能预算，让Lighthouse在测试性能时使用并打分</li></ul></li><li>PWA Desktop<ul><li>PWA现在可以各大桌面平台系统中安装了</li></ul></li><li>Trusted Web Activity<ul><li><a href="https://developers.google.com/web/updates/2019/02/using-twa" target="_blank" rel="noopener">https://developers.google.com/web/updates/2019/02/using-twa</a></li><li>Chrome Custom Tab 的升级版，不再显示标题栏</li><li>一个常见的使用场景是在已有的App中去使用PWA来打包家族应用并打造原生体验</li><li>在网页中可以使用schema url来与App通信</li><li>App可以在网址后附上参数给网页发送数据</li></ul></li><li>Perception Toolkit<ul><li><a href="https://web.dev/perception-toolkit" target="_blank" rel="noopener">https://web.dev/perception-toolkit</a></li><li>一个工具包使用Shape Detection API去扫描条码或者获取实物信息</li><li>从网站的 meta 信息展示相关卡片</li><li>提供了WebAssembly版以向下兼容</li></ul></li><li>Puppeteer with Firefox<ul><li>可以使用Firefox进行自动化了</li><li><code>npm i puppeteer-firefox</code></li></ul></li></ul><a id="more"></a><h1 id="Web-将来可以使用的新功能-新Web-API-新-JavaScript-API-等"><a href="#Web-将来可以使用的新功能-新Web-API-新-JavaScript-API-等" class="headerlink" title="Web 将来可以使用的新功能 / 新Web API / 新 JavaScript API 等"></a>Web 将来可以使用的新功能 / 新Web API / 新 JavaScript API 等</h1><h2 id="Chrome-Only-目前为止，没有写入w3c标准"><a href="#Chrome-Only-目前为止，没有写入w3c标准" class="headerlink" title="Chrome Only (目前为止，没有写入w3c标准)"></a>Chrome Only (目前为止，没有写入w3c标准)</h2><ul><li>Lazy loading<ul><li>在图片和iframe中添加 loading=”lazy” 属性来让浏览器自动懒加载</li><li>Chrome 75 启用</li></ul></li><li>Portals<ul><li><a href="https://web.dev/hands-on-portals" target="_blank" rel="noopener">https://web.dev/hands-on-portals</a></li><li>一个新tag，类似iframe，以提供转到网页中嵌入内容的无缝体验</li><li>可以在Chrome Canary体验</li></ul></li><li>Web Packaging<ul><li><a href="https://github.com/WICG/webpackage" target="_blank" rel="noopener">https://github.com/WICG/webpackage</a></li><li>对网页进行签名打包，在不同服务器上部署，使得浏览器可以不仅在源服务器上获取内容（p2p的感觉）</li><li>暂时没有任何 demo</li></ul></li><li>Paint Holding<ul><li>同一网站切换页面时将保持之前的绘制不会白屏一次</li><li>Chrome Canary 可预览</li></ul></li><li>Cookie Changes upcoming in Chrome 76<ul><li><a href="https://web.dev/samesite-cookies-explained" target="_blank" rel="noopener">https://web.dev/samesite-cookies-explained</a></li><li>没有添加Same-Site的Cookie将会自动适用<code>Same-Site=LAX</code></li></ul></li></ul><p>Chrome 正在开发的</p><ul><li><a href="https://github.com/WICG/native-file-system" target="_blank" rel="noopener">原生文件系统</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=897276" target="_blank" rel="noopener">无需提前申请即可存储文件在本地</a></li><li><a href="https://github.com/sso-google/sms-otp-retrieval" target="_blank" rel="noopener">基于短信的验证</a></li></ul><blockquote><p>关联Session： What’s New with Chrome and the Web (Google I/O ’19)</p></blockquote><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><ul><li><p>开发中</p><ul><li>分享 -&gt; Web Share API (Shipped) -&gt; Web Share Target (v2) (Working)</li><li>media control on System level -&gt; mediaSession API (Shipped)</li><li>检测条码与形状 -&gt; Shape Detection API (FaceDetect / BarcodeDetect both shipped in Chrome Canary) </li><li>App Badging (App上的数字) -&gt; window.Badge / window.ExperimentalBadge (Origin Trial 78)</li><li>唤醒锁 -&gt; (Screen wake lock / System wake lock) -&gt; Wake Lock (In Development)</li><li>文件操作 -&gt; File Picker -&gt; chooseFileSystemEntries (propse stage / In Development)</li><li>访问串口设备（例如打印机） -&gt; Serial API (Proposed API)</li><li>HID 设备访问 -&gt; WebHID (Proposed API / In Development)</li><li>访问通讯录 -&gt; Contacts Picker (Proposed API / Experimenting)</li><li>访问安装字体列表 -&gt; Proposed / In Development</li></ul></li><li><p>很快实装</p><ul><li>剪贴板复制与粘贴图片 Clipboard API</li><li><a href="https://bit.ly/sms-verification-explainer" target="_blank" rel="noopener">基于短信的手机号验证流程</a></li><li>基于时间的推送通知API Notification Triggers API</li></ul></li></ul><blockquote><p>以上内容年内实装</p></blockquote><blockquote><p>在 Chrome 中可参与试用并参与反馈<br><a href="https://developers.chrome.com/origintrials" target="_blank" rel="noopener">https://developers.chrome.com/origintrials</a></p></blockquote><blockquote><p>Web API 可在 Project hugu 参阅进度 <a href="https://bugs.chromium.org/p/chromium/issues/list?can=2&amp;q=proj-fugu&amp;sort=m&amp;colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified" target="_blank" rel="noopener">Project hugu</a></p></blockquote><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356dbrkpgj21rs0xs4qp.jpg" alt="Web API 预定"></p><blockquote><p>相关Session： Unlocking New Capabilities for the Web (Google I/O ’19)</p></blockquote><h2 id="JavaScript-API-Syntax"><a href="#JavaScript-API-Syntax" class="headerlink" title="JavaScript API / Syntax"></a>JavaScript API / Syntax</h2><ul><li>类的私有字段 (已实装) - working on privatter method and getters and setters</li><li>String.prototype.matchAll (已实装)</li><li>数字分隔 (Chrome 75)</li><li>BigInt (Chrome 74 与 Firefox nightly 与 node 实装 &amp; transpiler available)</li><li>Array.prototype.flat (in chrome firefox safari node)</li><li>从 Entries 反转化为 Object  (in chrome firefox safari node )</li><li>globalThis (in chrome firefox safari node )</li><li>正在将数字排序的稳定性写入标准</li><li>多国语言相关<ul><li>Intl.RelativeTimeFormat -&gt; today yesterday tomorrow (in chrome firefox node)</li><li>Intl.ListFormat -&gt; ex. A, B or C  (in chrome node)</li><li>Intl.DateTimeFormat -&gt; ex. May, 5  (in chrome)</li><li>Intl.Locale -&gt; Internal Translation (in chrome node)</li></ul></li><li>Promise.allSettled (in chrome 76 nightly) / Promise.any</li><li>WeakRef and finalizers (in chrome with flags) &amp; 写入标准</li></ul><blockquote><p>关联Session： What’s new in JavaScript (Google I/O ’19)</p></blockquote><h1 id="经验分享与性能提升"><a href="#经验分享与性能提升" class="headerlink" title="经验分享与性能提升"></a>经验分享与性能提升</h1><p>Chrome 想为各个框架提供一些API这样他们在连续执行分块任务时同时相应用户输入</p><ul><li>Scheduling API<ul><li><a href="https://github.com/WICG/main-thread-scheduling" target="_blank" rel="noopener">https://github.com/WICG/main-thread-scheduling</a></li><li><a href="https://github.com/WICG/is-input-pending" target="_blank" rel="noopener">https://github.com/WICG/is-input-pending</a></li><li><a href="https://github.com/WICG/display-locking" target="_blank" rel="noopener">https://github.com/WICG/display-locking</a></li></ul></li></ul><p>Google 分享了他们在性能上的一些做法和建议</p><ul><li>阶段式SSR</li><li>捕获JS完全加载前的用户点击</li><li>保持初始大小的JS</li><li>交互驱动懒加载组件</li><li>建立依赖关系图，声明性加载功能，同时获取数据</li></ul><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356nnvqhfj21ra0z2e81.jpg" alt="Google Important Piece"></p><p>Google 的性能建议</p><ol><li>懒加载</li><li>响应式图片（根据设备像素密度等加载不同分辨率图片）</li><li>图片CDN</li><li>延迟第三方JS</li><li>移除代价巨大的库</li><li>分离代码</li><li>避免Web Font字体闪烁</li><li>Prefetch</li><li>Preconnect</li><li>Preload</li><li>首屏关键CSS</li><li>gzip -&gt; Brotli </li><li>响应式加载JS（适应不同浏览器分别加载不同JS）</li></ol><p>以及使用Lighthouse 与设定性能预算 LightWallet</p><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g358gekpplj21430l4k2y.jpg" alt="Performance Suggestion"></p><blockquote><p>相关Session：<br>Elevating the Web Platform with the JavaScript Framework Community (Google I/O ’19)<br>Speed at Scale: Web Performance Tips and Tricks from the Trenches (Google I/O ’19)</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>更多性能其他案例、How to、以及Web内容可参照<br><a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i</a></p><!-- Google 的架构建议1. 为不断发展的Web API而设计程序2. 避免惩罚新浏览器（polyfill等）3. 持续服务器缓存，保持高CDN命中率4. 避免重大修改并增强现有工具 -->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-新产品-新技术&quot;&gt;&lt;a href=&quot;#Web-新产品-新技术&quot; class=&quot;headerlink&quot; title=&quot;Web 新产品 / 新技术&quot;&gt;&lt;/a&gt;Web 新产品 / 新技术&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;web.dev&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个可以用来学习框架、性能、各种 Web 技术的地方&lt;/li&gt;
&lt;li&gt;还有实战 Codelab&lt;/li&gt;
&lt;li&gt;正在进行多国翻译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lighthouse Performance Budgets&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/budgets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/tools/lighthouse/audits/budgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Lighthouse中设定性能预算，让Lighthouse在测试性能时使用并打分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PWA Desktop&lt;ul&gt;
&lt;li&gt;PWA现在可以各大桌面平台系统中安装了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trusted Web Activity&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/using-twa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/updates/2019/02/using-twa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome Custom Tab 的升级版，不再显示标题栏&lt;/li&gt;
&lt;li&gt;一个常见的使用场景是在已有的App中去使用PWA来打包家族应用并打造原生体验&lt;/li&gt;
&lt;li&gt;在网页中可以使用schema url来与App通信&lt;/li&gt;
&lt;li&gt;App可以在网址后附上参数给网页发送数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perception Toolkit&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/perception-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev/perception-toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个工具包使用Shape Detection API去扫描条码或者获取实物信息&lt;/li&gt;
&lt;li&gt;从网站的 meta 信息展示相关卡片&lt;/li&gt;
&lt;li&gt;提供了WebAssembly版以向下兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Puppeteer with Firefox&lt;ul&gt;
&lt;li&gt;可以使用Firefox进行自动化了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i puppeteer-firefox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Synology NASに自宅で録画サーバーを立てました</title>
    <link href="https://blog.xingoxu.com/ja/2019/05/2019-05-16-record-jp-digital-TV-on-nas/"/>
    <id>https://blog.xingoxu.com/ja/2019/05/2019-05-16-record-jp-digital-TV-on-nas/</id>
    <published>2019-05-16T07:47:37.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="なぜNASに"><a href="#なぜNASに" class="headerlink" title="なぜNASに"></a>なぜNASに</h1><p>NASを持ってる方多いと思いますし、NASは24時間起動してるので、新しいデバイス買わなく節電できて録画サービスを任せろう。</p><h1 id="使うもの"><a href="#使うもの" class="headerlink" title="使うもの"></a>使うもの</h1><ul><li>Synology NAS 一台<ul><li>アンテナを接続してリコードする</li><li>DockerとVirtual Machine Manager対応機種 （<a href="https://www.synology.com/en-us/dsm/packages/Virtualization" target="_blank" rel="noopener">機種一覧</a>）</li></ul></li><li>PLEX USB地上波アンテナ PX-S1UD V2.0<ul><li>初心者に優しい地デジアンテナ</li><li>高くない、4530円</li><li>1チャンネルのみの視聴、録画が可能、買い足して同時受信チャンネルが増やせる</li><li><a href="https://www.amazon.co.jp/gp/product/B0141NFWSG/" target="_blank" rel="noopener">買う</a></li></ul></li><li>SCM IC读卡器<ul><li>B-CASカードの読み取り用、1000円ぐらい</li><li><a href="https://www.amazon.co.jp/gp/product/B0085H4YZC/" target="_blank" rel="noopener">買う</a></li><li>型番は同じではないかも、SCMじゃないやつ届けられたら自己調整必要</li><li>SoftCASも使えるらしいが、私は使わない</li></ul></li><li>HDD<ul><li>録画した映像保存用</li></ul></li><li>B-CAS カード<ul><li>テストはテレビから借りるのはいいと思います</li><li>アマゾンにも誰が売ってるらしいが、自己責任でお願いします</li></ul></li><li>アンテナ分波器 / 分配器 、接続線<ul><li>TVと同時視聴するため。必須ではない。</li></ul></li></ul><a id="more"></a><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>記事書く時点だけの有効性を保証します、エンドユーザー、コンピュータ初心者向けではない。<br>以下の手順は全て自己責任で、何かしらの問題が発生しても自力で対処できる方のみ実行してください。<br>テレビ番組のコピー、配信は違法となる場合があります。使用についても十分注意して下さい。<br>この記事を参考にしたことにより生じたあらゆる損害について、著者は一切の責任を負いません。</p><h1 id="構造"><a href="#構造" class="headerlink" title="構造"></a>構造</h1><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336pg2yuyj30fm0akgm2.jpg" alt="架构"></p><p>大体こういう感じでやっていきたいと思います。</p><h1 id="NAS-の準備"><a href="#NAS-の準備" class="headerlink" title="NAS の準備"></a>NAS の準備</h1><ul><li>Dockerをインストール</li><li>Virtual Machine Manager　をインストール</li><li>VMM に Ubuntu 16.04/18.04をインストール<ul><li>他のLinux Distrubtionもできるかも、本記事はUbuntu 18.04で説明します</li><li>Linuxのカーネルは3.15を越えないといけない（理由あと説明）</li><li>LANのみアクセスできるように設定するのはおすすめ</li></ul></li></ul><h1 id="アンテナ設置"><a href="#アンテナ設置" class="headerlink" title="アンテナ設置"></a>アンテナ設置</h1><p>VMにアンテナのドライバをインストールします</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://plex-net.co.jp/plex/px-s1ud/PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ unzip PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ sudo cp PX-S1UD_driver_Ver.1.0.1/x64/amd64/isdbt_rio.inp /lib/firmware/</span><br></pre></td></tr></table></figure><p>完了。</p><p>アンテナドライバ最低3.15のLinux カーネル必要なので、Synology NASのLinuxカーネルは3.10なのでVMを立って使います。</p><p>もし今後 NAS のカーネルが3.15以上になったら、次回 <a href="https://github.com/Chinachu/docker-mirakurun-chinachu" target="_blank" rel="noopener">https://github.com/Chinachu/docker-mirakurun-chinachu</a> の Docker イメージを使ってみたいと思います。</p><h1 id="カードリーダーとB-CASの準備"><a href="#カードリーダーとB-CASの準備" class="headerlink" title="カードリーダーとB-CASの準備"></a>カードリーダーとB-CASの準備</h1><p>カードリーダーソフトとビルドツールのパッケージをインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential git cmake g++</span><br><span class="line">$ sudo apt-get install pcscd libpcsclite-dev libccid pcsc-tools</span><br></pre></td></tr></table></figure><p>完了後、<code>sudo pcsc_scan</code> を実行して、<code>Japanese Chijou Digital B-CAS Card (pay TV)</code>みたいものでたら完成です。</p><p>しかし、私はここ２つ問題遭った、<br>１つ目は入れ間違えたww、<br>２つ目はB-CASカード無効問題、B-CASカードを最初にテレビに入れて見てみたら多分分かると思います。</p><p>型番も問題になるかもしれない、参考した記事の作家さんは遭ったのでそちらの記事をお越しいただければと思います。</p><h1 id="B-CASのデコード用ライブラリのインストール"><a href="#B-CASのデコード用ライブラリのインストール" class="headerlink" title="B-CASのデコード用ライブラリのインストール"></a>B-CASのデコード用ライブラリのインストール</h1><p>日本の地デジ放送は暗号化された状態で配信されているため、そのまま受信して保存すると再生や複製の際に問題が起こる。そこで、B-CASカードの情報を使って受信と同時に復号するのが望ましい。これを実現するライブラリがlibarib25だ。</p><p>コンパイル必要です<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/stz2012/libarib25/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ cd libarib25-master</span><br><span class="line">$ cmake .</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><p>インストール完了です。</p><h1 id="録画用コマンドのインストール"><a href="#録画用コマンドのインストール" class="headerlink" title="録画用コマンドのインストール"></a>録画用コマンドのインストール</h1><p>録画ソフトはこれを使って録画しますので、recdvbをインストールします。<br>ソースコードあるんけど、Githubに載っていない。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www13.plala.or.jp/sat/recdvb/recdvb-1.3.2.tgz</span><br><span class="line">$ tar xvzf recdvb-1.3.2.tgz</span><br><span class="line">$ cd recdvb-1.3.2</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --enable-b25</span><br><span class="line">$ make </span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>インストール完了。</p><p>この時点で、コマンドでの録画が可能になった。例えば、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip &lt;channel&gt; &lt;seconds&gt; test.m2ts</span><br></pre></td></tr></table></figure></p><p>チャンネルは受信タワーによる違いますので、<a href="http://www.maspro.co.jp/contact/channel.pdf" target="_blank" rel="noopener">こちら</a>から確認できます。</p><p>また、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip --http &lt;port&gt;</span><br></pre></td></tr></table></figure></p><p>を使ったらリアルタイムストリーミングを配信します。</p><p>Windows / MacのVLCかMacのIINAからURLを開いたら直接見れます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[IPアドレス]:8080/[channel number]</span><br></pre></td></tr></table></figure></p><p>チャンネルは上と同じです。</p><p>だが、その前に、<br>VMの<code>/etc/hosts</code>を設定しなければいけない（安全保障かな）、<br>でも私のチューナーサーバーはWANに公開するつもりはないので下のリンクを参考して解除しました。</p><blockquote><p><a href="https://nyanonon.hatenablog.com/entries/2015/11/17" target="_blank" rel="noopener">https://nyanonon.hatenablog.com/entries/2015/11/17</a></p></blockquote><p><code>Ctrl+C</code> を押して終了させます。</p><h1 id="Mirakurunをインストールしてチューナーサーバーを立ちます"><a href="#Mirakurunをインストールしてチューナーサーバーを立ちます" class="headerlink" title="Mirakurunをインストールしてチューナーサーバーを立ちます"></a>Mirakurunをインストールしてチューナーサーバーを立ちます</h1><p>チューナーサーバーMirakurunではWeb APIを提供して、録画コマンドの並列処理や、複数チューナーの管理、優先度処理など様々な機能が利用できます。<br>Mirakurunのクライエントを通じて外でも番組を予約もできる。</p><p>Mirakurunのインストールはこちらへ参考していただければと思います。</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md</a></p></blockquote><p>ざっくりここで書きます</p><h2 id="Node-js-10-をインストール"><a href="#Node-js-10-をインストール" class="headerlink" title="Node.js 10 をインストール"></a>Node.js 10 をインストール</h2><blockquote><p>请参照 <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall" target="_blank" rel="noopener">https://github.com/nodesource/distributions/blob/master/README.md#debinstall</a></p></blockquote><h2 id="PM2をインストール"><a href="#PM2をインストール" class="headerlink" title="PM2をインストール"></a>PM2をインストール</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="Mirakurun-メインプログラムインストール"><a href="#Mirakurun-メインプログラムインストール" class="headerlink" title="Mirakurun メインプログラムインストール"></a>Mirakurun メインプログラムインストール</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install mirakurun -g --unsafe-perm --production</span><br></pre></td></tr></table></figure><h2 id="Mirakurun-を設定"><a href="#Mirakurun-を設定" class="headerlink" title="Mirakurun を設定"></a>Mirakurun を設定</h2><p>Tuner設定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun config tuners</span><br></pre></td></tr></table></figure></p><p>ここで半日間かかった！わけわからんパラメーターを抜いたら使えました！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PX-S1UD-1</span></span><br><span class="line">  <span class="attr">types:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GR</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">recdev</span> <span class="string">--b25</span> <span class="string">--strip</span> <span class="string">&lt;channel&gt;</span> <span class="bullet">-</span> <span class="bullet">-</span></span><br><span class="line">  <span class="attr">isDisabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Mirakurun再起動します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun restart</span><br></pre></td></tr></table></figure></p><p><code>pm2 log</code> で状況を見てみましょう、特になんのエラーが出てなく、<code>Recording</code> が出たら多分大丈夫です。</p><p>チャンネルの設定は Mirakurun は自分が取得しますので、5-10分ぐらい待てばいい。</p><p>ここまでチューナーサーバーの設定は完了しました。<br>MirakurunはAPIとHttp Streamingも提供してるので、<br>APIの使用はここへ</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun</a></p></blockquote><h1 id="Chinachu-ffmpeg-をインストールする"><a href="#Chinachu-ffmpeg-をインストールする" class="headerlink" title="Chinachu / ffmpeg をインストールする"></a>Chinachu / ffmpeg をインストールする</h1><p>でもGUIクライエントがないとめんどくさい、Chinachuをインストールします。</p><p>Dockerのイメージを作りましたので、DockerFile参照して使うか、自分がカストマイズするもよい。</p><blockquote><p><a href="https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg" target="_blank" rel="noopener">https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg</a></p></blockquote><p>もし私のDockerFileを参照して立ているなら、下記を注意してください。<br>（Dockerを利用する方も見るといい）</p><ul><li>タイムゾーン問題<ul><li><code>/etc/localtime:/etc/localtime:ro</code>をマウント</li></ul></li><li>Chinachu の予約、設定データ<ul><li>下記のファイルとフォルダをマウントしてデータを保存しましょう</li><li><code>./chinachu/data:/chinachu/data</code></li><li><code>./chinachu/rules.json:/chinachu/rules.json</code></li><li><code>./chinachu/config.json:/chinachu/config.json</code></li></ul></li><li><p>膨大ログ問題</p><ul><li>Chinachuとpm2はログ入ってるから、Dockerのログはいらない、エラーだけを出力させろう</li><li>下記スクリプトを書いて保存して入り口を設定します。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">pm2-runtime processes.json &gt; /dev/null</span><br></pre></td></tr></table></figure></li></ul></li><li><p>録画ファルダのマウントをお忘れなく</p><ul><li><code>/volume2/TVRecorded:/chinachu/recorded</code></li></ul></li><li>ポートの公開</li></ul><h2 id="Chinachu-設定"><a href="#Chinachu-設定" class="headerlink" title="Chinachu 設定"></a>Chinachu 設定</h2><p>公式ドキュメント</p><blockquote><p><a href="https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration" target="_blank" rel="noopener">https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration</a></p></blockquote><p>基本、コピーしてちょっとカストマイズすれば大丈夫。</p><p>VAAPIについてはあとトランスコードの部分で説明します。</p><p>それで、Dockerを起動して、<br><code>docker-compose</code>も利用可能ですので、自分のニーズをあわせてChinachuを起動します。</p><h2 id="できましたか"><a href="#できましたか" class="headerlink" title="できましたか"></a>できましたか</h2><p>NASのURLとポート番号をブラウザに入力して下の画面見れると成功です。</p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g336sgurv5j224s17k1ky.jpg" alt="节目表"></p><h2 id="録画後のトランスコード"><a href="#録画後のトランスコード" class="headerlink" title="録画後のトランスコード"></a>録画後のトランスコード</h2><p>録画したファイルは大きな生TS、 大体 x86 アーキテクチャの NAS はハードウェアアクセラレーションついてるので、速いスピードでmp4にトランスコードして、どこでも見れるコーデックにしながら、ファイルサイズも小さくさせる。</p><p>注意するべきのはDockerにvaapi（Intel CPUのハードウェアアクセラレーション）を使うと、rootの権限でアプリを走らないと行けない（<code>/dev/dri/renderD128</code>をアクセスために）</p><p>だがこうすると、録画したファイルはrootが所有者になって、他のアプリの編集は出来ないので、録画後、トランスコードした後、chownを走らせましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown &lt;uid&gt;:&lt;gid&gt; &lt;/path/to/file&gt;</span><br></pre></td></tr></table></figure><p>ffmpegのパラメーターも共有しますが、自分のニーズをあわせて公式ドキュメントを参照して調整できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg \</span><br><span class="line">  -init_hw_device vaapi=intel:/dev/dri/renderD128 -hwaccel vaapi -hwaccel_output_format vaapi -hwaccel_device intel -filter_hw_device intel \</span><br><span class="line">  -i /path/to/recorded/file \</span><br><span class="line">  -analyzeduration 30M -probesize 30M \</span><br><span class="line">  -vf &apos;format=nv12|vaapi,hwupload,deinterlace_vaapi&apos; \</span><br><span class="line">  -c:v h264_vaapi  \</span><br><span class="line">  -threads 4 \</span><br><span class="line">  /path/to/output/file</span><br></pre></td></tr></table></figure><p>注意：ここのPATHは絶対にフルパスを指定してください、そうじゃないと妙なところに行っちゃいますよ。</p><p>名前をつけて、<code>afterRecord</code>とし、 <code>config.json</code> に</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "recordedCommand": "./userScripts/afterRecord",</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>を編集して。</p><p>自分のニーズ合わせてスクリプトをカストマイズして自分唯一無二のサーバーを作りましょう！<br>僕はLINE通知を入ってて録画したら通知がLINEに来ますね。</p><h1 id="NASでやるべきのこと"><a href="#NASでやるべきのこと" class="headerlink" title="NASでやるべきのこと"></a>NASでやるべきのこと</h1><h2 id="WebGUI-パスワードをつける"><a href="#WebGUI-パスワードをつける" class="headerlink" title="WebGUI パスワードをつける"></a>WebGUI パスワードをつける</h2><p>WebGUIそのままWANに公開するとちょっと危ない、入るときパスワード機能を入れましょう、自分だけ入ることを確保しましょう。</p><p>僕docker-compose を使ったから、すぐ nginx を追加できます。</p><h3 id="パスワードを生成する"><a href="#パスワードを生成する" class="headerlink" title="パスワードを生成する"></a>パスワードを生成する</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo htpasswd -c /path/to/.htpasswd &lt;username&gt;</span><br></pre></td></tr></table></figure><h3 id="サーバーにコピーして"><a href="#サーバーにコピーして" class="headerlink" title="サーバーにコピーして"></a>サーバーにコピーして</h3><p>サーバーで生成する方はスキップー</p><h3 id="nginx-を設定して-docker-compose-再起動"><a href="#nginx-を設定して-docker-compose-再起動" class="headerlink" title="nginx を設定して docker-compose 再起動"></a>nginx を設定して docker-compose 再起動</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass   http://localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose restart</span><br></pre></td></tr></table></figure><p>ブラウザをリフレッシュして、ここでパスワードが求められてるはずです。</p><h2 id="NAS-再インデックス"><a href="#NAS-再インデックス" class="headerlink" title="NAS 再インデックス"></a>NAS 再インデックス</h2><p>自分のスクリプトで作ったファイルは NAS は知らないので、DLNAとかで出てこない。<br>そこで再インデックスする必要があります。</p><p>仮にすべて録画したファイルは<code>/path/to/record/folder</code>の第一層でいる、このようなスクリプトを書いて</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/record/folder</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mediafile <span class="keyword">in</span> $(find /path/to/record/folder -maxdepth 1 -<span class="built_in">type</span> f -mmin -&lt;minutes&gt; -not -name .DS_Store)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">synoindex -a <span class="variable">$mediafile</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>reindexTVRecorded</code>を名前を付けて、 <code>Control Panel - Task - New - Scheduled - User Script</code>、時間とか選択して、スクリプトのパス入れて「はい」を押したら完了。</p><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336q15opxj31bx0u0wmy.jpg" alt="重新索引"></p><h1 id="残りの問題と課題"><a href="#残りの問題と課題" class="headerlink" title="残りの問題と課題"></a>残りの問題と課題</h1><ul><li>字幕<ul><li>録画したTSはVLCで字幕見れますけど、どうすればsrtを抽出できる</li><li>assdumper使ったけど、何も出てこない</li><li><code>Caption2Ass.exe</code>などwindowsプログラムは使ってない</li></ul></li><li>多国音声<ul><li>２つの問題があって</li></ul><ol><li>ステレオで一つずつモノラル音声で２つ国の音声放送された（NHKニュースよくある）</li><li>多ストリーミングで多国音声放送された</li></ol><ul><li><code>-filter_complex channelsplit</code> か<br><code>-dual_mono_mode main</code><br>ネットによく見たパラメーターどっちを使ってもエラーが出ちゃう</li></ul></li></ul><p>心当たりがある方教えていただければ幸いです！ m__m</p><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>NASがある場合は5000ぐらいで立てるのはいいと思います、今後どこでもテレビを見れると嬉しい。</p><p>記事の中は自分自身の特集のニーズいっぱい詰まってるし、記事を書くときも立てたから一ヶ月ぐらいがあって、抜けている箇所があるかもしれないし、変な日本語もあるかも、もし何が不明点があればコメントで書いてくださいー</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://qiita.com/shotasano/items/3809b8f3e0b62d51d3c3" target="_blank" rel="noopener">Raspberry Pi 3+Chinachuで地デジ録画サーバー構築</a><br><a href="https://ywnb.net/p/201612/3264" target="_blank" rel="noopener">Linuxの自宅サーバをテレビ化して家中どこでもテレビが見れる環境を作ろう(2)</a><br><a href="https://www.jianshu.com/p/e62c2a1cd3ab" target="_blank" rel="noopener">通过Nginx反向代理配置Basic Authentication实现kibana的访问安全</a><br><a href="http://arc680.hatenablog.jp/entry/2017/01/31/005135" target="_blank" rel="noopener">2017/01/30 時点での録画サーバ構築手順</a></p></blockquote><p>最後まで読んでいただきありがとうございました！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;なぜNASに&quot;&gt;&lt;a href=&quot;#なぜNASに&quot; class=&quot;headerlink&quot; title=&quot;なぜNASに&quot;&gt;&lt;/a&gt;なぜNASに&lt;/h1&gt;&lt;p&gt;NASを持ってる方多いと思いますし、NASは24時間起動してるので、新しいデバイス買わなく節電できて録画サービスを任せろう。&lt;/p&gt;
&lt;h1 id=&quot;使うもの&quot;&gt;&lt;a href=&quot;#使うもの&quot; class=&quot;headerlink&quot; title=&quot;使うもの&quot;&gt;&lt;/a&gt;使うもの&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Synology NAS 一台&lt;ul&gt;
&lt;li&gt;アンテナを接続してリコードする&lt;/li&gt;
&lt;li&gt;DockerとVirtual Machine Manager対応機種 （&lt;a href=&quot;https://www.synology.com/en-us/dsm/packages/Virtualization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;機種一覧&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PLEX USB地上波アンテナ PX-S1UD V2.0&lt;ul&gt;
&lt;li&gt;初心者に優しい地デジアンテナ&lt;/li&gt;
&lt;li&gt;高くない、4530円&lt;/li&gt;
&lt;li&gt;1チャンネルのみの視聴、録画が可能、買い足して同時受信チャンネルが増やせる&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B0141NFWSG/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;買う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SCM IC读卡器&lt;ul&gt;
&lt;li&gt;B-CASカードの読み取り用、1000円ぐらい&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B0085H4YZC/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;買う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;型番は同じではないかも、SCMじゃないやつ届けられたら自己調整必要&lt;/li&gt;
&lt;li&gt;SoftCASも使えるらしいが、私は使わない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDD&lt;ul&gt;
&lt;li&gt;録画した映像保存用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B-CAS カード&lt;ul&gt;
&lt;li&gt;テストはテレビから借りるのはいいと思います&lt;/li&gt;
&lt;li&gt;アマゾンにも誰が売ってるらしいが、自己責任でお願いします&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アンテナ分波器 / 分配器 、接続線&lt;ul&gt;
&lt;li&gt;TVと同時視聴するため。必須ではない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>群晖 NAS 打造自动电视录像服务器</title>
    <link href="https://blog.xingoxu.com//2019/05/2019-05-16-record-jp-digital-TV-on-nas/"/>
    <id>https://blog.xingoxu.com//2019/05/2019-05-16-record-jp-digital-TV-on-nas/</id>
    <published>2019-05-16T07:47:37.000Z</published>
    <updated>2019-12-21T05:35:44.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是录像服务器"><a href="#什么是录像服务器" class="headerlink" title="什么是录像服务器"></a>什么是录像服务器</h1><p>录像服务器就是指将电脑接上电视天线，把电视节目自动录制下来并保存在硬盘上。在日本许多电视机都会自带录制功能，指定节目之后每周录制相同时间段的节目，或者指定条件，自动录制符合条件的节目。这次我们就要来尝试在NAS上搭建这么一个录制服务器。</p><h1 id="为什么我们要搭建这样的服务器"><a href="#为什么我们要搭建这样的服务器" class="headerlink" title="为什么我们要搭建这样的服务器"></a>为什么我们要搭建这样的服务器</h1><p>既然电视机已经有了这样的功能，为什么还需要额外搭建这样的服务器呢。<br>电视机确实已经很强大，但我们也有串流需求，在家，在外边，在笔记本上随时随地都想收看录制的电视节目的话，只有一个电视机和收看设备的话很难做到。<br>搭建了这个服务器之后，我们还能实现在手机在电脑实时观看电视直播功能，画质当然与电视台一致。</p><h1 id="为什么要放在NAS上"><a href="#为什么要放在NAS上" class="headerlink" title="为什么要放在NAS上"></a>为什么要放在NAS上</h1><p>还不是为了拯救我那24小时开机的NAS但却只用来同步文件的电老虎吗</p><a id="more"></a><h1 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h1><ul><li>你的一台NAS<ul><li>我们需要在上边接上电视天线并运行录制程序</li><li>需要能够运行Docker与虚拟机 （<a href="https://www.synology.com/en-us/dsm/packages/Virtualization" target="_blank" rel="noopener">你可以在这里查看兼容机型</a>）</li></ul></li><li>PLEX USB地上波天线 PX-S1UD V2.0<ul><li>一个作为录制电视的初始入门的USB天线</li><li>不贵，约4530日元</li><li>一根天线只能录制一个节目，需要录制多个电视节目可以买多个</li><li><a href="https://www.amazon.co.jp/gp/product/B0141NFWSG/" target="_blank" rel="noopener">亚马逊购买链接</a></li></ul></li><li>SCM IC读卡器<ul><li>用来读取 B-CAS 卡、1000日元左右</li><li><a href="https://www.amazon.co.jp/gp/product/B0085H4YZC/" target="_blank" rel="noopener">亚马逊购买链接</a></li><li>注意这个发货并不一定是同一个品牌同一型号的读卡器，在之后的测试读卡器部分可能会出现一些问题，需要做好强大的心理准备</li><li>也可以用SoftCAS，不过感觉不是很可靠以及有触犯法律风险，不在本篇讨论范围</li></ul></li><li>大硬盘<ul><li>用来保存你的节目</li></ul></li><li>B-CAS 卡<ul><li>测试你可以从现在的电视上拿下来借用</li><li>后期你可以从不用的中古电视或者DVD录像机上取下来借用</li><li>亚马逊上可能有人出品，但买卖B-CAS卡可能触及法律风险需要注意</li></ul></li><li>天线分波器 / 分配器、一根天线连接线<ul><li>把一根天线变成两根天线的东西，或者把地上波与BS/CS波分开的东西，根据个人需要进行购买，并不必须</li></ul></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>以下内容仅保证文章撰写时点的有效性，本文并不面向初级用户，请仅有一定动手能力以及自己能够解决途中出现的问题的读者进行搭建，并请自行负担出现的任何问题与责任。<br>电视节目的复制，传播可能触及相关法律，在使用时请十分注意。<br>由于参考了本文进行的操作发生的任何损失，作者不负担任何责任与赔偿。</p><h1 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h1><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336pg2yuyj30fm0akgm2.jpg" alt="架构"></p><h1 id="NAS-准备"><a href="#NAS-准备" class="headerlink" title="NAS 准备"></a>NAS 准备</h1><ul><li>安装Docker</li><li>安装 Virtual Machine Manager</li><li>在虚拟机里安装Ubuntu 16或者18.04 或者随便你喜欢的发行版<ul><li>本文将以Ubuntu 18.04作为参考进行，其他发行版本请自行注意路径等</li><li>但无论如何注意 Linux 内核版本必须高于3.15（原因下述）</li><li>建议将虚拟机的Ubuntu设置成仅内网访问</li></ul></li></ul><h1 id="准备天线"><a href="#准备天线" class="headerlink" title="准备天线"></a>准备天线</h1><p>进入Ubuntu虚拟机，安装天线驱动，具体操作步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://plex-net.co.jp/plex/px-s1ud/PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ unzip PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ sudo cp PX-S1UD_driver_Ver.1.0.1/x64/amd64/isdbt_rio.inp /lib/firmware/</span><br></pre></td></tr></table></figure><p>就算完成了</p><p>因为天线驱动最低支持3.15的Linux内核，而群晖的内核是3.10，导致没有办法将天线与调用天线驱动的内容放置在主机本体运行，才不得不使用了虚拟机这样的结构。</p><p>如果群晖之后升级到了3.15以上的内核，那可以尝试一下使用 <a href="https://github.com/Chinachu/docker-mirakurun-chinachu" target="_blank" rel="noopener">https://github.com/Chinachu/docker-mirakurun-chinachu</a> 的 Docker 镜像。</p><h1 id="准备读卡器与B-CAS卡"><a href="#准备读卡器与B-CAS卡" class="headerlink" title="准备读卡器与B-CAS卡"></a>准备读卡器与B-CAS卡</h1><p>在Ubuntu虚拟机内安装一些工具（之后也会使用到）与读卡器驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential git cmake g++</span><br><span class="line">$ sudo apt-get install pcscd libpcsclite-dev libccid pcsc-tools</span><br></pre></td></tr></table></figure><p>安装完毕之后，使用 <code>sudo pcsc_scan</code> 命令，如果出现了 <code>Japanese Chijou Digital B-CAS Card (pay TV)</code> 类似的字样，那么B-CAS卡的安装和驱动就顺利完成了</p><p>笔者在这里碰到过两个问题，一个是B-CAS插反了，没读到芯片（汗），另一个是B-CAS卡无效问题。<br>B-CAS卡如果无效的话，是会顺利出线上述字样的，但是之后无法正常使用录制电视，可以将B-CAS插上电视看一下是否有错误提示。</p><p>另外如果使用的不是NEC读头的读卡器，可能会没法扫描出或者没法启动pcscd（参考的原文章作者碰到了这个问题），读者可以自行搜索相关方法或参考下方参考文章链接。</p><h1 id="安装B-CAS解码用的相关库"><a href="#安装B-CAS解码用的相关库" class="headerlink" title="安装B-CAS解码用的相关库"></a>安装B-CAS解码用的相关库</h1><p>由于日本地上波加密后进行广播，直接录制的话也没法播放和保存。因此我们需要在接收信号的同时使用B-CAS卡进行解码并无视加密（破解加密是违反法律，因此这里的原理是无视加密）。实现这个的是一个叫libarib25的库。</p><p>这个库需要编译。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/stz2012/libarib25/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ cd libarib25-master</span><br><span class="line">$ cmake .</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><p>完成安装</p><h1 id="安装录像指令"><a href="#安装录像指令" class="headerlink" title="安装录像指令"></a>安装录像指令</h1><p>我们需要安装recdvb这个录像指令，之后的录像管理都会调用这个指令来进行。<br>源代码是公开的但是没有放在github上，需要编译安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www13.plala.or.jp/sat/recdvb/recdvb-1.3.2.tgz</span><br><span class="line">$ tar xvzf recdvb-1.3.2.tgz</span><br><span class="line">$ cd recdvb-1.3.2</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --enable-b25</span><br><span class="line">$ make </span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>完成安装。</p><p>安装之后就可以使用这个指令直接录制电视节目了。<br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip &lt;channel&gt; &lt;seconds&gt; test.m2ts</span><br></pre></td></tr></table></figure></p><p>channel根据地区，放送电波塔不同，数字不同，可以在<a href="http://www.maspro.co.jp/contact/channel.pdf" target="_blank" rel="noopener">这里</a>进行确认。</p><p>另外，可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip --http &lt;port&gt;</span><br></pre></td></tr></table></figure></p><p>指令，在本地起一个服务器推送流，<br>使用VLC或者IINA可以打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[IPアドレス]:8080/[channel number]</span><br></pre></td></tr></table></figure></p><p>channel number就是上边那个数字。</p><p>但，在这之前，<br>需要在Ubuntu虚拟机的<code>/etc/hosts</code>中设定连接者的ip域名（为了保证安全），<br>我的话并没有在外网访问Tuner Server的想法，并不需要这样的设定，因此修改源代码重新编译安装。</p><blockquote><p>参考 <a href="https://nyanonon.hatenablog.com/entries/2015/11/17" target="_blank" rel="noopener">https://nyanonon.hatenablog.com/entries/2015/11/17</a></p></blockquote><p>按下 <code>Ctrl+C</code> 关闭推送流服务器。</p><h1 id="安装mirakurun-建立Tuner-Server"><a href="#安装mirakurun-建立Tuner-Server" class="headerlink" title="安装mirakurun 建立Tuner Server"></a>安装mirakurun 建立Tuner Server</h1><p>Mirakurun是一个Node.js编写的系统，具有同时多频道录像，多天线管理，优先度处理功能。<br>以及提供了各种API，以方便对应各种客户端的请求，在外网无法直接访问服务器也可以管理预约录制节目等。</p><p>安装Mirakurun可以参照</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md</a></p></blockquote><p>以下内容方便参照部分搬运</p><h2 id="安装-Node-js-10"><a href="#安装-Node-js-10" class="headerlink" title="安装 Node.js 10"></a>安装 Node.js 10</h2><blockquote><p>请参照 <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall" target="_blank" rel="noopener">https://github.com/nodesource/distributions/blob/master/README.md#debinstall</a></p></blockquote><h2 id="安装-PM2"><a href="#安装-PM2" class="headerlink" title="安装 PM2"></a>安装 PM2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="安装Mirakurun主程序"><a href="#安装Mirakurun主程序" class="headerlink" title="安装Mirakurun主程序"></a>安装Mirakurun主程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install mirakurun -g --unsafe-perm --production</span><br></pre></td></tr></table></figure><h2 id="配置Mirakurun"><a href="#配置Mirakurun" class="headerlink" title="配置Mirakurun"></a>配置Mirakurun</h2><p>主要是对Tuner进行配置，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun config tuners</span><br></pre></td></tr></table></figure></p><p>这里卡了很久，一直没法成功录制，但最终注释掉了一些奇怪的配置就搞定了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PX-S1UD-1</span></span><br><span class="line">  <span class="attr">types:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GR</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">recdev</span> <span class="string">--b25</span> <span class="string">--strip</span> <span class="string">&lt;channel&gt;</span> <span class="bullet">-</span> <span class="bullet">-</span></span><br><span class="line">  <span class="attr">isDisabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun restart</span><br></pre></td></tr></table></figure><p>重启mirakurun之后查看 pm2 log，如果没有错误正常开始Recording，表示搭建成功。</p><p>频道的话对Tuner设置成功之后会自己更新频道并更新节目列表，因此无需其他操作，一个天线的情况下耐心等待5分钟到10分钟左右即可。</p><p>到这里为止，我们所有服务端的设置基本就完成了，Mirakurun本身已经提供了API，可以通过API进行调用获得节目信息或者录制，也提供了Http流推送，来方便其他客户端进行录制。</p><p>API使用等可以参阅</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun</a></p></blockquote><h1 id="安装Chinachu以及ffmpeg等软件"><a href="#安装Chinachu以及ffmpeg等软件" class="headerlink" title="安装Chinachu以及ffmpeg等软件"></a>安装Chinachu以及ffmpeg等软件</h1><p>我们需要一个可视化客户端来帮助我们管理预约，对Mirakurun进行下达命令。<br>于是我们需要安装Chinachu。</p><p>由于这里开始，我们可以在Docker中也能完成这样的任务，搭建过程就省略，取而代之大家可以到</p><blockquote><p><a href="https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg" target="_blank" rel="noopener">https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg</a></p></blockquote><p>查看DockerFile，或者参照DockerFile自行编写自己需要的脚本来进行搭建Chinachu。</p><p>如果读者按照我的镜像进行搭建，需要注意如下（自己编写Docker脚本时也需注意一些Docker问题）</p><ul><li>时区问题<ul><li>需要挂载 <code>/etc/localtime:/etc/localtime:ro</code></li></ul></li><li>Chinachu 的预约/设置数据<ul><li>挂载如下文件与目录以防止容器重建丢失数据、</li><li>./chinachu/data:/chinachu/data</li><li>./chinachu/rules.json:/chinachu/rules.json</li><li>./chinachu/config.json:/chinachu/config.json</li></ul></li><li><p>日志问题</p><ul><li>Chinachu和pm2已经自带日志，就不需要Docker再帮我们兜一层日志了</li><li>编写启动脚本 并设置入口点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">pm2-runtime processes.json &gt; /dev/null</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不要忘记挂载录像目录</p><ul><li>/volume2/TVRecorded:/chinachu/recorded</li></ul></li><li>不要忘记暴露端口</li></ul><h2 id="配置Chinachu设置"><a href="#配置Chinachu设置" class="headerlink" title="配置Chinachu设置"></a>配置Chinachu设置</h2><p>Chinachu的官方配置文档在这里</p><blockquote><p><a href="https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration" target="_blank" rel="noopener">https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration</a></p></blockquote><p>基本没有什么太多需要注意的，将预设内容拷贝一份挂载进Docker就可以。</p><p>需要注意vaapi相关内容，下述。</p><p>之后就启动Docker容器吧，启动脚本就请各位自行挂载并启动了<br>也可以使用docker-compose来启动，<code>docker-compose up</code></p><h2 id="搭建成功"><a href="#搭建成功" class="headerlink" title="搭建成功"></a>搭建成功</h2><p>输入 NAS 地址和端口号后进入Chinachu界面并能看到节目表基本就算成功了。</p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g336sgurv5j224s17k1ky.jpg" alt="节目表"></p><h2 id="添加录制后转码脚本"><a href="#添加录制后转码脚本" class="headerlink" title="添加录制后转码脚本"></a>添加录制后转码脚本</h2><p>录制后是m2ts的TS文件，我们可以利用 NAS 闲暇 CPU （x86架构的 nas 基本都具有硬件加速）将 TS 文件转换成 mp4，缩小文件体积保存等。</p><p>需要注意的是，如果我们需要使用vaapi（Intel CPU的硬件加速解码），那么我们在启动Docker时需要使用root权限，否则无法访问 <code>/dev/dri/renderD128</code>硬件。</p><p>但是录制后的文件的所有者就会变成root，其他应用程序读取或修改的时候会有一些问题，因此我推荐在录制后，转码后，可以自己编写脚本来重新设置权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown &lt;uid&gt;:&lt;gid&gt; &lt;/path/to/file&gt;</span><br></pre></td></tr></table></figure><p>ffmpeg的相关参数我在这里贴出自己的进行共享，你当然也可以参照官方文档进行调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg \</span><br><span class="line">  -init_hw_device vaapi=intel:/dev/dri/renderD128 -hwaccel vaapi -hwaccel_output_format vaapi -hwaccel_device intel -filter_hw_device intel \</span><br><span class="line">  -i /path/to/recorded/file \</span><br><span class="line">  -analyzeduration 30M -probesize 30M \</span><br><span class="line">  -vf &apos;format=nv12|vaapi,hwupload,deinterlace_vaapi&apos; \</span><br><span class="line">  -c:v h264_vaapi  \</span><br><span class="line">  -threads 4 \</span><br><span class="line">  /path/to/output/file</span><br></pre></td></tr></table></figure><p>注：这里的环境PATH比较微妙，请一定使用绝对路径。</p><p>我写了一个 shell 脚本，将脚本命名成你喜欢的名称，假设 <code>afterRecord</code> ，不要忘记赋予执行权限，在 <code>config.json</code> 中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;recordedCommand&quot;: &quot;./userScripts/afterRecord&quot;,</span><br></pre></td></tr></table></figure><p>你可以根据自己需求修改转码设置，或者添加LINE通知等功能，打造属于自己的录像服务器。</p><h1 id="另外一些配置"><a href="#另外一些配置" class="headerlink" title="另外一些配置"></a>另外一些配置</h1><h2 id="给WebGUI设置访问权限"><a href="#给WebGUI设置访问权限" class="headerlink" title="给WebGUI设置访问权限"></a>给WebGUI设置访问权限</h2><p>直接把 WebGUI 暴露在公网上还是很危险的，我们给界面添加一个密码输入，保证录像服务器只能自己用。</p><p>由于我用了 docker-compose ，可以很方便的添加 nginx 并设置反代</p><h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo htpasswd -c /path/to/.htpasswd &lt;username&gt;</span><br></pre></td></tr></table></figure><h3 id="拷贝至服务器"><a href="#拷贝至服务器" class="headerlink" title="拷贝至服务器"></a>拷贝至服务器</h3><p>在服务器上直接生成的可以跳过</p><h3 id="修改nginx-配置-重启-docker"><a href="#修改nginx-配置-重启-docker" class="headerlink" title="修改nginx 配置 重启 docker"></a>修改nginx 配置 重启 docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass   http://localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose restart</span><br></pre></td></tr></table></figure><p>刷新界面，此时应该被要求输入密码</p><h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><p>通过自己的脚本来创建的文件群晖是无法增加索引的，以至于在DLNA广播中无法显示我们转码或者录制的文件</p><p>假设我们的录像文件直接存储在<code>/path/to/record/folder</code>下面，我们可以编写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/record/folder</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mediafile <span class="keyword">in</span> $(find /path/to/record/folder -maxdepth 1 -<span class="built_in">type</span> f -mmin -&lt;minutes&gt; -not -name .DS_Store)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">synoindex -a <span class="variable">$mediafile</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>其中第三行 <code>cd</code> 不可漏去，否则群晖不会在此文件夹中执行 <code>find</code> 。</p><p>保存脚本，假设 <code>reindexTVRecorded</code>，在 <code>控制面板 - 任务计划 - 新增 - 计划任务 - 用户脚本</code>，输入计划，输入任务运行脚本保存即可</p><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336q15opxj31bx0u0wmy.jpg" alt="重新索引"></p><h1 id="存在的问题（没有实现的需求）"><a href="#存在的问题（没有实现的需求）" class="headerlink" title="存在的问题（没有实现的需求）"></a>存在的问题（没有实现的需求）</h1><ul><li>字幕<ul><li>有部分电视台同时放送字幕，录制的TS是有字幕的，可以在VLC确认到</li><li>但没有办法使用网上的通用方法比如assdumper提取出来，提取出来是空的</li><li>暂时没有尝试使用 <code>Caption2Ass.exe</code>等windows程序</li></ul></li><li>多国声道<ul><li>存在两个问题</li></ul><ol><li>使用双声道在单声道中分别放送两个国家的音源（多存在于NHK新闻）</li><li>使用多个流推送多国声道</li></ol><ul><li>无论哪种情况，使用了网上的无论哪种包括<br><code>-filter_complex channelsplit</code> 或者<br><code>-dual_mono_mode main</code><br>都无法成功解决</li></ul></li></ul><p>对以上问题如果有办法解决的读者请联系我 m__m</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>在手中有NAS的情况下1w不到搭建一个这样的录像服务器还是性价比很高的，之后就可以随时随地观看一些并不那么需要大屏幕观看的内容。</p><p>文章中还是充满了自己自身的需求，另外文章编写的时候已经间隔搭建完差不多有一个月左右的时间，有些细节可能没有办法很到位描写清楚，如果你有什么问题，可以在评论区留言。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://qiita.com/shotasano/items/3809b8f3e0b62d51d3c3" target="_blank" rel="noopener">Raspberry Pi 3+Chinachuで地デジ録画サーバー構築</a><br><a href="https://ywnb.net/p/201612/3264" target="_blank" rel="noopener">Linuxの自宅サーバをテレビ化して家中どこでもテレビが見れる環境を作ろう(2)</a><br><a href="https://www.jianshu.com/p/e62c2a1cd3ab" target="_blank" rel="noopener">通过Nginx反向代理配置Basic Authentication实现kibana的访问安全</a><br><a href="http://arc680.hatenablog.jp/entry/2017/01/31/005135" target="_blank" rel="noopener">2017/01/30 時点での録画サーバ構築手順</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是录像服务器&quot;&gt;&lt;a href=&quot;#什么是录像服务器&quot; class=&quot;headerlink&quot; title=&quot;什么是录像服务器&quot;&gt;&lt;/a&gt;什么是录像服务器&lt;/h1&gt;&lt;p&gt;录像服务器就是指将电脑接上电视天线，把电视节目自动录制下来并保存在硬盘上。在日本许多电视机都会自带录制功能，指定节目之后每周录制相同时间段的节目，或者指定条件，自动录制符合条件的节目。这次我们就要来尝试在NAS上搭建这么一个录制服务器。&lt;/p&gt;
&lt;h1 id=&quot;为什么我们要搭建这样的服务器&quot;&gt;&lt;a href=&quot;#为什么我们要搭建这样的服务器&quot; class=&quot;headerlink&quot; title=&quot;为什么我们要搭建这样的服务器&quot;&gt;&lt;/a&gt;为什么我们要搭建这样的服务器&lt;/h1&gt;&lt;p&gt;既然电视机已经有了这样的功能，为什么还需要额外搭建这样的服务器呢。&lt;br&gt;电视机确实已经很强大，但我们也有串流需求，在家，在外边，在笔记本上随时随地都想收看录制的电视节目的话，只有一个电视机和收看设备的话很难做到。&lt;br&gt;搭建了这个服务器之后，我们还能实现在手机在电脑实时观看电视直播功能，画质当然与电视台一致。&lt;/p&gt;
&lt;h1 id=&quot;为什么要放在NAS上&quot;&gt;&lt;a href=&quot;#为什么要放在NAS上&quot; class=&quot;headerlink&quot; title=&quot;为什么要放在NAS上&quot;&gt;&lt;/a&gt;为什么要放在NAS上&lt;/h1&gt;&lt;p&gt;还不是为了拯救我那24小时开机的NAS但却只用来同步文件的电老虎吗&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>バディ・コンプレックス 聖地巡礼</title>
    <link href="https://blog.xingoxu.com/ja/2018/05/buddy-complex-seichijunrei/"/>
    <id>https://blog.xingoxu.com/ja/2018/05/buddy-complex-seichijunrei/</id>
    <published>2018-05-13T10:13:03.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>GWなか好きな絵描きさんが渡瀬青葉を描きましたので、一年前見放したバディ・コンプレックスをまた見ていて、意外といい作品と思っています。<br>全部見ました昨日聖地巡礼しました。</p><p>1話ラストで未来へ行ってしまって以来、完結編の最後に至っても2014年の東京、千葉の景色が再度登場することはありませんでした<br>なお本作品の舞台には高校や閑静な住宅街を含みます。もし訪問される際は現地の方へ最大限配慮して行動されるようお願いしたく思います。</p><h1 id="千葉県習志野市"><a href="#千葉県習志野市" class="headerlink" title="千葉県習志野市"></a>千葉県習志野市</h1><p></p><p></p><p></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg" alt="通学路のカーブ"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg" alt="通学路のカーブ"></div><br><div class="clear-float img-caption">通学路のカーブ</div><p>津田沼サイクルなくなった、リニューアル中みたいです、グーグルマップによる去年まだあるらしい、残念</p><p><br></p><p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><a id="more"></a></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v74bns8j21hc0u0u15.jpg" alt="滑り台の公園"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73nt2sj21kw121e84.jpg" alt="滑り台の公園"></div><br><div class="clear-float img-caption">滑り台の公園</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v78ihtxj21hc0u07wp.jpg" alt="小高商店信号機"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v71em5qj21kw108npd.jpg" alt="小高商店信号機"></div><br><div class="clear-float img-caption">小高商店信号機</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7hhi18j21hc0u0npl.jpg" alt="小高商店"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7dvctbj21j515de82.jpg" alt="小高商店"></div><br><div class="clear-float img-caption">小高商店</div><p>小高商店もなくなった、調べたら2013年の時駅周辺改造のため、本当残念</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvggz6j21hc0u04qx.jpg" alt="津田沼駅5番線"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcrsid5j21kw0xb7wk.jpg" alt="津田沼駅5番線"></div><br><div class="clear-float img-caption">津田沼駅5番線</div><p>07:12の三鷹行き電車と07:15の中野行き非津田沼駅始発電車はない、仕様もアニメのものではない。</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅4番線"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcpd680j21kw13fqv5.jpg" alt="津田沼駅4番線"></div><br><div class="clear-float img-caption">津田沼駅4番線</div><p>作中では5番線になっているが実際描かれていたのは4番線からの景色。でも左端に写っているユザワヤの広告は５番線の広告。</p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅5番線の広告"></div><div class="pull-left img"><img src="https://i.loli.net/2018/05/13/5af80ae8da67b.jpg" alt="津田沼駅5番線の広告"></div><br><div class="clear-float img-caption">津田沼駅5番線の広告</div><h1 id="東京都笹塚"><a href="#東京都笹塚" class="headerlink" title="東京都笹塚"></a>東京都笹塚</h1><p>これからは主人公追われた景色。大体一緒です。</p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypiy343j21hc0u0e89.jpg" alt="富士見丘高校前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yphw1vrj21kw17pqv9.jpg" alt="富士見丘高校前"></div><br><div class="clear-float img-caption">富士見丘高校前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypuq4ilj21hc0u0e89.jpg" alt="電気屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yprlci2j21kw0zz4qs.jpg" alt="電気屋前"></div><br><div class="clear-float img-caption">電気屋前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yq0qqmdj21hc0u0x6w.jpg" alt="松屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypt0zd0j21kw15cu0z.jpg" alt="松屋前"></div><br><div class="clear-float img-caption">松屋前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypym75nj21hc0u0e89.jpg" alt="みのん歯科医院前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypwxe3bj21kw0vxb2b.jpg" alt="みのん歯科医院前"></div><br><div class="clear-float img-caption">みのん歯科医院前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9psyzj21hc0u0kjt.jpg" alt="お茶屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9386bj21kw1634qr.jpg" alt="お茶屋前"></div><br><div class="clear-float img-caption">お茶屋前</div><br>TDKからalbaになっちゃった、多分も大昔の事<br><br><br><br><br><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrjdl0nj21hc0u0he1.jpg" alt="栄湯の脇"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yres6h2j21kw0x2u11.jpg" alt="栄湯の脇"></div><br><div class="clear-float img-caption">栄湯の脇</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrmijcgj21hc0u0e89.jpg" alt="国道20号 不動産屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrlen9dj21kw16ohdw.jpg" alt="国道20号 不動産屋前"></div><br><div class="clear-float img-caption">国道20号 不動産屋前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vhnh93jj21hc0u0u14.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vid1c5ij23402454qw.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrwh3lyj21hc0u01l5.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrqaqqvj21kw0rz7wk.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vjz73pqj21hc0u07wp.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vkbwy2aj22c00sab2a.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu1hgwgj21hc0u0b2h.jpg" alt="笹塚交差点 DARUMA前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ytgi9rnj21kw16ox6s.jpg" alt="笹塚交差点 DARUMA前"></div><br><div class="clear-float img-caption">笹塚交差点 DARUMA前</div><p>だるま 2013 年閉店ですが、他の施設ちゃんと合った。</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucd8gxj21hc0u04qx.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu0t3xrj21kw151hdv.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhfjedj21hc0u0e89.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu5ays1j21kw13mnpe.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhws22j21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucijqmj21kw1umnph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv6tavtj21hc0u0qvc.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvag3s3j21kw14bx6t.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>難易度高くなった</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvs0kenj21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv3hcd2j21kw23v7wj.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>高架の電車はどこでも取れないから、ちょっと遠いから取ったけど、良くないね</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvuux58j21hc0u0u14.jpg" alt="高架の鉄道"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv73ha9j20o20eudri.jpg" alt="高架の鉄道"></div><br><div class="clear-float img-caption">高架の鉄道</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvypfwhj21hc0u0he1.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvw28eoj21kw1kunph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>ヴァリアンサーを生産している中◯屋工場です</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywfvp14j21hc0u0b2h.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywiii13j21kw12tu10.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>大山交差点周りは今までと違ってあまり実際の景色に忠実ではない様子。看板や窓の形など、細かいパーツが一致する程度でしかありませんでした。</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsysjhj21hc0u0e89.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsbvdpj21kw16oqv7.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxg5vp6j21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yx5v5kej21kw16ob2b.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxhyrcfj21hc0u04qx.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yyb62p3j20n00eagv4.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz7327tj21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz1jo80j21kw16o1l0.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p>ここまで全部終わりました、ちなみに主人公の家は本当に存在している、個人宅なので掲載はしません、興味があれば訪れる時絶対迷惑かけないように</p><p>最後までご閲覧いただきありがとうございました。</p><p>Google Maps：<a href="https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing" target="_blank" rel="noopener">https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GWなか好きな絵描きさんが渡瀬青葉を描きましたので、一年前見放したバディ・コンプレックスをまた見ていて、意外といい作品と思っています。&lt;br&gt;全部見ました昨日聖地巡礼しました。&lt;/p&gt;
&lt;p&gt;1話ラストで未来へ行ってしまって以来、完結編の最後に至っても2014年の東京、千葉の景色が再度登場することはありませんでした&lt;br&gt;なお本作品の舞台には高校や閑静な住宅街を含みます。もし訪問される際は現地の方へ最大限配慮して行動されるようお願いしたく思います。&lt;/p&gt;
&lt;h1 id=&quot;千葉県習志野市&quot;&gt;&lt;a href=&quot;#千葉県習志野市&quot; class=&quot;headerlink&quot; title=&quot;千葉県習志野市&quot;&gt;&lt;/a&gt;千葉県習志野市&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;通学路のカーブ&lt;/div&gt;

&lt;p&gt;津田沼サイクルなくなった、リニューアル中みたいです、グーグルマップによる去年まだあるらしい、残念&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>心灵盟友 Buddy Complex 圣地巡礼</title>
    <link href="https://blog.xingoxu.com//2018/05/buddy-complex-seichijunrei/"/>
    <id>https://blog.xingoxu.com//2018/05/buddy-complex-seichijunrei/</id>
    <published>2018-05-13T10:13:03.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>黄金周里因为自己喜欢的画手太太画了渡瀬青葉，所以又把一年前抛弃的 Buddy Complex 捡起来看了一下，意外的发现还挺好看的。全部看完后昨天圣地巡礼了一下。</p><p>这个动画也只有第一集是现实中出现的场景，后边都是未来在天上在船上并没有日本的景色。</p><h1 id="千葉県習志野市"><a href="#千葉県習志野市" class="headerlink" title="千葉県習志野市"></a>千葉県習志野市</h1><p></p><p></p><p></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg" alt="通学路のカーブ"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg" alt="通学路のカーブ"></div><br><div class="clear-float img-caption">通学路のカーブ</div><p>非常遗憾自行车店好像在翻新，去年在Google Map上貌似还有的样子</p><p><br></p><p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><a id="more"></a></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v74bns8j21hc0u0u15.jpg" alt="滑り台の公園"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73nt2sj21kw121e84.jpg" alt="滑り台の公園"></div><br><div class="clear-float img-caption">滑り台の公園</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v78ihtxj21hc0u07wp.jpg" alt="小高商店信号機"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v71em5qj21kw108npd.jpg" alt="小高商店信号機"></div><br><div class="clear-float img-caption">小高商店信号機</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7hhi18j21hc0u0npl.jpg" alt="小高商店"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7dvctbj21j515de82.jpg" alt="小高商店"></div><br><div class="clear-float img-caption">小高商店</div><p>小高商店 2013 年的时候好像因为车站周围改造所以关店了，好遗憾</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvggz6j21hc0u04qx.jpg" alt="津田沼駅5番線"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcrsid5j21kw0xb7wk.jpg" alt="津田沼駅5番線"></div><br><div class="clear-float img-caption">津田沼駅5番線</div><p>非常遗憾的是，没有07:12往三鷹的电车与7:15的中野非始发电车，样式也并不是动画的样子。</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅4番線"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcpd680j21kw13fqv5.jpg" alt="津田沼駅4番線"></div><br><div class="clear-float img-caption">津田沼駅4番線</div><p>刚才还在5番線的但事实上这里的镜头确实是4番線向5番線方向的景色，但是左边的广告牌却是5番線的广告牌</p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅5番線の広告"></div><div class="pull-left img"><img src="https://i.loli.net/2018/05/13/5af80ae8da67b.jpg" alt="津田沼駅5番線の広告"></div><br><div class="clear-float img-caption">津田沼駅5番線の広告</div><h1 id="東京都笹塚"><a href="#東京都笹塚" class="headerlink" title="東京都笹塚"></a>東京都笹塚</h1><p>接下来就是男主被追的场景，这里大多都一模一样。</p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypiy343j21hc0u0e89.jpg" alt="富士見丘高校前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yphw1vrj21kw17pqv9.jpg" alt="富士見丘高校前"></div><br><div class="clear-float img-caption">富士見丘高校前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypuq4ilj21hc0u0e89.jpg" alt="電気屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yprlci2j21kw0zz4qs.jpg" alt="電気屋前"></div><br><div class="clear-float img-caption">電気屋前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yq0qqmdj21hc0u0x6w.jpg" alt="松屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypt0zd0j21kw15cu0z.jpg" alt="松屋前"></div><br><div class="clear-float img-caption">松屋前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypym75nj21hc0u0e89.jpg" alt="みのん歯科医院前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypwxe3bj21kw0vxb2b.jpg" alt="みのん歯科医院前"></div><br><div class="clear-float img-caption">みのん歯科医院前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9psyzj21hc0u0kjt.jpg" alt="お茶屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9386bj21kw1634qr.jpg" alt="お茶屋前"></div><br><div class="clear-float img-caption">お茶屋前</div><br>TDK 变成了 alba，也是很久以前就变了的貌似<br><br><br><br><br><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrjdl0nj21hc0u0he1.jpg" alt="栄湯の脇"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yres6h2j21kw0x2u11.jpg" alt="栄湯の脇"></div><br><div class="clear-float img-caption">栄湯の脇</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrmijcgj21hc0u0e89.jpg" alt="国道20号 不動産屋前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrlen9dj21kw16ohdw.jpg" alt="国道20号 不動産屋前"></div><br><div class="clear-float img-caption">国道20号 不動産屋前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vhnh93jj21hc0u0u14.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vid1c5ij23402454qw.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrwh3lyj21hc0u01l5.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrqaqqvj21kw0rz7wk.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vjz73pqj21hc0u07wp.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vkbwy2aj22c00sab2a.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu1hgwgj21hc0u0b2h.jpg" alt="笹塚交差点 DARUMA前"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ytgi9rnj21kw16ox6s.jpg" alt="笹塚交差点 DARUMA前"></div><br><div class="clear-float img-caption">笹塚交差点 DARUMA前</div><p>だるま 2013 年关店的，不过其他的地方都能对上</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucd8gxj21hc0u04qx.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu0t3xrj21kw151hdv.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhfjedj21hc0u0e89.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu5ays1j21kw13mnpe.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhws22j21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucijqmj21kw1umnph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv6tavtj21hc0u0qvc.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvag3s3j21kw14bx6t.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>从这里开始难度就变得好高，大家凑合看吧</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvs0kenj21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv3hcd2j21kw23v7wj.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>高架电车没有地方能拍，就跑的稍微远了一点，不过还是没能拍好</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvuux58j21hc0u0u14.jpg" alt="高架の鉄道"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv73ha9j20o20eudri.jpg" alt="高架の鉄道"></div><br><div class="clear-float img-caption">高架の鉄道</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvypfwhj21hc0u0he1.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvw28eoj21kw1kunph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>正在制作 valiancer 的中◯屋工厂</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywfvp14j21hc0u0b2h.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywiii13j21kw12tu10.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>大山交差点这里并没有完全按照现实世界的布景画</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsysjhj21hc0u0e89.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsbvdpj21kw16oqv7.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxg5vp6j21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yx5v5kej21kw16ob2b.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxhyrcfj21hc0u04qx.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yyb62p3j20n00eagv4.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz7327tj21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz1jo80j21kw16o1l0.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p>到这里就全部结束啦，顺带一提主人公的家是真实存在的，不过因为私人房屋的原因不会上传到SNS等地方，如果有兴趣的访问的话也请一定不要给对方带来困扰。</p><p>Google Maps：<a href="https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing" target="_blank" rel="noopener">https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黄金周里因为自己喜欢的画手太太画了渡瀬青葉，所以又把一年前抛弃的 Buddy Complex 捡起来看了一下，意外的发现还挺好看的。全部看完后昨天圣地巡礼了一下。&lt;/p&gt;
&lt;p&gt;这个动画也只有第一集是现实中出现的场景，后边都是未来在天上在船上并没有日本的景色。&lt;/p&gt;
&lt;h1 id=&quot;千葉県習志野市&quot;&gt;&lt;a href=&quot;#千葉県習志野市&quot; class=&quot;headerlink&quot; title=&quot;千葉県習志野市&quot;&gt;&lt;/a&gt;千葉県習志野市&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;通学路のカーブ&lt;/div&gt;

&lt;p&gt;非常遗憾自行车店好像在翻新，去年在Google Map上貌似还有的样子&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>推特 Account Activity API 使用体验</title>
    <link href="https://blog.xingoxu.com//2018/04/twitter-account-activity-api/"/>
    <id>https://blog.xingoxu.com//2018/04/twitter-account-activity-api/</id>
    <published>2018-04-30T12:59:43.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>前几天使用了一下推特的 Account Activity API，这个 API 支持注册一个 webhook，用于接受授权账户的实时活动（推特文，事件，设置）。</p><p>包括以下内容：</p><ul><li>推特内容</li><li>at 提醒</li><li>回复</li><li>转发</li><li>带评论转发</li><li>点赞</li><li>发出的私信和接收到的私信</li><li>关注</li><li>拉黑</li><li>屏蔽</li><li>阅读回执</li></ul><p>在试用的过程中，碰到了一些问题，做一个整理。</p><a id="more"></a><h1 id="应用中心创建应用"><a href="#应用中心创建应用" class="headerlink" title="应用中心创建应用"></a>应用中心创建应用</h1><p>首先需要到 <a href="https://apps.twitter.com/" target="_blank" rel="noopener">https://apps.twitter.com/</a> 在这里按提示创建应用，获得应用的 key 与 Secret。</p><h1 id="申请-Account-Activity-API-试用权限"><a href="#申请-Account-Activity-API-试用权限" class="headerlink" title="申请 Account Activity API 试用权限"></a>申请 Account Activity API 试用权限</h1><p><a href="https://developer.twitter.com/en/apply" target="_blank" rel="noopener">https://developer.twitter.com/en/apply</a><br>到这里按照提示申请API权限，并附上 app ID（app ID相关解释：<a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview</a> ）</p><p>申请完成后会收到邮件<br><img src="https://i.loli.net/2018/04/30/5ae7000843f53.png" alt="申请成功回执"></p><h1 id="注册-webhook"><a href="#注册-webhook" class="headerlink" title="注册 webhook"></a>注册 webhook</h1><h2 id="CRC-测试"><a href="#CRC-测试" class="headerlink" title="CRC 测试"></a>CRC 测试</h2><p>webhook 的地址要求通过 CRC 测试，详细要求可以查看<br><a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks</a></p><p>写了一个自己的demo，关于CRC测试的代码：<br><a href="https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23</a></p><h2 id="通过-postman-发送请求注册-webhook"><a href="#通过-postman-发送请求注册-webhook" class="headerlink" title="通过 postman 发送请求注册 webhook"></a>通过 postman 发送请求注册 webhook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json?url=$&#123;你的webhook地址&#125;</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p><code>Bearer TOKEN</code> 可以通过<code>https://api.twitter.com/oauth2/token</code>接口获得</p><p>注意</p><ul><li>webhook 地址 需要https，且只能使用443端口（<a href="https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36" target="_blank" rel="noopener">https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36</a> ）</li></ul><h2 id="通过-postman-发送请求在-subscription-里注册-webhook"><a href="#通过-postman-发送请求在-subscription-里注册-webhook" class="headerlink" title="通过 postman 发送请求在 subscription 里注册 webhook"></a>通过 postman 发送请求在 subscription 里注册 webhook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>获取到刚才的 webhook id</p><p>之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: OAuth 1.0</span><br><span class="line"></span><br><span class="line">Body:</span><br><span class="line">webhook_id: 刚才的 webhook id</span><br></pre></td></tr></table></figure></p><p>注意这里需要用OAuth 1.0（用于识别注册的user id）</p><p>注册完成后不会有任何返回，<code>HTTP Code: 204 No Conent</code></p><p>注册完成后可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET：https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions/list.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>可以收到<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"env-beta"</span>,</span><br><span class="line">    <span class="attr">"application_id"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">    <span class="attr">"subscriptions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"user_id"</span>: <span class="string">"12345678"</span>  <span class="comment">// &lt;- 自己的user_id</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>随便对一条推特点赞</p><p>可以收到推特来的 webhook object。</p><p>自己用这个写了一个推特的bot，可以作为参考。<br><a href="https://github.com/xingoxu/twitter-like-downloader" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天使用了一下推特的 Account Activity API，这个 API 支持注册一个 webhook，用于接受授权账户的实时活动（推特文，事件，设置）。&lt;/p&gt;
&lt;p&gt;包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推特内容&lt;/li&gt;
&lt;li&gt;at 提醒&lt;/li&gt;
&lt;li&gt;回复&lt;/li&gt;
&lt;li&gt;转发&lt;/li&gt;
&lt;li&gt;带评论转发&lt;/li&gt;
&lt;li&gt;点赞&lt;/li&gt;
&lt;li&gt;发出的私信和接收到的私信&lt;/li&gt;
&lt;li&gt;关注&lt;/li&gt;
&lt;li&gt;拉黑&lt;/li&gt;
&lt;li&gt;屏蔽&lt;/li&gt;
&lt;li&gt;阅读回执&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在试用的过程中，碰到了一些问题，做一个整理。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>ツイッターの Account Activity API 使ってみた</title>
    <link href="https://blog.xingoxu.com/ja/2018/04/twitter-account-activity-api/"/>
    <id>https://blog.xingoxu.com/ja/2018/04/twitter-account-activity-api/</id>
    <published>2018-04-30T12:59:43.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>前日ツイッターのAccount Activity APIを使ってみました、この API が一つ webhook 登録が可能です、アカウントのリアル活動（ツィート、通知、設定）を受信します。</p><p>以下のものが含まれます：</p><ul><li>ツィート</li><li>at 通知</li><li>リプライ</li><li>リツイート</li><li>引用リツイート</li><li>いいね</li><li>ダイレクトメッセージとその受信</li><li>フォロー</li><li>ブロック</li><li>ミュート</li></ul><p>使う時実際起こった問題を書きました。</p><a id="more"></a><h1 id="アプリを作ります"><a href="#アプリを作ります" class="headerlink" title="アプリを作ります"></a>アプリを作ります</h1><p>まずここで <a href="https://apps.twitter.com/" target="_blank" rel="noopener">https://apps.twitter.com/</a> チュートリアルに従ってアプリを作って、アプリの key と secret を取得します。</p><h1 id="Account-Activity-API-を申請します"><a href="#Account-Activity-API-を申請します" class="headerlink" title="Account Activity API を申請します"></a>Account Activity API を申請します</h1><p><a href="https://developer.twitter.com/en/apply" target="_blank" rel="noopener">https://developer.twitter.com/en/apply</a><br>ここで権限を申請します，app ID の添付を忘れずに（app ID について：<a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview</a> ）</p><p>申請成功したらメールが来ます<br><img src="https://i.loli.net/2018/04/30/5ae7000843f53.png" alt="申請成功のメール"></p><h1 id="webhook-URL-を登録"><a href="#webhook-URL-を登録" class="headerlink" title="webhook URL を登録"></a>webhook URL を登録</h1><h2 id="CRC-テスト"><a href="#CRC-テスト" class="headerlink" title="CRC テスト"></a>CRC テスト</h2><p>webhook は CRC テストを合格しなければ登録できない、具体的な要望はここに書いている -&gt;<br><a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks</a></p><p>自分もNode.jsのdemoを書きました、一応参考になれば：<br><a href="https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23</a></p><h2 id="postman-でリクエストを送って-webhook-URL-を登録します"><a href="#postman-でリクエストを送って-webhook-URL-を登録します" class="headerlink" title="postman でリクエストを送って webhook URL を登録します"></a>postman でリクエストを送って webhook URL を登録します</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json?url=$&#123;あなたのwebhook URL&#125;</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p><code>Bearer TOKEN</code> は<code>https://api.twitter.com/oauth2/token</code>で取得できます。</p><p>注意</p><ul><li>webhook URL は https と 443 ポートのみサポートします（<a href="https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36" target="_blank" rel="noopener">https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36</a> ）</li></ul><h2 id="postman-でリクエストを送って-subscription-に-webhook-を登録します"><a href="#postman-でリクエストを送って-subscription-に-webhook-を登録します" class="headerlink" title="postman でリクエストを送って subscription に webhook を登録します"></a>postman でリクエストを送って subscription に webhook を登録します</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>さっきの webhook の id を取って</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: OAuth 1.0</span><br><span class="line"></span><br><span class="line">Body:</span><br><span class="line">webhook_id: さっきの webhook の id</span><br></pre></td></tr></table></figure><p>注意すべきところ：ここAuthorization は OAuth 1.0（user id 認識ため）</p><p>リスポンス内容はない、<code>HTTP Code: 204 No Conent</code></p><p>登録したらここに見えます<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET：https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions/list.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure></p><p>これを受けれます<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"env-beta"</span>,</span><br><span class="line">    <span class="attr">"application_id"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">    <span class="attr">"subscriptions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"user_id"</span>: <span class="string">"12345678"</span>  <span class="comment">// &lt;- 自分のuser_id</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>好きなツイートをいいねすると</p><p>ツイッターサーバーから webhook object 受けれます。</p><p>最後、Account Activity API使ってる自家用ツイッターBotです、参考になればぜひ<br><a href="https://github.com/xingoxu/twitter-like-downloader" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader</a></p><p>最後まで閲覧いただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前日ツイッターのAccount Activity APIを使ってみました、この API が一つ webhook 登録が可能です、アカウントのリアル活動（ツィート、通知、設定）を受信します。&lt;/p&gt;
&lt;p&gt;以下のものが含まれます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ツィート&lt;/li&gt;
&lt;li&gt;at 通知&lt;/li&gt;
&lt;li&gt;リプライ&lt;/li&gt;
&lt;li&gt;リツイート&lt;/li&gt;
&lt;li&gt;引用リツイート&lt;/li&gt;
&lt;li&gt;いいね&lt;/li&gt;
&lt;li&gt;ダイレクトメッセージとその受信&lt;/li&gt;
&lt;li&gt;フォロー&lt;/li&gt;
&lt;li&gt;ブロック&lt;/li&gt;
&lt;li&gt;ミュート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使う時実際起こった問題を書きました。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>再见 2017</title>
    <link href="https://blog.xingoxu.com//2018/04/2017-end/"/>
    <id>https://blog.xingoxu.com//2018/04/2017-end/</id>
    <published>2018-04-10T04:15:49.000Z</published>
    <updated>2019-12-21T05:35:44.499Z</updated>
    
    <content type="html"><![CDATA[<p>忙完这一阵，回过神来已经是2018年的4月了，才有空开始补一些之前没有干完的事情，比如写这一篇2017年的总结。</p><p>仔细想想还真的是2017年经历了太多太多事情，很多事情甚至自己都没有想到，感觉自己非常幸运，总的来说是一个很开心的一年。<br><a id="more"></a></p><p>按时间顺序</p><h1 id="跳槽到饿了妈"><a href="#跳槽到饿了妈" class="headerlink" title="跳槽到饿了妈"></a>跳槽到饿了妈</h1><p>怎么说，年前就有想跳槽的想法，其实在萌购干着也挺好的，老板也承诺说毕业之后的工资多少多少，价格嘛也不低（跟饿了妈差不多），但始终是有那么点没有安全感，终于逮到个机会去了饿了妈面试，虽然自己是个菜鸡，不过面试的问题还算是都自我感觉挺好的答了下来，于是就很顺利的跳槽到了饿了妈。</p><p>也算走到了算是一个不太容易倒闭的公司，体验了各种大公司的流程，效率也挺高的，时间嘛也还行自己手脚比较快所以基本会有一定的空闲时间，不算很多，但可以。</p><h1 id="去日本玩"><a href="#去日本玩" class="headerlink" title="去日本玩"></a>去日本玩</h1><p>刚进饿了妈不久，就要收拾东西准备攻略自己一个人出去玩啦。半年前的既定安排跟跳槽也无关，不过当时想着4月底5月初的时间段怎么说也得三方啊毕业的准备都差不多了吧，那又是谁知道这个点了我自己居然还会跳槽，真是。。。</p><p>嘛操着自己零零碎碎平假名和片假名，也没跟太多人说话，现在想起来我当时到底是怎么旅游的都完全不怎么会说日语，顺顺利利的玩了10天，肥肠快乐，嘛钱也用了不少，差不多一共两万左右吧？</p><p><a href="https://photos.app.goo.gl/Gh0Qox7rmOz3rRqz2" target="_blank" rel="noopener">Google Photo</a></p><h1 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h1><p><div class="IMGalignRight" style="width: 330px;"><img src="https://i.loli.net/2018/04/10/5acc59ab88143.jpg" alt="毕业啦"></div><br>一霎眼毕业了，当时好像没有什么感觉，取了毕业证书，学位证书，回家就往公司的系统上传表示7.1日起就可以拿正式工资了，只有这点才让我感觉到了毕业。不过现在想想，我居然已经是个社会人了，而且已经实习+上班上了一年了，时间的力量还真是强大，把自己给塑造成了什么样只有回头看的时候才能知道。</p><p>我对学校没什么好感，对周围同学也没什么太多好感，4年自己也不知道自己干了什么，只是埋头学了很多东西，所以这4年，嘛也就这样。</p><h1 id="N2合格"><a href="#N2合格" class="headerlink" title="N2合格"></a>N2合格</h1><p>旅游回来之后发现自己只有一个月时间就要考N2于是工作之余还不停的去做之前买来没做的练习再去查字典，最后考前一星期还买了一本书再做练习，直接就上了考场。考完回来感觉应该能过吧，虽然有一半的语法题我是瞎蒙的，有一篇阅读没有时间看。这种没有范围的考试真的非常吓人，又或者说因为是第一次正正经经考一个完全自学的语言所以会如此害怕。</p><p>复习非常累，考试也很累，幸好最后顺利通过，还是很开心的（分数不高啦）</p><h1 id="跳槽去了LINE"><a href="#跳槽去了LINE" class="headerlink" title="跳槽去了LINE"></a>跳槽去了LINE</h1><p>这算是下半年一直在做的一件事情吧，从9月初开始试试的心态投了一封简历，结果到最后面试走完被发了offer真的非常非常开心又意外，一个是LINE是日本的企业之中应该是我心中最想去的一个企业，Google也好Twitter也好也很想去，但那些真的水平太高，自己99%是不太可能的，不过LINE的话最初我觉得自己可能70%不太可能，不过最后居然能进是非常意外的，另一个意外就是自己其实日语也就是三脚猫水准，也不要说三脚猫了，一脚猫吧，顶多也就看看小学生向的普通动画，在这之前都没跟日本人说过话，推特也只是在去日本玩送东西给太太的时候结下的太太聊天，聊的也不多还不需要太注重细节，就这么烂的水平，居然最后被采用了。</p><p>然后就是递签证，返签证，去日本找地方睡觉，上班这样的过程，签证只花了一周不过递签证跟返签证还真是艰辛前前后后块花了一个半月，嘛只能算是好事多磨。期间当然是在饿了妈当没事人一样刷KPI，我觉得如果我不走的话我KPI至少有B吧，A能不能有就不太清楚了。</p><p>第一次离开自己家自己一个人住，唔太幸福了，小黄本放题啊~~</p><p>要说原因的话，也不太那么好明着说吧，嘛自己来日本的时候的确也是觉得哇这里真好真舒服，想来这里上班呢，另一个是2017下半年也的确发生了很多事，让自己对周围的环境有了一些看法吧。</p><h1 id="2018年的计划？"><a href="#2018年的计划？" class="headerlink" title="2018年的计划？"></a>2018年的计划？</h1><p>天呐看看去年的计划，什么rxJs，什么后端，什么可视化前端，什么游戏开发，完全没有学嘛。<br>2018年的话，先把欠账还清吧，下的动画啥的赶紧看完，不过游戏啥的基本都完成了还算是，摸鱼上手（笑）</p><p><a href="https://bgm.tv/award/2017/xingo" target="_blank" rel="noopener">Bangumi 2017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忙完这一阵，回过神来已经是2018年的4月了，才有空开始补一些之前没有干完的事情，比如写这一篇2017年的总结。&lt;/p&gt;
&lt;p&gt;仔细想想还真的是2017年经历了太多太多事情，很多事情甚至自己都没有想到，感觉自己非常幸运，总的来说是一个很开心的一年。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue + TypeScript 尝鲜体验</title>
    <link href="https://blog.xingoxu.com//2017/10/vue-typescript-early/"/>
    <id>https://blog.xingoxu.com//2017/10/vue-typescript-early/</id>
    <published>2017-10-18T07:04:23.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>适用 Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2</p></blockquote><p>其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 Javascript，便爱上了这门语言。</p><p>但现在的我稍稍又觉得这样的东西其实还行，只使用类型系统也并没有完全限制 Javascript 本身的灵活性，并且他帮助我不会犯一些低级错误，而且还能配合 Visual Studio Code 的提示，我觉得这个还是很不错的，最近忙起来的时候，甚至经常把两个输入框的 value 直接进行比较了，于是就想尝试一下 TypeScript。</p><a id="more"></a><h1 id="官方做法"><a href="#官方做法" class="headerlink" title="官方做法"></a>官方做法</h1><p>Vue 2.2 以上之后，官方给 Vue已经添加了很多类型声明，那么我们就来实践一下在单文件 Vue 中使用 TypeScript。</p><h2 id="webpack-rules-中添加-ts-loader-相关（这里使用-webpack-2）"><a href="#webpack-rules-中添加-ts-loader-相关（这里使用-webpack-2）" class="headerlink" title="webpack rules 中添加 ts-loader 相关（这里使用 webpack 2）"></a>webpack rules 中添加 ts-loader 相关（这里使用 webpack 2）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules|vue\/src/</span>,</span><br><span class="line">  loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示对 .ts 文件编译时使用 ts-loader 进行读取，appendTsSuffixTo 是为了让 tsc 对 vue 文件能够当成一个 module 进行处理，以解决 moudle not found 的问题（tsc 本身不认识 vue 结尾的文件）</p><h2 id="添加-d-ts文件"><a href="#添加-d-ts文件" class="headerlink" title="添加 .d.ts文件"></a>添加 .d.ts文件</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是为了让 vscode 在 ts 文件中识别 vue 结尾文件</p><h2 id="项目根目录下添加-tsconfig-json"><a href="#项目根目录下添加-tsconfig-json" class="headerlink" title="项目根目录下添加 tsconfig.json"></a>项目根目录下添加 tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>allowSyntheticDefaultImports</code> 是为了能够用 es6 形式的 import，其他就参照 Vue 和官网的弄了个最小化的 json。</p><h2 id="万事俱备，让我们-npm-run-dev-跑起来！"><a href="#万事俱备，让我们-npm-run-dev-跑起来！" class="headerlink" title="万事俱备，让我们 npm run dev 跑起来！"></a>万事俱备，让我们 <code>npm run dev</code> 跑起来！</h2><p>在这里，我们假设使用 Vue 官方的 webpack boilerplate，对 Hello.vue 进行一下改造。</p><p>在模板的 msg 下新增一行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Say Hello Times: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>并将 script 部分修改成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Declare the component's type</span></span></span><br><span class="line">  interface HelloInterface extends Vue &#123;</span><br><span class="line">    msg: string,</span><br><span class="line">    count: number,</span><br><span class="line">    sayHello(): number</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="javascript">    HelloInterface <span class="keyword">as</span> interface</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// We need to explicitly annotate the exported options object</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// with the Hello type</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;HelloInterface&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码没有什么太大的问题</p><p>接着我们改造一下 App.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span> @<span class="attr">click</span>=<span class="string">"sayHello"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; interface <span class="keyword">as</span> helloInterface, <span class="keyword">default</span> <span class="keyword">as</span> Hello &#125; <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line">  interface App extends Vue &#123;</span><br><span class="line">    $refs: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 对 helloComponent 进行声明，可以使用 helloComponent 上的方法和属性</span></span></span><br><span class="line">      helloComponent: helloInterface</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Hello</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;App&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，像 refs 这种动态的在运行时才能确定的东西，如果需要在 coding 过程中静态化，则需要在 interface 中对其进行声明，写的 code 稍微有点多，不过可以接受。</p><blockquote><p>注： App.vue 修改成 <code>lang=ts</code> 后，顶层的 main.js 需要换成 main.ts 并修改 webpack 入口点，否则发生 file not found 错误</p></blockquote><h1 id="vue-class-component"><a href="#vue-class-component" class="headerlink" title="vue-class-component"></a>vue-class-component</h1><p>官方的另一种推荐做法是 <code>vue-class-component</code>，不过 demo 和 readme 有点小问题，可把我这个 TypeScript 新手给难到啦，提了 pr 希望快快通过。</p><p>让我们看看使用 <code>vue-class-component</code> 之后的 Hello.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"></span><br><span class="line">  @Component</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    msg: string = <span class="string">'Welcome to Your Vue.js App'</span></span></span><br><span class="line">    count: number = 0</span><br><span class="line">    sayHello(): number &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再让我们看看 App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line">  </span><br><span class="line">  @Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Hello</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">    $refs: &#123;</span><br><span class="line">      helloComponent: Hello</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sayHello() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非常 Cool，非常精炼，暂时没有想到可能会发生的没法解决的因为 vue 或者 vue 组件 和 TypeScript 水土不服的编译错误，而且都有了类型和提示。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>尤大佬说在接下来的 Vue 2.5 还会加强一系列的 TypeScript 支持（<a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08" target="_blank" rel="noopener">链接</a>），不知道是怎样的支持呢。<br>另外，欢迎大家在评论区发表 Vue + TypeScript 的使用场景以及你遇到的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;适用 Vue.version &amp;lt; 2.5 &amp;amp;&amp;amp; Vue.version &amp;gt;= 2.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 Javascript，便爱上了这门语言。&lt;/p&gt;
&lt;p&gt;但现在的我稍稍又觉得这样的东西其实还行，只使用类型系统也并没有完全限制 Javascript 本身的灵活性，并且他帮助我不会犯一些低级错误，而且还能配合 Visual Studio Code 的提示，我觉得这个还是很不错的，最近忙起来的时候，甚至经常把两个输入框的 value 直接进行比较了，于是就想尝试一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue + TypeScript 早期体験</title>
    <link href="https://blog.xingoxu.com/ja/2017/10/vue-typescript-early/"/>
    <id>https://blog.xingoxu.com/ja/2017/10/vue-typescript-early/</id>
    <published>2017-10-10T09:33:23.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2　適用される</p></blockquote><h1 id="公式ドキュメントによるやり方"><a href="#公式ドキュメントによるやり方" class="headerlink" title="公式ドキュメントによるやり方"></a>公式ドキュメントによるやり方</h1><p>Vue 2.2 から、Vue にいろんな公式型宣言を提供しており、さっそく、単一ファイルコンポーネントに TypeScript を試してみましょう。</p><h2 id="webpack-rules-に-ts-loader-相関を添付しましょう"><a href="#webpack-rules-に-ts-loader-相関を添付しましょう" class="headerlink" title="webpack rules に ts-loader 相関を添付しましょう"></a>webpack rules に ts-loader 相関を添付しましょう</h2><blockquote><p>こっちは webpack2</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+     test: /\.ts$/,</span></span><br><span class="line"><span class="addition">+     exclude: /node_modules|vue\/src/,</span></span><br><span class="line"><span class="addition">+     loader: 'ts-loader',</span></span><br><span class="line"><span class="addition">+     options: &#123;</span></span><br><span class="line"><span class="addition">+       appendTsSuffixTo: [/\.vue$/]</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><a id="more"></a><p>.ts のファイルを ts-loader で読み込む<br><code>appendTsSuffixTo</code>は vue を module として tsc でプロセスして、module not found の問題を解決する（tsc は .vue ファイルが知らない）</p><h2 id="d-ts-ファイルを作成する"><a href="#d-ts-ファイルを作成する" class="headerlink" title=".d.ts ファイルを作成する"></a>.d.ts ファイルを作成する</h2><p>どんな名前もいい、どこでもいい、tsconfig.json の include PATH にいればいい、必ず .d.ts を名前の終わりします。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vscode の .ts ファイルに .vueファイルも知らせます。</p><h2 id="tsconfig-json-を作成する"><a href="#tsconfig-json-を作成する" class="headerlink" title="tsconfig.json を作成する"></a>tsconfig.json を作成する</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>allowSyntheticDefaultImports</code> は es6 の import を直接使えるの option</p><h2 id="準備万端、npm-run-dev-いきましょう！"><a href="#準備万端、npm-run-dev-いきましょう！" class="headerlink" title="準備万端、npm run dev いきましょう！"></a>準備万端、<code>npm run dev</code> いきましょう！</h2><p>こっちは vue-cli の webpack boilerplate を例として、Hello.vue を改造しましょう。</p><p>html template の msg の下に<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"><span class="addition">+ &lt;h2&gt;Say Hello Times: &#123;&#123; count &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line">  &lt;h2&gt;Essential Links&lt;/h2&gt;</span><br></pre></td></tr></table></figure></p><p>script の部分を<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Declare the component's type</span></span></span><br><span class="line">  interface HelloInterface extends Vue &#123;</span><br><span class="line">    msg: string,</span><br><span class="line">    count: number,</span><br><span class="line">    sayHello(): number</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="javascript">    HelloInterface <span class="keyword">as</span> interface</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// We need to explicitly annotate the exported options object</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// with the Hello type</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;HelloInterface&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>こうして改造します</p><p>親としての App.vue を改造してみて</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id="app"&gt;</span><br><span class="line"><span class="deletion">-   &lt;img src="./assets/logo.png"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;img src="./assets/logo.png" @click="sayHello"&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="addition">+   &lt;hello ref="helloComponent"&gt;&lt;/hello&gt;</span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; interface <span class="keyword">as</span> helloInterface, <span class="keyword">default</span> <span class="keyword">as</span> Hello &#125; <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line">  interface App extends Vue &#123;</span><br><span class="line">    $refs: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// helloComponent を宣言する、helloComponent のメソッドとプロパティを使えようになるました</span></span></span><br><span class="line">      helloComponent: helloInterface</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Hello</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;App&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>refsといった動的なもの、interface に宣言して、typescript にオートコンプリートを使えます。</p><blockquote><p>App.vue の <code>script</code> を <code>lang=ts</code> 変更すると、main.js を main.ts に変更する必要があります、webpack の entry も忘れないでください，そうしないと file not found のエラーが発生する可能性がある。</p></blockquote><p>コードはちょっと多いね、公式サイトによるの <code>vue-class-component</code> を使ってみますか？</p><h1 id="vue-class-component"><a href="#vue-class-component" class="headerlink" title="vue-class-component"></a>vue-class-component</h1><p><code>vue-class-component</code>の demo と readme はちょっと問題がある、TypeScript の新入りの私が困った、pr を提出した、速くマージされて欲しい。</p><p><code>vue-class-component</code> を使っている Hello.vue の script 部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Hello <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  msg: <span class="built_in">string</span> = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  sayHello(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>で、App.vue</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> App <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  $refs: &#123;</span><br><span class="line">    helloComponent: Hello</span><br><span class="line">  &#125;</span><br><span class="line">　</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.helloComponent.count++;</span><br><span class="line">    <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随分清潔になりました、オートコンプリートもバッチリ！他の vue コンポーネントと TypeScript の不具合は一時的に考え出来ません。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Vue 2.5から TypeScript のサポートはどんどん増えますと<a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08" target="_blank" rel="noopener">言います</a>、どんなサポートですね〜</p><p>日本語まだ下手ですから、変なところいっぱいと思います、コメントエリアに指摘すれば幸いです。</p><p>最後まで閲覧いただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vue.version &amp;lt; 2.5 &amp;amp;&amp;amp; Vue.version &amp;gt;= 2.2　適用される&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;公式ドキュメントによるやり方&quot;&gt;&lt;a href=&quot;#公式ドキュメントによるやり方&quot; class=&quot;headerlink&quot; title=&quot;公式ドキュメントによるやり方&quot;&gt;&lt;/a&gt;公式ドキュメントによるやり方&lt;/h1&gt;&lt;p&gt;Vue 2.2 から、Vue にいろんな公式型宣言を提供しており、さっそく、単一ファイルコンポーネントに TypeScript を試してみましょう。&lt;/p&gt;
&lt;h2 id=&quot;webpack-rules-に-ts-loader-相関を添付しましょう&quot;&gt;&lt;a href=&quot;#webpack-rules-に-ts-loader-相関を添付しましょう&quot; class=&quot;headerlink&quot; title=&quot;webpack rules に ts-loader 相関を添付しましょう&quot;&gt;&lt;/a&gt;webpack rules に ts-loader 相関を添付しましょう&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;こっちは webpack2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rules: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+   &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     test: /\.ts$/,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     exclude: /node_modules|vue\/src/,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     loader: &#39;ts-loader&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     options: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+       appendTsSuffixTo: [/\.vue$/]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+   &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>いくつのユーザー状態の記録方法</title>
    <link href="https://blog.xingoxu.com/ja/2017/09/record-user-login-status-methods/"/>
    <id>https://blog.xingoxu.com/ja/2017/09/record-user-login-status-methods/</id>
    <published>2017-09-28T10:03:55.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>昔のやり方は、Cookie に直接保存する。サーバーストレージはまだそんな安いの状況下で、たくさんのウェブサイトはユーザーの登録そういうインフォメーションを変化してサインして Cookie に保存する。</p><p>変化やサインは、md5+salt、または secret を使って双方向の暗号化するとかの方法。</p><p>ウェブサイトに二回アクセスとしたら、Cookieに指定のkeyのvalueを検証する、それはただしかどうか。<br><a id="more"></a></p><p>こうやっていいところは：<br>サーバーストレージ占有なし、Cookie はユーザーの情報です</p><p>こうやって悪いところは：<br>ユーザー情報盗むはやすい、特にhttpsなし、中間者攻撃されたら、悪い人にログインされたことはできる。<br>また、別々に保存するのデータを改ざんされるはやすい。</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>計算力とストレージの速い発展、問題は次々に現れた。保存希望のユーザー情報はますます多くなる、Cookie のサイズ制限は少ない。</p><p>原理的には、Session は Cookie です。</p><p>サイトにアクセスとき、サーバーから唯一の Session ID を配ってCookie に保存する。ログインのとき、この Session ID による、サーバーに Session Object を作る、このオブジェクトにuser idとか、状態というユーザーの情報を保存している。</p><p>Session ID は Session Object を作るのときに配れも可能です、Session IDの作る方法は時間によるに限らない、sidの唯一を保証すればいい。</p><p>Session Object のストレージ場所も選べる。Sessionはとても大事ですと思われなら、mysql に保存するは可能です、そうではない場合は、redis に、メモリにも可能です。</p><p>だから、Sessionはとてもフレキシブル。</p><p>Session は過去の技術ではない、今はたくさんのウェブサイトに使われている。その原因は、httpしか問題いません。Internet Explorer &gt;= 10 の場合も CORS に Cookie の伝送が可能ですから、問題ない。</p><p>いいところ：<br>クライエントサイド sid しか見えない</p><p>悪いところ：<br>情報を取得する、一つ query 必要です。<br>盗むも可能ですが、Session / Cookie の問題ではない、http の問題です、httpで何も見える。</p><p>いいと悪いは時代に応じるです、Cookie に保存するときは、サーバーの計算力は低い、memcacheやredisもない、Sessionの時間はかかる、今はこれは決して悪いところじゃない。</p><p>Session と Cookie はフロントエンドにとって何をする必要はない、サーバーは Set-Cookie の http header で sid と Cookie の更新を完成することはできる。</p><h1 id="Token-Based"><a href="#Token-Based" class="headerlink" title="Token Based"></a>Token Based</h1><p>上記２つの方法は、２つの異なるアイデアを表しています。一つは情報をクライエントサイドに保存する、一つはサーバーにする。</p><p>フロントエンドとバックエンドを分けるときは、上記の２つアイデアも Cookie なしに進化する。</p><p>一つは<br>Session Token を取って、JSON、または 他のhttp header に伝送する</p><p>一つは<br>JWT（JSON Web Token） 情報をクライエントサイドに保存するというアイデアを表す。Cookie とちょっと似ているけど，情報を base64 に変化して、secretでサインして、一緒に token になる。</p><p>クライエントサイドに保存するのいいところは：<br>情報はクライエントに保存しているから、コードに直接処理はできる、ロードバランスとかの心配いらない。<br>また、Session の期限切れば、データベースに delete の必要がある。</p><p>悪いところは：<br>情報多くなるとき、Token は長くなる、http request は大きいになる、伝送の時間がかかる。</p><p>JWT の payload は base64 コーディングする、誰か標準に通じれば、内容を見られます。</p><p>Token Based 認証はフロントエンドに保存して、コーディングは必要です、一般はlocalStorageで。<br>だから、Token Based 認証は XSS に攻撃される可能性はある、Cookie Based 認証は CSRF に攻撃される可能性はある。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>いくつかの単語をすべての場合に要約することはできません、Token と Cookie また 情報をクライエントサイドに保存するとサーバーにするの場合を想像する、どんな方法を採用しようか、現業務を基にして、ちょっと長いのビジョンで選択を考える。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;p&gt;昔のやり方は、Cookie に直接保存する。サーバーストレージはまだそんな安いの状況下で、たくさんのウェブサイトはユーザーの登録そういうインフォメーションを変化してサインして Cookie に保存する。&lt;/p&gt;
&lt;p&gt;変化やサインは、md5+salt、または secret を使って双方向の暗号化するとかの方法。&lt;/p&gt;
&lt;p&gt;ウェブサイトに二回アクセスとしたら、Cookieに指定のkeyのvalueを検証する、それはただしかどうか。&lt;br&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>用户登录状态 验证权限的时代变迁</title>
    <link href="https://blog.xingoxu.com//2017/09/record-user-login-status-methods/"/>
    <id>https://blog.xingoxu.com//2017/09/record-user-login-status-methods/</id>
    <published>2017-09-28T09:57:15.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>直接在Cookie中存信息可谓是上古时代的操作了，在服务器还没有那么便宜的情况下，好多网站选择将用户的登录信息存在cookie中，他们把用户名或者用户id转换并签名之后，直接存入Cookie，如果有其他需要的信息，也是如此操作</p><p>转换或签名可以是加盐md5，也可以是使用secret的双向加密</p><p>用户第二次访问网站的时候，代码中对这段信息进行验证，看看是否是正确的签名的<br><a id="more"></a></p><p>这样做的好处是：<br>不会再占用服务器资源，直接就在cookie中读取数据，获得结果</p><p>坏处是：<br>登录凭据容易被窃取，尤其是那个年代还没有流行https，如果被中间人了，或者以另一种方式拿到了cookie，那就会被窃取登录，另外，每个数据还可能是分开存储的，因此容易被篡改</p><p>当然那时的互联网也并没有那么发达，cookie也就存存用户名什么的用于显示</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>后来网速变快了，web 应用高速发展，大家意识到了很多问题，cookie 大小不够啊，cookie 每个 key 都这么搞一下暴露太多了等等</p><p>从原理上来说，Session 就是 Cookie</p><p>客户端进入网站后，服务器分配一个 Session ID 给客户端种入 Cookie，用户登录时，在服务器查询 Session ID，在服务器写入 Session Object，这个对象里存了用户的登录数据，比如 id 啦，用户名啦，登录状态 / 角色等等</p><p>另外分配 Session ID 也可以是懒分配，也就是等到在服务器存 Session Object 的时候再分配也没有关系，Session ID 的分配可以是用 UserID 来进行加密分配，也可以用毫不相关的时间等信息进行加密分配，只需要保证这个 sid 唯一，不容易被伪造即可</p><p>Session 的存放也是可重可轻，如果觉得 Session 很重要，那么可以放入 mysql，如果觉得 Session 不怎么重要，甚至可以放入内存，重启丢失</p><p>Session 到至今还是非常非常多的网站在用，原因就是在于其实除了 https 以外的问题，并没有什么问题，IE &gt;= 10 之后，Cookie 也可以跨域，那么 Session 就没有什么问题</p><p>好处是：<br>在客户端除了 sid 以外，看不到任何信息，当然不太容易篡改</p><p>坏处是：<br>取 Session 的时候，是会需要再 query 一次的<br>也容易被窃取，当然这并不是 Session / Cookie 的锅，http 下，啥都是一清二楚的</p><p>另外，优缺点都是相对于时代来说的，存 Cookie 的时代服务器的性能不高，也没有 memcache 或者 redis 这种东西，存入 mysql 就需要再 query 一次，负载均衡当然不能同步 内存中的 Session，Cookie 成为了首选，那么现在呢，这点算力恐怕算不了什么，那么 Session 的那个坏处，就应该被划掉，Session 理所当然成为了流行的会话管理方式</p><p>Session 和 Cookie 都不需要前端介入，服务端通过 Set-Cookie http 头就可以完成 sid 和 Cookie 的更新</p><h1 id="Token-Based"><a href="#Token-Based" class="headerlink" title="Token Based"></a>Token Based</h1><p>上边两种方法代表了两种存登录凭据的思想，一种是把凭据存客户端，一种是把凭据存服务端</p><p>那么随着前后端分离的运动，上边两种的登录凭据的思想也发展出了两种不使用 Cookie 的方法</p><p>把凭据存服务端的 Session，把他的Token，单拿出来，在JSON中传递，或者在 http 头里传递或者其他方式传递</p><p>JWT（JSON Web Token） 代表了把凭据存客户端的思想，和当时的 Cookie 有点像，登录的时候把那些需要的信息 base64 编码作为一段，然后再对这些字段用 secret 进行签名，连起来这么一段 Token 去发给客户端作为凭据</p><p>凭据存在客户端的好处是：<br>因为登录状态都是跟着客户端跑的，时效信息都存在客户端，Session 如果过期了，要对 Session 数据库进行垃圾清理，那么凭据存在客户端就不需要，而且因为都是跟着客户端跑的，在服务器扩大搞集群，搞异地多活，就不需要考虑读数据库这种事情，因为都是客户端请求为 based ，随便哪个服务器来 handle 请求都没有问题</p><p>凭据存客户端坏处是：<br>当凭据内容越来越多，Token 也会越来越长，每一次请求都会携带这么大这么长的内容，显然不是非常合适</p><p>JWT 还有个问题就是中间那部分是 base64 编码的，如果熟悉标准的话，等于就是明文存储凭据了，虽然不能改，当然还是能看到</p><p>Token 类的鉴权需要前端参与并存储，存储一般会放在 localStorage等地方，因此其实是比较容易受到 XSS 的影响<br>Cookie 类的鉴权容易受到 CSRF 的影响</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实只言片语还是没法概括到所有的情况，只能大体的对Token 或者 Cookie 以及 凭据存服务端或者客户端的优缺点进行想象，究竟去使用哪一种鉴权方式，还是应该基于业务，对业务有非常深入的理解，以及稍带一些长远的思考</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;p&gt;直接在Cookie中存信息可谓是上古时代的操作了，在服务器还没有那么便宜的情况下，好多网站选择将用户的登录信息存在cookie中，他们把用户名或者用户id转换并签名之后，直接存入Cookie，如果有其他需要的信息，也是如此操作&lt;/p&gt;
&lt;p&gt;转换或签名可以是加盐md5，也可以是使用secret的双向加密&lt;/p&gt;
&lt;p&gt;用户第二次访问网站的时候，代码中对这段信息进行验证，看看是否是正确的签名的&lt;br&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>日本語ブログ始動</title>
    <link href="https://blog.xingoxu.com/ja/2017/08/hello-jp-world/"/>
    <id>https://blog.xingoxu.com/ja/2017/08/hello-jp-world/</id>
    <published>2017-08-26T08:55:10.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちわ、はじめまして、こちらは xingo さんの日本語ブログ！</p><p>日本語まだ下手です、どうぞ、お気軽いに指導します、よろしくお願いします！</p><p>さて、このブログですが、まずはどのようなものかご説明したいと思います。</p><ul><li>xingo さんの技術相関</li><li>xingo さんの作品</li><li>xingo さんの日常生活</li><li>xingo さんの旅行</li></ul><p>このような感じで本番までお付き合いいただけたら幸いです</p><p>では、また次回</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちわ、はじめまして、こちらは xingo さんの日本語ブログ！&lt;/p&gt;
&lt;p&gt;日本語まだ下手です、どうぞ、お気軽いに指導します、よろしくお願いします！&lt;/p&gt;
&lt;p&gt;さて、このブログですが、まずはどのようなものかご説明したいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xi
      
    
    </summary>
    
      <category term="uncategorized" scheme="https://blog.xingoxu.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 你的名字 东京 圣地巡礼</title>
    <link href="https://blog.xingoxu.com//2017/08/kiminonawa-tokyo-seichijunrei/"/>
    <id>https://blog.xingoxu.com//2017/08/kiminonawa-tokyo-seichijunrei/</id>
    <published>2017-08-26T05:02:06.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>BD 出了一个月，略忙再加上 VCB 也没有出 rip，前天 rip 刚出于是赶紧下载了来做整理啦</p><p>靠着仅有的印象和网上的一些经验攻略，把东京几乎所有的场景都拍到了吧（大概）</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd2euzhtj21hc0u0b2h.jpg" alt="第一次交换身体瀧去学校查手机地图"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd1sqchgj21kw23vb2b.jpg" alt="第一次交换身体瀧去学校查手机地图"></div><br><div class="clear-float img-caption">新宿站</div><p><br></p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd1xbjrpj21hc0u0x6w.jpg" alt="瀧去学校路上"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd1jphpxj21kw23vb2a.jpg" alt="瀧去学校路上"></div><br><div class="clear-float img-caption">新宿站前路</div><a id="more"></a><br><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd2d2vh6j21hc0u0qvc.jpg" alt="瀧去学校路上（東京や！）"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd23g4dij21kw16oe82.jpg" alt="瀧去学校路上（東京や！）"></div><br><div class="clear-float img-caption">新宿站前路</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbmz0td8j21hc0u01l6.jpg" alt="瀧去学校路上后的镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbm3fz0qj21kw16oqv6.jpg" alt="瀧去学校路上后的镜头"></div><br><div class="clear-float img-caption">新宿站全景（可在天桥上拍）</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fix34kkpjyj21hc0u0qvd.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fix34dnb9jj23402c04qr.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">西新宿 新宿警察署 夜晚</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd2mqd8wj21hc0u01l6.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd232dg3j21kw0uvhdt.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">西新宿 新宿警察署 白天</div><p>这里非常丢人的拍错了角度，因为完全没看图😂<br><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf1cckc9j21hc0u0kjt.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf0r611qj21kw16ob2b.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">新宿站 南口与中央东口之间的铁路桥下 白天</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf1e349nj21hc0u0kjt.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf18dalpj21kw23vx6r.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">新宿站 南口与中央东口之间的铁路桥下 夜晚</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg1rwwgkj21hc0u07wp.jpg" alt="三叶代替瀧和前辈发展关系"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg0ubhtbj21kw16o7wj.jpg" alt="三叶代替瀧和前辈发展关系"></div><br><div class="clear-float img-caption">涉谷站 东急电铁入口 TATSUYA</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbo72i9mj21hc0u07wp.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbnf9sw0j21kw16o4qr.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站外</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf9dm2p8j21hc0u0qvc.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf8koc6oj21950nzaxk.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwesmfu6rj21hc0u01l5.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwesdqq9gj21kw23vhdu.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbo03yauj21hc0u04qx.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbnkbx57j21kw23vb2b.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg21vktbj21hc0u07wp.jpg" alt="前辈和瀧结束约会的地方 全剧也多次出现"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg1rroymj21kw23vqv7.jpg" alt="前辈和瀧结束约会的地方 全剧也多次出现"></div><br><div class="clear-float img-caption">jr 信濃町站前天桥</div><p>桥上的这个路标牌实地并木有，但是却在六本木找到了一模一样的路牌，不是很清楚怎么回事</p><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwbm32i2aj21hc0u04qx.jpg" alt="瀧被前辈甩了单独在天桥"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwblheotsj21kw16onpe.jpg" alt="瀧被前辈甩了单独在天桥"></div><br><div class="clear-float img-caption">jr 信濃町站前天桥上</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf9nzwjsj21hc0u01l5.jpg" alt="被甩后的几处镜头 这个镜头全剧出现了两次"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf99pw2bj20nl0ik481.jpg" alt="被甩后的几处镜头 这个镜头全剧出现了两次"></div><br><div class="clear-float img-caption">jr 信濃町站对面</div><p>全图是这样的：</p><div class="center-img img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf9he7b3j21kw23vkjm.jpg" alt="jr 信濃町站对面"></div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg1ulinaj21hc0u0npl.jpg" alt="被甩后的几处镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg1a803cj21kw16o1kz.jpg" alt="被甩后的几处镜头"></div><br><div class="clear-float img-caption">刚才天桥的后边</div><p>这里角度非常刁钻不是很好拍到，只能这样拍一下，全图如下：<br><br></p><div class="center-img img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg1g9v6qj21kw16oe83.jpg" alt="天桥的后边"></div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwesi9jegj21hc0u0e89.jpg" alt="瀧画系守镇风景那一段的镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwersryagj21kw16ohdv.jpg" alt="瀧画系守镇风景那一段的镜头"></div><br><div class="clear-float img-caption">明治神宫前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiweshteg1j21hc0u0e89.jpg" alt="三叶来东京找瀧"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwerz363lj21kw23vqv6.jpg" alt="三叶来东京找瀧"></div><br><div class="clear-float img-caption">jr 代々木站</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg5q68p6j21hc0u0he1.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg57dk0cj21kw23v7wj.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 至四谷站 路上</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg68bzxuj21hc0u01l6.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg5sbgtmj21kw23vu0z.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 地铁出口</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiweslzvu6j21hc0u0he1.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwes8cxcuj21kw16o1kz.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 至四谷站 （靠近四谷） 野球场旁边小路</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf9j4x23j21hc0u0e89.jpg" alt="八年后 与前辈约会结束后的镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf9377mzj21kw16o1kz.jpg" alt="八年后 与前辈约会结束后的镜头"></div><br><div class="clear-float img-caption">涉谷站旁天桥</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf9iwr8aj21hc0u0b2h.jpg" alt="八年后 与前辈约会结束后的镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf8yt1tbj21kw23v7wk.jpg" alt="八年后 与前辈约会结束后的镜头"></div><br><div class="clear-float img-caption">新宿中央东口前过天桥 南口过天桥广场 星巴克门口</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf1etfa9j21hc0u07wp.jpg" alt="jr上发现对方后的镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf0qdlnyj21kw23vu0y.jpg" alt="jr上发现对方后的镜头"></div><br><div class="clear-float img-caption">四谷三丁目站 四谷站 中间的新宿通路 往须贺神社方向</div><p>这里标注一下三个标志在哪 😂 间隔非常远<br><br></p><div class="center-img img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf4tbu88j21kw23ux6p.jpg" alt="动画中的三个标志的位置"></div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg1tucs9j21hc0u0x6w.jpg" alt="jr上发现对方后的镜头"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg128dhwj21kw16okjn.jpg" alt="jr上发现对方后的镜头"></div><br><div class="clear-float img-caption">四谷四丁目 路口</div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg6f7rd1j21hc0u0u14.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg5pvutaj21kw23vkjm.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">jr新宿站 南口</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf15din3j21hc0u04qx.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwf0g51fij21kw16o4qr.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">jr 信濃町站对面</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg6fhfhnj21hc0u0qvd.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg5vl7jxj21kw23vx6q.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">新宿通路 去 须贺神社 的小路</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwgaaomadj21hc0u0he1.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg9jlbylj21kw23ve83.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">新宿通路 去 须贺神社 的小路</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwga6n8cxj21hc0u01l6.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg9qqr04j21kw23vhdv.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwga2gnhnj21hc0u0u15.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg9ptj31j21kw23vkjn.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div><p><br></p><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwga9mg3dj21hc0u0u15.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwg9pzc9qj21kw23v7wk.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div><p><br><br>完结~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BD 出了一个月，略忙再加上 VCB 也没有出 rip，前天 rip 刚出于是赶紧下载了来做整理啦&lt;/p&gt;
&lt;p&gt;靠着仅有的印象和网上的一些经验攻略，把东京几乎所有的场景都拍到了吧（大概）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd2euzhtj21hc0u0b2h.jpg&quot; alt=&quot;第一次交换身体瀧去学校查手机地图&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd1sqchgj21kw23vb2b.jpg&quot; alt=&quot;第一次交换身体瀧去学校查手机地图&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;新宿站&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;

&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd1xbjrpj21hc0u0x6w.jpg&quot; alt=&quot;瀧去学校路上&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fiwd1jphpxj21kw23vb2a.jpg&quot; alt=&quot;瀧去学校路上&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;新宿站前路&lt;/div&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>探索 Service Worker “生命周期”</title>
    <link href="https://blog.xingoxu.com//2017/08/explore-service-worker-working-lifetime/"/>
    <id>https://blog.xingoxu.com//2017/08/explore-service-worker-working-lifetime/</id>
    <published>2017-08-11T07:05:42.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>最近讨论 PWA 的好多啊，PWA 中有个非常重要的角色是 Service Worker 。刚写这篇文章的时候粗心一看，把现在发的 Working Draft 的发布时间以为就是 Service Worker 的发布时间，被棕神挑刺啦。spec 仓库的第一个 commit 是 2013 年 2 月 7 日，W3C 发第一个 Service Worker 的 public working draft 是 2014 年 5 月 8 日，第一个实现 Service Worker 的是 Chrome 40 （2015 年 1 月 21 日）</p><a id="more"></a><p>以下将Service Worker简称为SW</p><p>SW的功能略有耳闻，在MDN上它被描述为，“对资源缓存和自定义的网络请求进行控制的一个好的统筹机制”，同时他还具有“访问推送通知和后台同步API”</p><p>听起来很神奇，事实上看起来也很神奇，Twitter上个月更新了样式，大家都看到了推特变成了圆头像圆角，然而推特还使用了新的 SW，在允许推特使用Notification的情况下，推特可以在你Chrome开启的时候而没有打开网页的时候给你推送你所关注的内容（<a href="https://twitter.com/settings/web_notifications" target="_blank" rel="noopener">传送门</a>），有一种javascript在关闭网页后，甚至没有打开网页的情况下，就能在后台运行的感觉。</p><p>但事实上并非如此</p><h1 id="编写一个最简单的-SW"><a href="#编写一个最简单的-SW" class="headerlink" title="编写一个最简单的 SW"></a>编写一个最简单的 SW</h1><p>从零创建 Service Worker，只需四步</p><p><strong>第一步</strong>：我们需要一张 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My first Service Worker test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello, Service Worker!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步</strong>：我们需要一个 sw.js，他就是我们的service worker<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'When you see this, we have successfully registered the SW!'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>第三步</strong>：我们需要在刚才的网页上注册，我们可以在网页中的js引入注册，在这里我直接写在了index.html的script标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></span><br><span class="line"><span class="javascript">    navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123; <span class="attr">scope</span>: <span class="string">'/'</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">reg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// registration worked</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registration succeeded. Scope is '</span> + reg.scope);</span></span><br><span class="line"><span class="javascript">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// registration failed</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registration failed with '</span> + error);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最后一步</strong>：将上边的两个文件放在一个文件夹里，从这个文件夹起个服务器</p><p>打开浏览器，访问localhost，让我们看看控制台</p><p><img src="https://i.loli.net/2017/08/11/598d457727c83.png" alt="一个最简单的 SW"></p><p>至此，我们的第一个 SW 就成功完成了</p><h1 id="SW-的-Debug"><a href="#SW-的-Debug" class="headerlink" title="SW 的 Debug"></a>SW 的 Debug</h1><p>在chrome中，我们可以通过 <a href="chrome://serviceworker-internals/" target="_blank" rel="noopener"><code>chrome://serviceworker-internals/</code></a> 查看浏览器注册的所有SW</p><p><img src="https://i.loli.net/2017/08/11/598d45b36a053.png" alt="chrome://serviceworker-internals/"></p><p>可以在 <a href="chrome://inspect/#service-workers" target="_blank" rel="noopener"><code>chrome://inspect/#service-workers</code></a> 查看到当前正在运行的所有 SW</p><p><img src="https://i.loli.net/2017/08/11/598d45ea6be64.png" alt="chrome://inspect/#service-workers"></p><p>点击inspect，可以在Console中看到SW在控制台中输出的内容，在Source中，对SW进行断点调试</p><p>如果你还保留着刚才的那个localhost，你可以发现，在inspect service-worker页面中，我们刚才的sw.js还一直在运行着</p><h1 id="Service-Worker-的“生命周期”"><a href="#Service-Worker-的“生命周期”" class="headerlink" title="Service Worker 的“生命周期”"></a>Service Worker 的“生命周期”</h1><p>SW 的生命周期与事件可以在MDN上找到，也不再重复贴出，SW的缓存与推送通知就是靠着他的生命周期所发出的这些<code>event</code>来驱动的。</p><p>我想说的是另一个生命周期，我刚才说到，如果我们第一次进入localhost，并一直保留在那个页面，在inspect service-worker还可以看到service worker还一直运行着</p><p>我们可以将 sw.js 改写成如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;, <span class="number">5</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>在 chrome://serviceworker-internals/ 取消注册 SW ，并强制刷新 localhost（ mac下 ⌘+shift+R，windows 下 ctrl+shift+R ），我们会发现控制台中，每五秒就打印了一次 test，这也正是说明，SW在第一次进入的时候没有关闭页面的时候，一直在运行，我们也可以在刚才的 chrome://serviceworker-internals/ 看到这个 SW 正在运行。</p><p><img src="https://i.loli.net/2017/08/11/598d4776cc312.png" alt="5秒打印console.log(&#39;test&#39;)"></p><p>然而当我们关闭localhost页面，稍等十几秒后，在两个调试页面上，sw.js都会消失/停止了运行</p><p><img src="https://i.loli.net/2017/08/11/598d45b36a053.png" alt="关闭localhost后 sw 停止了运行"></p><p>我们再直接打开localhost，打开控制台，发现只有<code>Registration succeeded.</code>，而没有了test，再看两个调试页面，发现sw.js依然没有运行</p><p><img src="https://i.loli.net/2017/08/11/598d498dc090f.png" alt="重新再次打开页面 sw 没有运行"></p><p>让我们关闭这个localhost，将 sw.js 改写如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Yet Another sw.js'</span>);</span><br></pre></td></tr></table></figure><p>保存后，打开localhost</p><p><img src="https://i.loli.net/2017/08/11/598d4b2ce1e1e.png" alt="第一次改写sw.js"></p><p>我们刚才对 SW 完成了一次更新，发现他注册 handler 只会注册一次，接下来我们对 SW 的生命周期与运行周期进行探索，看看他在打开网页时，会不会触发生命周期。</p><p>然后我们再对 sw.js 进行重写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'install'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'activate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关闭localhost，等待sw停止运行或者deactivate它后再打开localhost，控制台显示出了<code>install</code>和<code>activate</code></p><p><img src="https://i.loli.net/2017/08/11/598d4b85023f5.png" alt="改写sw.js 加入生命周期"></p><p>再次关闭 localhost ，等待 sw 停止运行再打开 localhost ，控制台上只有 registration succeeded</p><p><img src="https://i.loli.net/2017/08/11/598d498dc090f.png" alt="重新再次打开页面 sw 没有运行"></p><p>很明显，SW 的生命周期的事件也只会触发一次，只是相对于他第一次下载后。</p><p>更新SW的机制可以在MDN上的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#恢复失败的请求" target="_blank" rel="noopener">#更新你的Service Worker</a> 这章看到，但这仅仅几行文字，而且比较绕口，我认为这其实是SW自身的工作周期，或者说是运行机制</p><p>于是在W3C Working Draft找到了Service Worker的<a href="https://www.w3.org/TR/service-workers-1/#service-worker-lifetime" target="_blank" rel="noopener">Lifetime定义</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The lifetime of a service worker is tied to the execution lifetime of events and not references held by service worker clients to the ServiceWorker object.</span><br><span class="line"></span><br><span class="line">A user agent may terminate service workers at any time it:</span><br><span class="line"></span><br><span class="line">- Has no event to handle.</span><br><span class="line">- Detects abnormal operation: such as infinite loops and tasks exceeding imposed time limits (if any) while handling the events.</span><br></pre></td></tr></table></figure><p>于是我觉得SW的工作周期结合上边的表现可以由下边的图来表示</p><p><img src="https://i.loli.net/2017/08/11/598d4e045ebfe.png" alt="SW 工作周期"></p><p>其实图里有一点不对的是，sw 的第一次运行并不一定是网页关闭才结束的，根据标准来的话，只要 sw 没有 event 需要 handle ，sw 的工作进程都可以结束，只是 Chrome 下是如此运行的。</p><p>另外需要一提的是因为工作线程结束了，因此在外边的变量不一定还保持着之前结束前的状态，所以不要写出如下的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可能为1，也可能是2</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>SW 是一个事件驱动型Worker，本质上，它是个Worker，工作在 worker context，所以没有访问 DOM 的权限</p><p>如果他要和window进行一些操作的话，与web worker类似，需要使用postMessage这样的方法来传递信息，在window里才能进行DOM操作</p><p>SW 是个Event bus，他的几个运行周期的事件，是专门为缓存与推送量身打造的（install事件和push事件），因此他的扩展性也非常好，以后如果有更多需求只需添加事件即可（比如chrome实现了sync事件是为了弥补离线时从本地到服务器post的不好体验），它将我们对资源拉的需求（对服务器的请求资源，对服务器的轮询），隐形转换为了推（本地缓存资源代码控制缓存，统一服务器推送）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近讨论 PWA 的好多啊，PWA 中有个非常重要的角色是 Service Worker 。刚写这篇文章的时候粗心一看，把现在发的 Working Draft 的发布时间以为就是 Service Worker 的发布时间，被棕神挑刺啦。spec 仓库的第一个 commit 是 2013 年 2 月 7 日，W3C 发第一个 Service Worker 的 public working draft 是 2014 年 5 月 8 日，第一个实现 Service Worker 的是 Chrome 40 （2015 年 1 月 21 日）&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>交叉编译原版某不可描述程序为梅林某停更插件续命</title>
    <link href="https://blog.xingoxu.com//2017/08/cross-compile-55-libev/"/>
    <id>https://blog.xingoxu.com//2017/08/cross-compile-55-libev/</id>
    <published>2017-08-07T06:41:43.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Forked from <a href="http://telegra.ph/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%8E%9F%E7%89%88shadowsocks%E4%B8%BAkoolshare%E6%A2%85%E6%9E%97ss%E6%8F%92%E4%BB%B6%E7%BB%AD%E5%91%BD-08-07" target="_blank" rel="noopener">原文 and 非自审查版</a></p></blockquote><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol><li>ubuntu 16.04</li><li><a href="https://github.com/RMerl/asuswrt-merlin" target="_blank" rel="noopener">原版梅林源码</a></li><li>55-libev 源码</li></ol><a id="more"></a><h1 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h1><p>解包梅林 55 插件发现，基本都是脚本，核心都是调用 55-redir ，因此猜测 55-redir 为原版 55 ，只需要更新原版 55 ，并在前端进行相应修改，便能对其续命</p><h2 id="ubuntu-16-04"><a href="#ubuntu-16-04" class="headerlink" title="ubuntu 16.04"></a>ubuntu 16.04</h2><p>不是很了解 linux，但是应该只要能够运行 arm-linux-gcc 的 linux 发行版都可以，但我在 ubuntu 16.04 下实验成功，因此这里写 ubuntu 16.04，当然 docker 是可以的（因为我就是在 macos 下用的 docker）</p><h2 id="原版梅林源码"><a href="#原版梅林源码" class="headerlink" title="原版梅林源码"></a>原版梅林源码</h2><p>虽然是 koolshare 改版固件，但其还是合并了梅林的代码，因此可以使用梅林的交叉编译工具链</p><p>下载时，注意对应相对的梅林版本号，可以看一下固件发布时的说明</p><p>梅林的交叉编译工具链在梅林源码 <code>release/src-rt-6.x.4708/toolchains/hndtools-arm-linux-2.6.36-uclibc-4.5.3</code>，release 下应该是固件版本的不同，但几个固件版本下的 toolchains 均指向这个文件夹，应该是 toolchains 没有改变过</p><h2 id="55-libev-源码"><a href="#55-libev-源码" class="headerlink" title="55-libev 源码"></a>55-libev 源码</h2><p>不解释</p><h1 id="炼丹编译"><a href="#炼丹编译" class="headerlink" title="炼丹编译"></a>炼丹编译</h1><h2 id="镜像准备与-arm-linux-gcc"><a href="#镜像准备与-arm-linux-gcc" class="headerlink" title="镜像准备与 arm-linux-gcc"></a>镜像准备与 arm-linux-gcc</h2><p>ubuntu 首先需要安装一些编译工具，如果对系统有洁癖的，推荐使用docker，我使用了别人写好的 DockerFile 的镜像</p><blockquote><p><a href="https://github.com/mritd/dockerfile/tree/master/asuswrt-merlin-build" target="_blank" rel="noopener">Asuswrt Merlin 固件交叉编译环境</a></p></blockquote><p>启动并挂载源码，运行 <code>docker exec -it container-name zsh</code></p><p>进入容器后尝试运行 <code>arm-linux-gcc</code></p><p>如果出现 <code>arm-linux-gcc: no input files</code> 说明正常，进行下一步</p><p>如果出现 其他，请检查路径，权限，否则等下编译出来的可能是 ubuntu 的 55 （我之前编译时，解压后arm-linux-gcc没有运行权限，于是没法编译，给了权限就可以了）</p><h2 id="编译-55-依赖与-55"><a href="#编译-55-依赖与-55" class="headerlink" title="编译 55 依赖与 55"></a>编译 55 依赖与 55</h2><p>编译 55 还有一些依赖需要安装，以下过程参阅</p><blockquote><p><a href="https://haoutil.com/topic/cross-compile-shadowsocks-libev" target="_blank" rel="noopener">交叉编译55-libev</a></p></blockquote><p>需要编译 <code>mbedTLS</code>、<code>pcre</code>、<code>libsodium</code>、<code>libev</code>、<code>libudns</code></p><p>按照原博文的编译后，最后编译 55 时死活没有检测到编译了libudns，怕是编译后文件夹没有添加到 <code>PATH</code> 中，当然刚才的博文里还提供了一键编译脚本，但那个一键编译脚本中判断参数的部分在ubuntu里报错，于是我就去了，直接写死环境 <code>arm-linux</code> 即可</p><p>fork了一下  </p><script src="https://gist.github.com/xingoxu/a9dc40df528c57c792ee72f1409a6ebb.js"></script><p>编译过程大约需要持续 5-10 分钟</p><p><img src="https://i.loli.net/2017/08/07/5987eac266528.png" alt="编译开始"></p><p><img src="https://i.loli.net/2017/08/07/5987f6bf102a1.png" alt="编译成功"></p><p>使用一键脚本编译的话，在 <code>dists/55-libev/bin</code> 中拿到 <code>ss-redir</code>，将他scp到路由器上，执行 <code>ss-redir -v</code></p><p><img src="https://i.loli.net/2017/08/07/5987e533d41aa.jpg" alt="编译成功后运行ss-redir -v"></p><p>出现以上则为成功</p><h1 id="替换原插件并自行打包"><a href="#替换原插件并自行打包" class="headerlink" title="替换原插件并自行打包"></a>替换原插件并自行打包</h1><p>Fork原插件repo</p><p><code>base=shadowsocks</code></p><p><code>./ss/ssconfig.sh</code> 中将地址更换成自己的repo可以使用自动更新</p><p><code>./version</code> 第一行是版本号  第二行是 tar.gz 的 hash值</p><p><code>./bin</code> 55 的各种二进制执行文件，可以将刚才编译出来的东西都覆盖进来</p><p><code>./webs/Main_Ss_Content.asp</code> 前端界面，加加密方式都在这里添加</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Forked from &lt;a href=&quot;http://telegra.ph/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%8E%9F%E7%89%88shadowsocks%E4%B8%BAkoolshare%E6%A2%85%E6%9E%97ss%E6%8F%92%E4%BB%B6%E7%BB%AD%E5%91%BD-08-07&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文 and 非自审查版&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;ubuntu 16.04&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RMerl/asuswrt-merlin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原版梅林源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;55-libev 源码&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 野良神圣地巡礼</title>
    <link href="https://blog.xingoxu.com//2017/06/noragami-seichijunrei/"/>
    <id>https://blog.xingoxu.com//2017/06/noragami-seichijunrei/</id>
    <published>2017-06-04T05:28:41.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>上个月人生的第一次出国以及第一次赴日去了东京，巡了君名和野良神还有一些四月的圣地，回来后一直在<del>忙</del>（忙着玩塞尔达和p5），当然工作也是挺多的挺烦的，于是今天稍稍有那么点空闲时间整理一下</p><p>时间还算比较充裕，就把第一季和ARAGOTO那些印象比较深的巡了，另外野良神和其他几个动画搞了个圣地巡礼的app，大多数地点在那个上边也有标注，app的名字叫「舞台めぐり」<br><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/59339ee10d3e0.jpg" alt="ARAGOTO EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/59339ee32e9ad.jpg" alt="ARAGOTO EP07"></div><br><div class="clear-float img-caption">西新宿</div><p>这边正好在修路，没法搞到很好的角度</p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a3f92feb9.jpg" alt="ARAGOTO EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a3ff26b98.jpg" alt="ARAGOTO EP07"></div><br><div class="clear-float img-caption">刚才那张的对面</div><a id="more"></a><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a6f83ad8c.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a6fa247b8.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">新宿駅南改札口后边的通道</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a7ebb1901.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a7ed97a44.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">湯島天満宮</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a91bbabdf.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a91d66d0c.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">東京メトロ湯島駅</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa0149fc8.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa02a5912.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">湯島天満宮入口</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa3de6da4.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa3f9776c.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">湯島天満宮入口 近距离</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ab1c37646.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ab1e204ef.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">上野公园科技馆门口</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aaf4d4ec3.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aaf683a6a.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">上野公园</div>至此，东京市中心结束<br><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933acd05887f.jpg" alt="无印 EP02"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933acd1ef0bf.jpg" alt="无印 EP02"></div><br><div class="clear-float img-caption">大泉学園駅</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ad61024a7.jpg" alt="无印 EP01"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ad61e63c8.jpg" alt="无印 EP01"></div><br><div class="clear-float img-caption">大泉学園駅</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af4346583.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af455f606.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">大泉学園駅ホーム</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af51ea015.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af53b0456.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">大泉学園駅ホーム</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0cd9e364.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0cfc86ed.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">練馬 梨の花公園 附近的通路</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0f56bf05.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0f7ece2c.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">練馬 梨の花公園 附近的通路</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b15a367e6.jpg" alt="无印 EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b15bb00e7.jpg" alt="无印 EP07"></div><br><div class="clear-float img-caption">練馬 梨の花公園</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b1ab4d835.jpg" alt="无印 EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b1ac8c0c3.jpg" alt="无印 EP07"></div><br><div class="clear-float img-caption">練馬 梨の花公園</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b33ea643d.jpg" alt="无印 EP04"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34072305.jpg" alt="无印 EP04"></div><br><div class="clear-float img-caption">石神井公園内的一家店 小福家的店</div>因为这家店不让拍照，只能远远拍一张表示来过了<br><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34dcc77c.jpg" alt="无印 EP02"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34ff1170.jpg" alt="无印 EP02"></div><br><div class="clear-float img-caption">石神井公園去駅的散步小路</div><p>还有君名的，等七月bd发售了再截图整理吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月人生的第一次出国以及第一次赴日去了东京，巡了君名和野良神还有一些四月的圣地，回来后一直在&lt;del&gt;忙&lt;/del&gt;（忙着玩塞尔达和p5），当然工作也是挺多的挺烦的，于是今天稍稍有那么点空闲时间整理一下&lt;/p&gt;
&lt;p&gt;时间还算比较充裕，就把第一季和ARAGOTO那些印象比较深的巡了，另外野良神和其他几个动画搞了个圣地巡礼的app，大多数地点在那个上边也有标注，app的名字叫「舞台めぐり」&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/59339ee10d3e0.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/59339ee32e9ad.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;西新宿&lt;/div&gt;

&lt;p&gt;这边正好在修路，没法搞到很好的角度&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/5933a3f92feb9.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/5933a3ff26b98.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;刚才那张的对面&lt;/div&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>寿屋 李小狼 1/7</title>
    <link href="https://blog.xingoxu.com//2017/04/kotobukiya-syaoran/"/>
    <id>https://blog.xingoxu.com//2017/04/kotobukiya-syaoran/</id>
    <published>2017-04-16T06:57:56.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://bgm.tv/character/6527" target="_blank" rel="noopener">bgm 人物介绍</a></p><p><a href="http://myfigurecollection.net/item/236142" target="_blank" rel="noopener">MyFigureCollection.net</a></p><p><a href="https://www.amazon.co.jp/dp/B00QUQ431K" target="_blank" rel="noopener">Amazon.co.jp</a></p></blockquote><p>コトブキヤ ARTFX J カードキャプターさくら 李小狼 1/7 スケール PVC 製 塗装済み完成品フィギュア</p><p>壽屋</p><a id="more"></a><p>「見つけた。『クロウカード』の気配だ。」</p><p>壽屋『カードキャプターさくら』フィギュアシリーズ第二弾!<br>今でも絶大な人気を誇る名作『カードキャプターさくら』より、「李小狼」が ARTFX J シリーズで登場!</p><p>男性、女性共に幅広い支持を持つ人気キャラクター「李小狼」を立体化。<br>CLAMP のイラストを元に、戦闘用の装束を身にまとった姿を再現致しました。<br>凛々しさの中に年相応のあどけなさが垣間見える表情や、装束を翻した大胆なポージングに加え、小狼の羅針盤をモチーフにしたベースが作品の世界観をより一層引き立てます。</p><p>コトブキヤ ARTFX J「カードキャプターさくら」シリーズ第二弾。<br>圧倒的なクオリティを是非お手に取ってお確かめください。</p><p>售价： ¥11,000</p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f301d5e00f7.jpg" alt="与盒对比"></p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30ddac0986.jpg" alt="总览1"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e257c5c8.jpg" alt="总览2"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e27b49cf.jpg" alt="总览3"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e32c9af8.jpg" alt="总览4"></p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107cec352.jpg" alt="正脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107c747a6.jpg" alt="侧脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107be0a0a.jpg" alt="左侧脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107b9413b.jpg" alt="右侧脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107c6dad5.jpg" alt="半侧脸-脖子"></p><p>最喜欢的是脖子下方的白色里边的衣服，也是做得非常的精细</p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107b567f2.jpg" alt="剑"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>非常精致的手办，很棒</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bgm.tv/character/6527&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bgm 人物介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myfigurecollection.net/item/236142&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyFigureCollection.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B00QUQ431K&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コトブキヤ ARTFX J カードキャプターさくら 李小狼 1/7 スケール PVC 製 塗装済み完成品フィギュア&lt;/p&gt;
&lt;p&gt;壽屋&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
  <entry>
    <title>UC 厂 百夜优一郎</title>
    <link href="https://blog.xingoxu.com//2017/04/uc-hyakuya-yuichiro/"/>
    <id>https://blog.xingoxu.com//2017/04/uc-hyakuya-yuichiro/</id>
    <published>2017-04-15T16:03:42.000Z</published>
    <updated>2019-12-21T05:35:44.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://bgm.tv/character/28623" target="_blank" rel="noopener">bgm 人物介绍</a></p><p><a href="http://myfigurecollection.net/item/286361" target="_blank" rel="noopener">MyFigureCollection.net</a></p><p><a href="https://www.amazon.co.jp/dp/B017AT19HQ" target="_blank" rel="noopener">Amazon.co.jp</a></p></blockquote><p>mensHdge technical statue No.21 終わりのセラフ 百夜優一郎 ノンスケール ATBC-PVC 製 塗装済みフィギュア</p><p>ユニオンクリエイティブ</p><a id="more"></a><p>「その人間の醜さに怯えながら死ね 吸血鬼」</p><p>『終わりのセラフ』より百夜優一郎が立体化! ・マントは着脱可能!</p><p>[セット内容] ・本体 ・台座</p><p>附赠一张与手办姿势一致的相卡</p><p>售价 ¥9,074</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2374f069b2.jpg" alt="与盒对比"></p><p>三角底座</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://ooo.0o0.ooo/2017/04/15/58f239fe0be6b.jpg" alt="总览1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23a55beba4.jpg" alt="总览2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ac6ce866.jpg" alt="总览3"></p><p>披风可脱</p><p>脱下披风</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ba8ebf06.jpg" alt="脱下披风1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c179335b.jpg" alt="脱下披风2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c369b509.jpg" alt="脱下披风3"></p><h1 id="细节展示"><a href="#细节展示" class="headerlink" title="细节展示"></a>细节展示</h1><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24015f0a78.jpg" alt="腿1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f240bd21aec.jpg" alt="腿2"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f24387309b9.jpg" alt="腿3"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ab70c206.jpg" alt="腿4"></p><p>小优的腿非常细长，还原的特别棒</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2410eebc55.jpg" alt="剑"></p><p>剑的颜色很棒，细节还是比较到位的</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24198865cf.jpg" alt="正脸1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f242ec38660.jpg" alt="正脸2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2432996026.jpg" alt="正脸3"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2418710169.jpg" alt="侧脸1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2437a5df8c.jpg" alt="侧脸2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24202c7096.jpg" alt="侧脸3"></p><p>脸的还原度还是比较高的，也不错，虽然头发在有些角度看上去有些奇怪，总体还是不错</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c9853de4.jpg" alt="缺点"></p><p>身上，衣服上的细节均或多或少有所变形 有一种崩坏的感觉，最明显的比如腰带，但每个细节还是有做，勉强过得去吧</p><p>腰带下方的衣服颜色有很奇怪的痕迹</p><p>披风的固定不牢固，容易松动，图上就是松动了的披风</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还是一个可以入的手办，只是这个性价比略低，史老师做工感觉要比小优好很多，只比小优贵1000</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bgm.tv/character/28623&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bgm 人物介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myfigurecollection.net/item/286361&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyFigureCollection.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B017AT19HQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mensHdge technical statue No.21 終わりのセラフ 百夜優一郎 ノンスケール ATBC-PVC 製 塗装済みフィギュア&lt;/p&gt;
&lt;p&gt;ユニオンクリエイティブ&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
</feed>
