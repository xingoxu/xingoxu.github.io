<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xingo&#39;s private plot</title>
  <subtitle>一个在成长的男孩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xingoxu.com/"/>
  <updated>2017-08-26T07:58:02.950Z</updated>
  <id>https://blog.xingoxu.com/</id>
  
  <author>
    <name>xingo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017 你的名字 东京 圣地巡礼</title>
    <link href="https://blog.xingoxu.com/2017/08/kiminonawa-tokyo-seichijunrei/"/>
    <id>https://blog.xingoxu.com/2017/08/kiminonawa-tokyo-seichijunrei/</id>
    <published>2017-08-26T05:02:06.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>BD 出了一个月，略忙再加上 VCB 也没有出 rip，前天 rip 刚出于是赶紧下载了来做整理啦</p>
<p>靠着仅有的印象和网上的一些经验攻略，把东京几乎所有的场景都拍到了吧（大概）</p>
<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwd2euzhtj21hc0u0b2h.jpg" alt="第一次交换身体瀧去学校查手机地图"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1sqchgj21kw23vb2b.jpg" alt="第一次交换身体瀧去学校查手机地图"></div><br><div class="clear-float img-caption">新宿站</div>

<p><br></p>
<link rel="stylesheet" type="text/css" href="/css/seichi.css">

<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1xbjrpj21hc0u0x6w.jpg" alt="瀧去学校路上"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwd1jphpxj21kw23vb2a.jpg" alt="瀧去学校路上"></div><br><div class="clear-float img-caption">新宿站前路</div><a id="more"></a><br><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwd2d2vh6j21hc0u0qvc.jpg" alt="瀧去学校路上（東京や！）"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwd23g4dij21kw16oe82.jpg" alt="瀧去学校路上（東京や！）"></div><br><div class="clear-float img-caption">新宿站前路</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwbmz0td8j21hc0u01l6.jpg" alt="瀧去学校路上后的镜头"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbm3fz0qj21kw16oqv6.jpg" alt="瀧去学校路上后的镜头"></div><br><div class="clear-float img-caption">新宿站全景（可在天桥上拍）</div>

<p><br></p>
<div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fix34kkpjyj21hc0u0qvd.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fix34dnb9jj23402c04qr.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">西新宿 新宿警察署 夜晚</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwd2mqd8wj21hc0u01l6.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwd232dg3j21kw0uvhdt.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">西新宿 新宿警察署 白天</div>

<p>这里非常丢人的拍错了角度，因为完全没看图😂<br><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf1cckc9j21hc0u0kjt.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwf0r611qj21kw16ob2b.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">新宿站 南口与中央东口之间的铁路桥下 白天</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf1e349nj21hc0u0kjt.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf18dalpj21kw23vx6r.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">新宿站 南口与中央东口之间的铁路桥下 夜晚</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg1rwwgkj21hc0u07wp.jpg" alt="三叶代替瀧和前辈发展关系"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg0ubhtbj21kw16o7wj.jpg" alt="三叶代替瀧和前辈发展关系"></div><br><div class="clear-float img-caption">涉谷站 东急电铁入口 TATSUYA</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwbo72i9mj21hc0u07wp.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbnf9sw0j21kw16o4qr.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站外</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf9dm2p8j21hc0u0qvc.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf8koc6oj21950nzaxk.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwesmfu6rj21hc0u01l5.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwesdqq9gj21kw23vhdu.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwbo03yauj21hc0u04qx.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbnkbx57j21kw23vb2b.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg21vktbj21hc0u07wp.jpg" alt="前辈和瀧结束约会的地方 全剧也多次出现"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwg1rroymj21kw23vqv7.jpg" alt="前辈和瀧结束约会的地方 全剧也多次出现"></div><br><div class="clear-float img-caption">jr 信濃町站前天桥</div>

<p>桥上的这个路标牌实地并木有，但是却在六本木找到了一模一样的路牌，不是很清楚怎么回事</p>
<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbm32i2aj21hc0u04qx.jpg" alt="瀧被前辈甩了单独在天桥"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwblheotsj21kw16onpe.jpg" alt="瀧被前辈甩了单独在天桥"></div><br><div class="clear-float img-caption">jr 信濃町站前天桥上</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf9nzwjsj21hc0u01l5.jpg" alt="被甩后的几处镜头 这个镜头全剧出现了两次"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwf99pw2bj20nl0ik481.jpg" alt="被甩后的几处镜头 这个镜头全剧出现了两次"></div><br><div class="clear-float img-caption">jr 信濃町站对面</div>

<p>全图是这样的：</p>
<div class="center-img img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf9he7b3j21kw23vkjm.jpg" alt="jr 信濃町站对面"></div>

<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwg1ulinaj21hc0u0npl.jpg" alt="被甩后的几处镜头"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg1a803cj21kw16o1kz.jpg" alt="被甩后的几处镜头"></div><br><div class="clear-float img-caption">刚才天桥的后边</div>

<p>这里角度非常刁钻不是很好拍到，只能这样拍一下，全图如下：<br><br></p>
<div class="center-img img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg1g9v6qj21kw16oe83.jpg" alt="天桥的后边"></div>

<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwesi9jegj21hc0u0e89.jpg" alt="瀧画系守镇风景那一段的镜头"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwersryagj21kw16ohdv.jpg" alt="瀧画系守镇风景那一段的镜头"></div><br><div class="clear-float img-caption">明治神宫前</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiweshteg1j21hc0u0e89.jpg" alt="三叶来东京找瀧"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwerz363lj21kw23vqv6.jpg" alt="三叶来东京找瀧"></div><br><div class="clear-float img-caption">jr 代々木站</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg5q68p6j21hc0u0he1.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg57dk0cj21kw23v7wj.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 至四谷站 路上</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwg68bzxuj21hc0u01l6.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg5sbgtmj21kw23vu0z.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 地铁出口</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiweslzvu6j21hc0u0he1.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwes8cxcuj21kw16o1kz.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 至四谷站 （靠近四谷） 野球场旁边小路</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwf9j4x23j21hc0u0e89.jpg" alt="八年后 与前辈约会结束后的镜头"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf9377mzj21kw16o1kz.jpg" alt="八年后 与前辈约会结束后的镜头"></div><br><div class="clear-float img-caption">涉谷站旁天桥</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwf9iwr8aj21hc0u0b2h.jpg" alt="八年后 与前辈约会结束后的镜头"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf8yt1tbj21kw23v7wk.jpg" alt="八年后 与前辈约会结束后的镜头"></div><br><div class="clear-float img-caption">新宿中央东口前过天桥 南口过天桥广场 星巴克门口</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf1etfa9j21hc0u07wp.jpg" alt="jr上发现对方后的镜头"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwf0qdlnyj21kw23vu0y.jpg" alt="jr上发现对方后的镜头"></div><br><div class="clear-float img-caption">四谷三丁目站 四谷站 中间的新宿通路 往须贺神社方向</div>

<p>这里标注一下三个标志在哪 😂 间隔非常远<br><br></p>
<div class="center-img img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf4tbu88j21kw23ux6p.jpg" alt="动画中的三个标志的位置"></div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg1tucs9j21hc0u0x6w.jpg" alt="jr上发现对方后的镜头"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg128dhwj21kw16okjn.jpg" alt="jr上发现对方后的镜头"></div><br><div class="clear-float img-caption">四谷四丁目 路口</div>

<div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg6f7rd1j21hc0u0u14.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg5pvutaj21kw23vkjm.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">jr新宿站 南口</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf15din3j21hc0u04qx.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf0g51fij21kw16o4qr.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">jr 信濃町站对面</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg6fhfhnj21hc0u0qvd.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg5vl7jxj21kw23vx6q.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">新宿通路 去 须贺神社 的小路</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwgaaomadj21hc0u0he1.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg9jlbylj21kw23ve83.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">新宿通路 去 须贺神社 的小路</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwga6n8cxj21hc0u01l6.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg9qqr04j21kw23vhdv.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwga2gnhnj21hc0u0u15.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg9ptj31j21kw23vkjn.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div>

<p><br></p>
<div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwga9mg3dj21hc0u0u15.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg9pzc9qj21kw23v7wk.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div>

<p><br><br>完结~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BD 出了一个月，略忙再加上 VCB 也没有出 rip，前天 rip 刚出于是赶紧下载了来做整理啦&lt;/p&gt;
&lt;p&gt;靠着仅有的印象和网上的一些经验攻略，把东京几乎所有的场景都拍到了吧（大概）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwd2euzhtj21hc0u0b2h.jpg&quot; alt=&quot;第一次交换身体瀧去学校查手机地图&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1sqchgj21kw23vb2b.jpg&quot; alt=&quot;第一次交换身体瀧去学校查手机地图&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;新宿站&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;

&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1xbjrpj21hc0u0x6w.jpg&quot; alt=&quot;瀧去学校路上&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwd1jphpxj21kw23vb2a.jpg&quot; alt=&quot;瀧去学校路上&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;新宿站前路&lt;/div&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>探索 Service Worker “生命周期”</title>
    <link href="https://blog.xingoxu.com/2017/08/explore-service-worker-working-lifetime/"/>
    <id>https://blog.xingoxu.com/2017/08/explore-service-worker-working-lifetime/</id>
    <published>2017-08-11T07:05:42.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>最近讨论 PWA 的好多啊，PWA 中有个非常重要的角色是 Service Worker 。刚写这篇文章的时候粗心一看，把现在发的 Working Draft 的发布时间以为就是 Service Worker 的发布时间，被棕神挑刺啦。spec 仓库的第一个 commit 是 2013 年 2 月 7 日，W3C 发第一个 Service Worker 的 public working draft 是 2014 年 5 月 8 日，第一个实现 Service Worker 的是 Chrome 40 （2015 年 1 月 21 日）</p>
<a id="more"></a>
<p>以下将Service Worker简称为SW</p>
<p>SW的功能略有耳闻，在MDN上它被描述为，“对资源缓存和自定义的网络请求进行控制的一个好的统筹机制”，同时他还具有“访问推送通知和后台同步API”</p>
<p>听起来很神奇，事实上看起来也很神奇，Twitter上个月更新了样式，大家都看到了推特变成了圆头像圆角，然而推特还使用了新的 SW，在允许推特使用Notification的情况下，推特可以在你Chrome开启的时候而没有打开网页的时候给你推送你所关注的内容（<a href="https://twitter.com/settings/web_notifications" target="_blank" rel="external">传送门</a>），有一种javascript在关闭网页后，甚至没有打开网页的情况下，就能在后台运行的感觉。</p>
<p>但事实上并非如此</p>
<h1 id="编写一个最简单的-SW"><a href="#编写一个最简单的-SW" class="headerlink" title="编写一个最简单的 SW"></a>编写一个最简单的 SW</h1><p>从零创建 Service Worker，只需四步</p>
<p><strong>第一步</strong>：我们需要一张 index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My first Service Worker test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    Hello, Service Worker!</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>第二步</strong>：我们需要一个 sw.js，他就是我们的service worker<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'When you see this, we have successfully registered the SW!'</span>);</div></pre></td></tr></table></figure></p>
<p><strong>第三步</strong>：我们需要在刚才的网页上注册，我们可以在网页中的js引入注册，在这里我直接写在了index.html的script标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></div><div class="line"><span class="javascript">    navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123; <span class="attr">scope</span>: <span class="string">'/'</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">reg</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="comment">// registration worked</span></span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registration succeeded. Scope is '</span> + reg.scope);</span></div><div class="line"><span class="javascript">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></div><div class="line"><span class="javascript">      <span class="comment">// registration failed</span></span></div><div class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registration failed with '</span> + error);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>最后一步</strong>：将上边的两个文件放在一个文件夹里，从这个文件夹起个服务器</p>
<p>打开浏览器，访问localhost，让我们看看控制台</p>
<p><img src="https://i.loli.net/2017/08/11/598d457727c83.png" alt="一个最简单的 SW"></p>
<p>至此，我们的第一个 SW 就成功完成了</p>
<h1 id="SW-的-Debug"><a href="#SW-的-Debug" class="headerlink" title="SW 的 Debug"></a>SW 的 Debug</h1><p>在chrome中，我们可以通过 <a href="chrome://serviceworker-internals/" target="_blank" rel="external"><code>chrome://serviceworker-internals/</code></a> 查看浏览器注册的所有SW</p>
<p><img src="https://i.loli.net/2017/08/11/598d45b36a053.png" alt="chrome://serviceworker-internals/"></p>
<p>可以在 <a href="chrome://inspect/#service-workers" target="_blank" rel="external"><code>chrome://inspect/#service-workers</code></a> 查看到当前正在运行的所有 SW</p>
<p><img src="https://i.loli.net/2017/08/11/598d45ea6be64.png" alt="chrome://inspect/#service-workers"></p>
<p>点击inspect，可以在Console中看到SW在控制台中输出的内容，在Source中，对SW进行断点调试</p>
<p>如果你还保留着刚才的那个localhost，你可以发现，在inspect service-worker页面中，我们刚才的sw.js还一直在运行着</p>
<h1 id="Service-Worker-的“生命周期”"><a href="#Service-Worker-的“生命周期”" class="headerlink" title="Service Worker 的“生命周期”"></a>Service Worker 的“生命周期”</h1><p>SW 的生命周期与事件可以在MDN上找到，也不再重复贴出，SW的缓存与推送通知就是靠着他的生命周期所发出的这些<code>event</code>来驱动的。</p>
<p>我想说的是另一个生命周期，我刚才说到，如果我们第一次进入localhost，并一直保留在那个页面，在inspect service-worker还可以看到service worker还一直运行着</p>
<p>我们可以将 sw.js 改写成如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;, <span class="number">5</span> * <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>在 chrome://serviceworker-internals/ 取消注册 SW ，并强制刷新 localhost（ mac下 ⌘+shift+R，windows 下 ctrl+shift+R ），我们会发现控制台中，每五秒就打印了一次 test，这也正是说明，SW在第一次进入的时候没有关闭页面的时候，一直在运行，我们也可以在刚才的 chrome://serviceworker-internals/ 看到这个 SW 正在运行。</p>
<p><img src="https://i.loli.net/2017/08/11/598d4776cc312.png" alt="5秒打印console.log(&#39;test&#39;)"></p>
<p>然而当我们关闭localhost页面，稍等十几秒后，在两个调试页面上，sw.js都会消失/停止了运行</p>
<p><img src="https://i.loli.net/2017/08/11/598d45b36a053.png" alt="关闭localhost后 sw 停止了运行"></p>
<p>我们再直接打开localhost，打开控制台，发现只有<code>Registration succeeded.</code>，而没有了test，再看两个调试页面，发现sw.js依然没有运行</p>
<p><img src="https://i.loli.net/2017/08/11/598d498dc090f.png" alt="重新再次打开页面 sw 没有运行"></p>
<p>让我们关闭这个localhost，将 sw.js 改写如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Yet Another sw.js'</span>);</div></pre></td></tr></table></figure>
<p>保存后，打开localhost</p>
<p><img src="https://i.loli.net/2017/08/11/598d4b2ce1e1e.png" alt="第一次改写sw.js"></p>
<p>我们刚才对 SW 完成了一次更新，发现他注册 handler 只会注册一次，接下来我们对 SW 的生命周期与运行周期进行探索，看看他在打开网页时，会不会触发生命周期。</p>
<p>然后我们再对 sw.js 进行重写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'install'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'activate'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>关闭localhost，等待sw停止运行或者deactivate它后再打开localhost，控制台显示出了<code>install</code>和<code>activate</code></p>
<p><img src="https://i.loli.net/2017/08/11/598d4b85023f5.png" alt="改写sw.js 加入生命周期"></p>
<p>再次关闭 localhost ，等待 sw 停止运行再打开 localhost ，控制台上只有 registration succeeded</p>
<p><img src="https://i.loli.net/2017/08/11/598d498dc090f.png" alt="重新再次打开页面 sw 没有运行"></p>
<p>很明显，SW 的生命周期的事件也只会触发一次，只是相对于他第一次下载后。</p>
<p>更新SW的机制可以在MDN上的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#恢复失败的请求" target="_blank" rel="external">#更新你的Service Worker</a> 这章看到，但这仅仅几行文字，而且比较绕口，我认为这其实是SW自身的工作周期，或者说是运行机制</p>
<p>于是在W3C Working Draft找到了Service Worker的<a href="https://www.w3.org/TR/service-workers-1/#service-worker-lifetime" target="_blank" rel="external">Lifetime定义</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The lifetime of a service worker is tied to the execution lifetime of events and not references held by service worker clients to the ServiceWorker object.</div><div class="line"></div><div class="line">A user agent may terminate service workers at any time it:</div><div class="line"></div><div class="line">- Has no event to handle.</div><div class="line">- Detects abnormal operation: such as infinite loops and tasks exceeding imposed time limits (if any) while handling the events.</div></pre></td></tr></table></figure>
<p>于是我觉得SW的工作周期结合上边的表现可以由下边的图来表示</p>
<p><img src="https://i.loli.net/2017/08/11/598d4e045ebfe.png" alt="SW 工作周期"></p>
<p>其实图里有一点不对的是，sw 的第一次运行并不一定是网页关闭才结束的，根据标准来的话，只要 sw 没有 event 需要 handle ，sw 的工作进程都可以结束，只是 Chrome 下是如此运行的。</p>
<p>另外需要一提的是因为工作线程结束了，因此在外边的变量不一定还保持着之前结束前的状态，所以不要写出如下的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</div><div class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  count++;</div><div class="line">  <span class="built_in">console</span>.log(count);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>可能为1，也可能是2</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>SW 是一个事件驱动型Worker，本质上，它是个Worker，工作在 worker context，所以没有访问 DOM 的权限</p>
<p>如果他要和window进行一些操作的话，与web worker类似，需要使用postMessage这样的方法来传递信息，在window里才能进行DOM操作</p>
<p>SW 是个Event bus，他的几个运行周期的事件，是专门为缓存与推送量身打造的（install事件和push事件），因此他的扩展性也非常好，以后如果有更多需求只需添加事件即可（比如chrome实现了sync事件是为了弥补离线时从本地到服务器post的不好体验），它将我们对资源拉的需求（对服务器的请求资源，对服务器的轮询），隐形转换为了推（本地缓存资源代码控制缓存，统一服务器推送）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近讨论 PWA 的好多啊，PWA 中有个非常重要的角色是 Service Worker 。刚写这篇文章的时候粗心一看，把现在发的 Working Draft 的发布时间以为就是 Service Worker 的发布时间，被棕神挑刺啦。spec 仓库的第一个 commit 是 2013 年 2 月 7 日，W3C 发第一个 Service Worker 的 public working draft 是 2014 年 5 月 8 日，第一个实现 Service Worker 的是 Chrome 40 （2015 年 1 月 21 日）&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>交叉编译原版某不可描述程序为梅林某停更插件续命</title>
    <link href="https://blog.xingoxu.com/2017/08/cross-compile-55-libev/"/>
    <id>https://blog.xingoxu.com/2017/08/cross-compile-55-libev/</id>
    <published>2017-08-07T06:41:43.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Forked from <a href="http://telegra.ph/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%8E%9F%E7%89%88shadowsocks%E4%B8%BAkoolshare%E6%A2%85%E6%9E%97ss%E6%8F%92%E4%BB%B6%E7%BB%AD%E5%91%BD-08-07" target="_blank" rel="external">原文 and 非自审查版</a></p>
</blockquote>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol>
<li>ubuntu 16.04</li>
<li><a href="https://github.com/RMerl/asuswrt-merlin" target="_blank" rel="external">原版梅林源码</a></li>
<li>55-libev 源码</li>
</ol>
<a id="more"></a>
<h1 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h1><p>解包梅林 55 插件发现，基本都是脚本，核心都是调用 55-redir ，因此猜测 55-redir 为原版 55 ，只需要更新原版 55 ，并在前端进行相应修改，便能对其续命</p>
<h2 id="ubuntu-16-04"><a href="#ubuntu-16-04" class="headerlink" title="ubuntu 16.04"></a>ubuntu 16.04</h2><p>不是很了解 linux，但是应该只要能够运行 arm-linux-gcc 的 linux 发行版都可以，但我在 ubuntu 16.04 下实验成功，因此这里写 ubuntu 16.04，当然 docker 是可以的（因为我就是在 macos 下用的 docker）</p>
<h2 id="原版梅林源码"><a href="#原版梅林源码" class="headerlink" title="原版梅林源码"></a>原版梅林源码</h2><p>虽然是 koolshare 改版固件，但其还是合并了梅林的代码，因此可以使用梅林的交叉编译工具链</p>
<p>下载时，注意对应相对的梅林版本号，可以看一下固件发布时的说明</p>
<p>梅林的交叉编译工具链在梅林源码 <code>release/src-rt-6.x.4708/toolchains/hndtools-arm-linux-2.6.36-uclibc-4.5.3</code>，release 下应该是固件版本的不同，但几个固件版本下的 toolchains 均指向这个文件夹，应该是 toolchains 没有改变过</p>
<h2 id="55-libev-源码"><a href="#55-libev-源码" class="headerlink" title="55-libev 源码"></a>55-libev 源码</h2><p>不解释</p>
<h1 id="炼丹编译"><a href="#炼丹编译" class="headerlink" title="炼丹编译"></a>炼丹编译</h1><h2 id="镜像准备与-arm-linux-gcc"><a href="#镜像准备与-arm-linux-gcc" class="headerlink" title="镜像准备与 arm-linux-gcc"></a>镜像准备与 arm-linux-gcc</h2><p>ubuntu 首先需要安装一些编译工具，如果对系统有洁癖的，推荐使用docker，我使用了别人写好的 DockerFile 的镜像</p>
<blockquote>
<p><a href="https://github.com/mritd/dockerfile/tree/master/asuswrt-merlin-build" target="_blank" rel="external">Asuswrt Merlin 固件交叉编译环境</a></p>
</blockquote>
<p>启动并挂载源码，运行 <code>docker exec -it container-name zsh</code></p>
<p>进入容器后尝试运行 <code>arm-linux-gcc</code></p>
<p>如果出现 <code>arm-linux-gcc: no input files</code> 说明正常，进行下一步</p>
<p>如果出现 其他，请检查路径，权限，否则等下编译出来的可能是 ubuntu 的 55 （我之前编译时，解压后arm-linux-gcc没有运行权限，于是没法编译，给了权限就可以了）</p>
<h2 id="编译-55-依赖与-55"><a href="#编译-55-依赖与-55" class="headerlink" title="编译 55 依赖与 55"></a>编译 55 依赖与 55</h2><p>编译 55 还有一些依赖需要安装，以下过程参阅</p>
<blockquote>
<p><a href="https://haoutil.com/topic/cross-compile-shadowsocks-libev" target="_blank" rel="external">交叉编译55-libev</a></p>
</blockquote>
<p>需要编译 <code>mbedTLS</code>、<code>pcre</code>、<code>libsodium</code>、<code>libev</code>、<code>libudns</code></p>
<p>按照原博文的编译后，最后编译 55 时死活没有检测到编译了libudns，怕是编译后文件夹没有添加到 <code>PATH</code> 中，当然刚才的博文里还提供了一键编译脚本，但那个一键编译脚本中判断参数的部分在ubuntu里报错，于是我就去了，直接写死环境 <code>arm-linux</code> 即可</p>
<p>fork了一下  </p>
<script src="https://gist.github.com/xingoxu/a9dc40df528c57c792ee72f1409a6ebb.js"></script>


<p>编译过程大约需要持续 5-10 分钟</p>
<p><img src="https://i.loli.net/2017/08/07/5987eac266528.png" alt="编译开始"></p>
<p><img src="https://i.loli.net/2017/08/07/5987f6bf102a1.png" alt="编译成功"></p>
<p>使用一键脚本编译的话，在 <code>dists/55-libev/bin</code> 中拿到 <code>ss-redir</code>，将他scp到路由器上，执行 <code>ss-redir -v</code></p>
<p><img src="https://i.loli.net/2017/08/07/5987e533d41aa.jpg" alt="编译成功后运行ss-redir -v"></p>
<p>出现以上则为成功</p>
<h1 id="替换原插件并自行打包"><a href="#替换原插件并自行打包" class="headerlink" title="替换原插件并自行打包"></a>替换原插件并自行打包</h1><p>Fork原插件repo</p>
<p><code>base=shadowsocks</code></p>
<p><code>./ss/ssconfig.sh</code> 中将地址更换成自己的repo可以使用自动更新</p>
<p><code>./version</code> 第一行是版本号  第二行是 tar.gz 的 hash值</p>
<p><code>./bin</code> 55 的各种二进制执行文件，可以将刚才编译出来的东西都覆盖进来</p>
<p><code>./webs/Main_Ss_Content.asp</code> 前端界面，加加密方式都在这里添加</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Forked from &lt;a href=&quot;http://telegra.ph/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%8E%9F%E7%89%88shadowsocks%E4%B8%BAkoolshare%E6%A2%85%E6%9E%97ss%E6%8F%92%E4%BB%B6%E7%BB%AD%E5%91%BD-08-07&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文 and 非自审查版&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;ubuntu 16.04&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RMerl/asuswrt-merlin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原版梅林源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;55-libev 源码&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 野良神圣地巡礼</title>
    <link href="https://blog.xingoxu.com/2017/06/noragami-seichijunrei/"/>
    <id>https://blog.xingoxu.com/2017/06/noragami-seichijunrei/</id>
    <published>2017-06-04T05:28:41.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>上个月人生的第一次出国以及第一次赴日去了东京，巡了君名和野良神还有一些四月的圣地，回来后一直在<del>忙</del>（忙着玩塞尔达和p5），当然工作也是挺多的挺烦的，于是今天稍稍有那么点空闲时间整理一下</p>
<p>时间还算比较充裕，就把第一季和ARAGOTO那些印象比较深的巡了，另外野良神和其他几个动画搞了个圣地巡礼的app，大多数地点在那个上边也有标注，app的名字叫「舞台めぐり」<br><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/59339ee10d3e0.jpg" alt="ARAGOTO EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/59339ee32e9ad.jpg" alt="ARAGOTO EP07"></div><br><div class="clear-float img-caption">西新宿</div>

<p>这边正好在修路，没法搞到很好的角度</p>
<link rel="stylesheet" type="text/css" href="/css/seichi.css">

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a3f92feb9.jpg" alt="ARAGOTO EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a3ff26b98.jpg" alt="ARAGOTO EP07"></div><br><div class="clear-float img-caption">刚才那张的对面</div><a id="more"></a><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a6f83ad8c.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a6fa247b8.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">新宿駅南改札口后边的通道</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a7ebb1901.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a7ed97a44.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">湯島天満宮</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a91bbabdf.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a91d66d0c.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">東京メトロ湯島駅</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa0149fc8.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa02a5912.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">湯島天満宮入口</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa3de6da4.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa3f9776c.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">湯島天満宮入口 近距离</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ab1c37646.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ab1e204ef.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">上野公园科技馆门口</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aaf4d4ec3.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aaf683a6a.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">上野公园</div>至此，东京市中心结束<br><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933acd05887f.jpg" alt="无印 EP02"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933acd1ef0bf.jpg" alt="无印 EP02"></div><br><div class="clear-float img-caption">大泉学園駅</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ad61024a7.jpg" alt="无印 EP01"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ad61e63c8.jpg" alt="无印 EP01"></div><br><div class="clear-float img-caption">大泉学園駅</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af4346583.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af455f606.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">大泉学園駅ホーム</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af51ea015.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af53b0456.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">大泉学園駅ホーム</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0cd9e364.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0cfc86ed.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">練馬 梨の花公園 附近的通路</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0f56bf05.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0f7ece2c.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">練馬 梨の花公園 附近的通路</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b15a367e6.jpg" alt="无印 EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b15bb00e7.jpg" alt="无印 EP07"></div><br><div class="clear-float img-caption">練馬 梨の花公園</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b1ab4d835.jpg" alt="无印 EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b1ac8c0c3.jpg" alt="无印 EP07"></div><br><div class="clear-float img-caption">練馬 梨の花公園</div>

<p><br></p>
<div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b33ea643d.jpg" alt="无印 EP04"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34072305.jpg" alt="无印 EP04"></div><br><div class="clear-float img-caption">石神井公園内的一家店 小福家的店</div>因为这家店不让拍照，只能远远拍一张表示来过了<br><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34dcc77c.jpg" alt="无印 EP02"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34ff1170.jpg" alt="无印 EP02"></div><br><div class="clear-float img-caption">石神井公園去駅的散步小路</div>


<p>还有君名的，等七月bd发售了再截图整理吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月人生的第一次出国以及第一次赴日去了东京，巡了君名和野良神还有一些四月的圣地，回来后一直在&lt;del&gt;忙&lt;/del&gt;（忙着玩塞尔达和p5），当然工作也是挺多的挺烦的，于是今天稍稍有那么点空闲时间整理一下&lt;/p&gt;
&lt;p&gt;时间还算比较充裕，就把第一季和ARAGOTO那些印象比较深的巡了，另外野良神和其他几个动画搞了个圣地巡礼的app，大多数地点在那个上边也有标注，app的名字叫「舞台めぐり」&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/59339ee10d3e0.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/59339ee32e9ad.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;西新宿&lt;/div&gt;

&lt;p&gt;这边正好在修路，没法搞到很好的角度&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/5933a3f92feb9.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/5933a3ff26b98.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;刚才那张的对面&lt;/div&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>寿屋 李小狼 1/7</title>
    <link href="https://blog.xingoxu.com/2017/04/kotobukiya-syaoran/"/>
    <id>https://blog.xingoxu.com/2017/04/kotobukiya-syaoran/</id>
    <published>2017-04-16T06:57:56.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://bgm.tv/character/6527" target="_blank" rel="external">bgm 人物介绍</a></p>
<p><a href="http://myfigurecollection.net/item/236142" target="_blank" rel="external">MyFigureCollection.net</a></p>
<p><a href="https://www.amazon.co.jp/dp/B00QUQ431K" target="_blank" rel="external">Amazon.co.jp</a></p>
</blockquote>
<p>コトブキヤ ARTFX J カードキャプターさくら 李小狼 1/7 スケール PVC 製 塗装済み完成品フィギュア</p>
<p>壽屋</p>
<a id="more"></a>
<p>「見つけた。『クロウカード』の気配だ。」</p>
<p>壽屋『カードキャプターさくら』フィギュアシリーズ第二弾!<br>今でも絶大な人気を誇る名作『カードキャプターさくら』より、「李小狼」が ARTFX J シリーズで登場!</p>
<p>男性、女性共に幅広い支持を持つ人気キャラクター「李小狼」を立体化。<br>CLAMP のイラストを元に、戦闘用の装束を身にまとった姿を再現致しました。<br>凛々しさの中に年相応のあどけなさが垣間見える表情や、装束を翻した大胆なポージングに加え、小狼の羅針盤をモチーフにしたベースが作品の世界観をより一層引き立てます。</p>
<p>コトブキヤ ARTFX J「カードキャプターさくら」シリーズ第二弾。<br>圧倒的なクオリティを是非お手に取ってお確かめください。</p>
<p>售价： ¥11,000</p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f301d5e00f7.jpg" alt="与盒对比"></p>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30ddac0986.jpg" alt="总览1"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e257c5c8.jpg" alt="总览2"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e27b49cf.jpg" alt="总览3"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e32c9af8.jpg" alt="总览4"></p>
<h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107cec352.jpg" alt="正脸"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107c747a6.jpg" alt="侧脸"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107be0a0a.jpg" alt="左侧脸"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107b9413b.jpg" alt="右侧脸"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107c6dad5.jpg" alt="半侧脸-脖子"></p>
<p>最喜欢的是脖子下方的白色里边的衣服，也是做得非常的精细</p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107b567f2.jpg" alt="剑"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>非常精致的手办，很棒</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bgm.tv/character/6527&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bgm 人物介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myfigurecollection.net/item/236142&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MyFigureCollection.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B00QUQ431K&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Amazon.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コトブキヤ ARTFX J カードキャプターさくら 李小狼 1/7 スケール PVC 製 塗装済み完成品フィギュア&lt;/p&gt;
&lt;p&gt;壽屋&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
  <entry>
    <title>UC 厂 百夜优一郎</title>
    <link href="https://blog.xingoxu.com/2017/04/uc-hyakuya-yuichiro/"/>
    <id>https://blog.xingoxu.com/2017/04/uc-hyakuya-yuichiro/</id>
    <published>2017-04-15T16:03:42.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://bgm.tv/character/28623" target="_blank" rel="external">bgm 人物介绍</a></p>
<p><a href="http://myfigurecollection.net/item/286361" target="_blank" rel="external">MyFigureCollection.net</a></p>
<p><a href="https://www.amazon.co.jp/dp/B017AT19HQ" target="_blank" rel="external">Amazon.co.jp</a></p>
</blockquote>
<p>mensHdge technical statue No.21 終わりのセラフ 百夜優一郎 ノンスケール ATBC-PVC 製 塗装済みフィギュア</p>
<p>ユニオンクリエイティブ</p>
<a id="more"></a>
<p>「その人間の醜さに怯えながら死ね 吸血鬼」</p>
<p>『終わりのセラフ』より百夜優一郎が立体化! ・マントは着脱可能!</p>
<p>[セット内容] ・本体 ・台座</p>
<p>附赠一张与手办姿势一致的相卡</p>
<p>售价 ¥9,074</p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f2374f069b2.jpg" alt="与盒对比"></p>
<p>三角底座</p>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://ooo.0o0.ooo/2017/04/15/58f239fe0be6b.jpg" alt="总览1"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23a55beba4.jpg" alt="总览2"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ac6ce866.jpg" alt="总览3"></p>
<p>披风可脱</p>
<p>脱下披风</p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ba8ebf06.jpg" alt="脱下披风1"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c179335b.jpg" alt="脱下披风2"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c369b509.jpg" alt="脱下披风3"></p>
<h1 id="细节展示"><a href="#细节展示" class="headerlink" title="细节展示"></a>细节展示</h1><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24015f0a78.jpg" alt="腿1"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f240bd21aec.jpg" alt="腿2"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f24387309b9.jpg" alt="腿3"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ab70c206.jpg" alt="腿4"></p>
<p>小优的腿非常细长，还原的特别棒</p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f2410eebc55.jpg" alt="剑"></p>
<p>剑的颜色很棒，细节还是比较到位的</p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f24198865cf.jpg" alt="正脸1"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f242ec38660.jpg" alt="正脸2"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f2432996026.jpg" alt="正脸3"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f2418710169.jpg" alt="侧脸1"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f2437a5df8c.jpg" alt="侧脸2"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f24202c7096.jpg" alt="侧脸3"></p>
<p>脸的还原度还是比较高的，也不错，虽然头发在有些角度看上去有些奇怪，总体还是不错</p>
<p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c9853de4.jpg" alt="缺点"></p>
<p>身上，衣服上的细节均或多或少有所变形 有一种崩坏的感觉，最明显的比如腰带，但每个细节还是有做，勉强过得去吧</p>
<p>腰带下方的衣服颜色有很奇怪的痕迹</p>
<p>披风的固定不牢固，容易松动，图上就是松动了的披风</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还是一个可以入的手办，只是这个性价比略低，史老师做工感觉要比小优好很多，只比小优贵1000</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bgm.tv/character/28623&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bgm 人物介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myfigurecollection.net/item/286361&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MyFigureCollection.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B017AT19HQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Amazon.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mensHdge technical statue No.21 終わりのセラフ 百夜優一郎 ノンスケール ATBC-PVC 製 塗装済みフィギュア&lt;/p&gt;
&lt;p&gt;ユニオンクリエイティブ&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
  <entry>
    <title>谈一谈 surface pro 4 和 macbook pro 2016</title>
    <link href="https://blog.xingoxu.com/2017/04/macbook-and-surface/"/>
    <id>https://blog.xingoxu.com/2017/04/macbook-and-surface/</id>
    <published>2017-04-13T09:11:22.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>前年12月入手的surface pro 4，去年11月入手的mbp，都是第一时间下单的，所以其实很早就想做一个对比，或者说在拿到sp4之后就想写一个感受，只是一直没有时间去想这些事情</p>
<p>此文结论先写在前面：</p>
<blockquote>
<p>web开发，请选择 macOS与macbook pro</p>
</blockquote>
<a id="more"></a>
<h1 id="上两张购买图"><a href="#上两张购买图" class="headerlink" title="上两张购买图"></a>上两张购买图</h1><p><img src="https://ooo.0o0.ooo/2017/04/11/58ec53869fecd.png" alt="apple订单"></p>
<p><img src="https://ooo.0o0.ooo/2017/04/11/58ec5386c1a70.png" alt="微软订单"></p>
<h1 id="谈一谈sp4的感受"><a href="#谈一谈sp4的感受" class="headerlink" title="谈一谈sp4的感受"></a>谈一谈sp4的感受</h1><blockquote>
<p>性能不错，总体比普通笔记本好一点</p>
</blockquote>
<p>下面细讲</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><ol>
<li>很潮</li>
<li>很好看</li>
<li>很薄</li>
<li>很轻便</li>
</ol>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ol>
<li>六代低压i7很快，个人感觉比我的三代i5快很多</li>
<li>屏幕颜色很棒</li>
<li>炉石可以在小屏幕上直接玩，非常少的时候会掉帧，其他60帧运行</li>
<li>ow试过，低画质1920*1080 30-40帧左右</li>
<li>windows hello 识别进系统很好用！</li>
</ol>
<p>我觉得他并不是一台游戏机，所以我没有看中它的显卡，所以3 4我只是非常偶然的用过一次，就不再用了，还是不要指望显卡太多比较好</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="背后支架-键盘盖"><a href="#背后支架-键盘盖" class="headerlink" title="背后支架 键盘盖"></a>背后支架 键盘盖</h3><p>听说这是拿过专利的，<strong>但是</strong>当你把它当普通笔记本想在地铁上，公交车上，想在腿上写点什么，sp4就嘲笑你的大腿短，我是要保持一个如何的姿势才能看到屏幕</p>
<p><img src="https://ooo.0o0.ooo/2017/04/11/58ec58709c7b5.png" alt="背后支架示意图1"></p>
<p>还有</p>
<p>我想在桌上用sp4画画，然后非常尴尬，sp4最大角度听说是150度左右，但是在桌上画画，你想要的角度正好是150-180度之间，于是你就怎么都觉得手很不爽，还不如wacom，后边带翅膀的键盘🙄</p>
<p><img src="https://ooo.0o0.ooo/2017/04/11/58ec59e30ce82.png" alt="背后支架示意图1"></p>
<h3 id="笔"><a href="#笔" class="headerlink" title="笔"></a>笔</h3><ol>
<li>延迟很大</li>
<li>在玻璃上写字不准</li>
</ol>
<p>延迟很大，我用onenote都有感觉慢，用ps就更明显了，下笔经常停顿，用画图则没有这种感觉，当然也没有了笔压</p>
<p>不准，因为我从来没写过这么丑的字，要写好字花很长时间，没有真笔写得好，再加上延迟，科科</p>
<p>还有一些老生常谈的问题，大家都知道</p>
<ol>
<li>散热</li>
<li>续航 </li>
<li>系统 </li>
<li>休眠</li>
</ol>
<h3 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h3><p>不要说使用很激烈了，莫名其妙的转风扇，莫名其妙的又不转风扇，不是很懂，开个音乐开个ps就转了，热倒也就算了，就是太吵了</p>
<h3 id="续航"><a href="#续航" class="headerlink" title="续航"></a>续航</h3><p>最多4小时，别听微软xjb吹了</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>win10小问题非常多，且不说开发环境的问题，开机键盘完全不能用，要等实足两分钟，有时莫名其妙卡住（冻住），得等一会又突然好了</p>
<p>高分屏支持又很差，很多软件外接显示器的字体大小和你单独在surface上看的大小又不一样，每次得设置，又或者是根本没法设置</p>
<p>没有键盘盖基本不能打字，什么屏幕键盘啊，难用的一笔</p>
<h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><p>有问题 非常大的问题，几次说修好了，几次触发了我内心的阴影，合盖风扇不停转最后电池用光了，正确的休眠方式，把键盘盖拿掉按电源键休眠，基本没有问题</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以综上所述我觉得他比普通笔记本来说并没有提升什么太多，而且屏幕也不怎么大够用，微软画的饼还没有实现，so what，不如把这点钱拿去炒股（笑）</p>
<p>也千万别想着什么边走边画，这种场景，不存在的，你可能需要的，就只是一台笔记本</p>
<h1 id="谈一谈mbp的感受"><a href="#谈一谈mbp的感受" class="headerlink" title="谈一谈mbp的感受"></a>谈一谈mbp的感受</h1><blockquote>
<p>开发很棒</p>
</blockquote>
<p>下面细讲</p>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><h3 id="外观-1"><a href="#外观-1" class="headerlink" title="外观"></a>外观</h3><p>手感很好，包括键盘，触摸板是广受好评，老生常谈，非常棒<br>新的几个特性touchbar 指纹解锁什么的，虽说touchbar用的不多，但是也还算中规中矩，不差</p>
<h3 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h3><ol>
<li>其实也算是低压i5，但也没有慢到哪里去，总之开发很棒</li>
<li>屏幕很好</li>
</ol>
<h3 id="系统-1"><a href="#系统-1" class="headerlink" title="系统"></a>系统</h3><p>我觉得mbp最好的就是macOS在搭建开发环境上的便利，brew，命令行什么的，在windows下你要在各种窗口里切换，怎么地，打开一个bash最快也要右键点git bash，都是模拟环境，macOS上就是自己设定了快捷键之后一按就可以敲命令了</p>
<p>安装环境也是非常的快，基本不会看到windows的那种莫名其妙的错误提示，出错了，看着提示就能知道发生了什么，一般也就是sudo 的事情</p>
<p>更可贵的是，我在macOS下成功make了，我在centos里从来就没有make成功过东西</p>
<h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>很多好用的软件都要买，虽然可以用破解，但是不提倡，而且可能会有病毒</li>
<li>外接显示器是灾难，需要设置一番，会有一些不便利（我这里插拔显示器需要重新关闭打开一次显示器）</li>
<li>系统还是有一些小问题的，但无伤大雅，没有微软那么严重，碰到过几次五国，碰到过花屏，但都是茶余饭后的消遣罢了，真的，比较少看见</li>
</ol>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>没有对比就没有伤害</p>
<h2 id="续航-1"><a href="#续航-1" class="headerlink" title="续航"></a>续航</h2><p>sp4 4小时<br>mbp 5小时 吧 </p>
<h2 id="重量"><a href="#重量" class="headerlink" title="重量"></a>重量</h2><p>sp4更轻  如果mbp有sp4的重量就好了，mbp两块铁皮实在是重（也没有那么重，就是对比起来那个轻的比较多）</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>sp4 一个usb 一个dp 一个磁吸口<br>mbp 四个type-c</p>
<p>很多人喷mbp的接口都是type-c的，太激进</p>
<p>事实上mbp 除非单输出外接显示器，否则你是不需要鼠标的，然后现在基本也不用u盘传文件了，那么基本来说，这些口其实对你来说根本没有什么关系</p>
<p>于是我现在四个口都在干嘛呢</p>
<p>一个接显示器，usb-c to dp，一定记住买显示器千万不要买hdmi的，很坑，当然我既然已经用了surface过了，当然就不会再用hdmi显示器了</p>
<p>一个接外置网卡和3个usb的hub，有时会连手机充电，主要是网卡，内网传文件会比较快（家里有NAS），正常来说用5Ghz的无线就非常足够了</p>
<p>一个接电源</p>
<p>在这个接口问题上，每个人都有每个人的想法用途，我就罗列一下自己的需求</p>
<h2 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h2><p>最后一个综合对比就是网上大家经常说的生产力</p>
<p>一个是office，office在mac上也有，现在也是office 365，mac上也是更新很快，touchbar一出微软也跟进，设计上和win也是基本同一，要说不方便，可能刚上手会有一些问题，但是就一个码农的角度来说，我用的office的功能区别不大，稍微熟悉一下还是马上就能get到的</p>
<p>另一个是QQ问题，QQ虽然没有win上功能那么多，基本功能也都满足了，还没有win的那么臃肿，特别是包括5.4.1版本之前 都没有撤回功能哦，个人觉得并不烂</p>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>从我个人的需求来说，感觉mbp要比surface好用很多，我觉得系统上的便利比surface那些硬件上的便利要好很多很多很多，而且surface非常不稳定</p>
<p>最后上一张图表示一下自己的工作环境</p>
<p><img src="https://ooo.0o0.ooo/2017/04/13/58ef41b98caec.jpg" alt="工作环境"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前年12月入手的surface pro 4，去年11月入手的mbp，都是第一时间下单的，所以其实很早就想做一个对比，或者说在拿到sp4之后就想写一个感受，只是一直没有时间去想这些事情&lt;/p&gt;
&lt;p&gt;此文结论先写在前面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;web开发，请选择 macOS与macbook pro&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>探究/使用webpack的AMD</title>
    <link href="https://blog.xingoxu.com/2017/01/webpack-amd/"/>
    <id>https://blog.xingoxu.com/2017/01/webpack-amd/</id>
    <published>2017-01-22T09:13:19.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>什么？webpack出2了？</p>
<p>刚用了小半年的webpack就又要重头学过了？</p>
<p><img src="https://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_thumb.png" alt="摊手"></p>
<p>那么试试吧？先试试改造一下blog？</p>
<p>我擦？怎么用requirejs？</p>
<a id="more"></a>
<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>也不算熟悉webpack吧，1的时候用vue-cli bootstrap了萌购的几个手机页面，虽说其实完全不用关心构建这一块，只需要改改路径就可以了，但闲下来的时候好奇心也是会驱动自己看看别人是怎么写的构建文件的，不过看别人写的构建文件，又稍微看了点其他网站的webpack的有关教程，自己倒也是没有想到AMD这件事情，也对webpack并不怎么熟悉，而且1的文档也实在是狗屎的可以，就停留在会用，会模仿着套路写</p>
<p>前两天2出了，看看这新的文档站，手边又正好不怎么忙，那么看看</p>
<p>官方风格不错，也有很好的introduction和concept的解释，重新学习了一下官方对loaders的定义，不过2刚出，文档站里也有很多问题，比如loaders现在叫rules但文档里还是loaders等这样的小问题</p>
<p>不过这些字眼看多了，小困难轻松克服，再看看migrate，貌似并没有什么大改动，想给公司项目试试，不过看vue-cli官方生成的构建文件里的loaders是动态生成的，于是先暂时放一放。那先试试自己的blog，改造一下，打开主题的main.js，马上反应过来一个问题，靠，我以前用AMD写的</p>
<h1 id="import-requirejs-from-‘requirejs’"><a href="#import-requirejs-from-‘requirejs’" class="headerlink" title="import requirejs from ‘requirejs’;"></a>import requirejs from ‘requirejs’;</h1><p>前情提要结束，回到正题，webpack里怎么用上AMD？</p>
<p>直觉告诉我，import requirejs from ‘requirejs’;</p>
<p>好吧，在写下这行代码前，我去requirejs的官网看了<a href="http://requirejs.org/docs/node.html#3" target="_blank" rel="external">文档</a><br>看了，也没讲到构建工具，但就写法来说，都是一样的，那么试试</p>
<p>哦对了，忘记贴我的构建文件了，不过也没东西，就指定了入口和出口</p>
<script src="https://gist.github.com/xingoxu/9c73872db5fce038b939ce0cce1e7c01.js"></script>

<p>然后 <code>npm install webpack --save-dev &amp;&amp; npm install requirejs --save</code> </p>
<p>然后入口点app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requirejs <span class="keyword">from</span> <span class="string">'requirejs'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</div><div class="line"></div><div class="line">requirejs([<span class="string">'./async.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">asyncModule</span>) </span>&#123;</div><div class="line">  asyncModule.init();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>async.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define([],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    init()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"I'm in async.js"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2017/01/22/58849f426e077.png" alt="import requirejs"></p>
<p>好的，无情报错，unexpected character，打开看了一下这个r.js，第一行显示是注释，但在webpack却报错了，看来是姿势不对</p>
<h1 id="搜索一下"><a href="#搜索一下" class="headerlink" title="搜索一下"></a>搜索一下</h1><p>那么在webpack中怎么用上AMD呢，搜了webpack 1的<a href="http://webpack.github.io/docs/api-in-modules.html#require-amd" target="_blank" rel="external">文档</a></p>
<p>哦？原来直接就能写？<br>试试，去掉import，直接require看看？async.js不变，app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>([<span class="string">'./async.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">asyncModule</span>) </span>&#123;</div><div class="line">  asyncModule.init();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>此时出现<br><img src="https://ooo.0o0.ooo/2017/01/22/5884a3812a1e9.png" alt="直接require并传函数进去"></p>
<p>发现我们的async被打包成了0.bundle.js</p>
<p>让我们打开浏览器看看<br><img src="https://ooo.0o0.ooo/2017/01/22/5884a3e560cd8.png" alt="浏览器成功运行1"></p>
<p>看Network和源文件，的确是异步</p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884a41a3dfa0.png" alt="Network 1"><br><img src="https://ooo.0o0.ooo/2017/01/22/5884a43180145.png" alt="Source 1"></p>
<h1 id="require-ensure"><a href="#require-ensure" class="headerlink" title="require.ensure"></a>require.ensure</h1><p>在2的文档中，并没有找到这个require的异步用法，倒是找到了migrating from v1的require.ensure，通过这个 找到了2的一个文档，疑似发现了webpack的AMD<a href="https://webpack.js.org/guides/code-splitting-require/#require-ensure-" target="_blank" rel="external">文档</a></p>
<p>webpack 2把这个api单独拿出来讲了一整页是有它的道理<br>一个是，webpack2把这个现在这样的引用 也看成引用一个chunk，只不过是异步引用<br>另一个是，没有了以前1的require AMD用法，可能将来会弃用？</p>
<p>从文档上也得知了，用这样的api，可以对chunkname进行指定，那我们来试试，app.js改成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">'./async.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> asyncModule = <span class="built_in">require</span>(<span class="string">'./async.js'</span>);</div><div class="line">  <span class="built_in">console</span>.log(asyncModule); <span class="comment">//等下再说</span></div><div class="line">  asyncModule.init();</div><div class="line">&#125;,<span class="string">'async'</span>);</div></pre></td></tr></table></figure>
<p>浏览器控制台还是正常输出了</p>
<p>但我们输出的文件还是0.bundle.js啊</p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884a7e1b5563.png" alt="使用require.ensure bash中 1"></p>
<p>眉头一紧，觉得事情有蹊跷</p>
<p>赶紧搜索一下2的文档，<a href="https://webpack.js.org/configuration/output/#output-filename" target="_blank" rel="external">找到filename</a></p>
<blockquote>
<p>Note this options does not affect output files for on-demand-loaded chunks. For these files the <strong>output.chunkFilename</strong> option is used. It also doesn’t affect files created by loaders. For these files see loader options.</p>
</blockquote>
<p>好的，去看<a href="https://webpack.js.org/configuration/output/#output-chunkfilename" target="_blank" rel="external">chunkFileName</a></p>
<p>原来如此，给config加上这么一条<code>chunkFilename: &#39;[name].js&#39;</code></p>
<p>现在再构建一次试试</p>
<p><img src="https://ooo.0o0.ooo/2017/01/22/5884aab1c137b.png" alt="使用require.ensure bash中 2"></p>
<h1 id="AMD模块的写法"><a href="#AMD模块的写法" class="headerlink" title="AMD模块的写法"></a>AMD模块的写法</h1><h2 id="es6的exports写法"><a href="#es6的exports写法" class="headerlink" title="es6的exports写法"></a>es6的exports写法</h2><p>让我们改变一下AMD模块的写法，之前我们是用标准的AMD define，那么ES6的exports写法会怎么样呢？</p>
<p>app.js </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>.ensure([<span class="string">'./async.src.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> asyncModule = <span class="built_in">require</span>(<span class="string">'./async.js'</span>);</div><div class="line">  <span class="built_in">console</span>.log(asyncModule);</div><div class="line">  asyncModule.init();</div><div class="line">&#125;,<span class="string">'async'</span>);</div></pre></td></tr></table></figure>
<p>async.src.js （刚才不当心取名async覆盖掉了原来的async.js）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  init() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm in async.js"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>浏览器报错<br><img src="https://ooo.0o0.ooo/2017/01/22/5884ada8243fb.png" alt="浏览器报错"></p>
<p>这个问题webpack没有给我们答案，不过我在 stackoverflow 的解释中看到了<a href="http://stackoverflow.com/questions/33704714/cant-require-default-export-value-in-babel-6-x" target="_blank" rel="external">答案</a></p>
<h2 id="自动检测的写法"><a href="#自动检测的写法" class="headerlink" title="自动检测的写法"></a>自动检测的写法</h2><p>有很多插件是这种写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">        define([<span class="string">'jquery'</span>], factory);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        factory(root[<span class="string">'jQuery'</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log($);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm in async.js !"</span>);</div><div class="line">    <span class="comment">//$.fn.anything = funciton()&#123;...&#125;</span></div><div class="line"></div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>ok，webpack也能帮你amd使用amd，cmd使用cmd，不过cmd也不会走下面那条factory的路哦</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用require.ensure进行AMD获取模块<br>对于AMD模块，最好使用AMD模块标准编写，因为还能在define时写好前置模块，让webpack自动帮我们处理打包</p>
<p><del>2的文档写的仍然非常有水准</del> 黑科技满满</p>
<h1 id="Why-AMD？"><a href="#Why-AMD？" class="headerlink" title="Why AMD？"></a>Why AMD？</h1><p>有同学说 用了webpack，就不需要用AMD了啊，确实，一个页面只有一个css，一个js，依赖由webpack处理了，script要炸也是一起炸，不存在一个模块加载了另一个模块没有加载的情况，也不存在AMD的应用场景了啊</p>
<p>确实，在处理模块之间的关系，webpack已经全部处理了，那么业务呢？</p>
<p>业务总有扭曲的时候，老大如果今天跟你说：“前端同学们，我们手机和电脑要做两套逻辑”，那么我们现在，除了让 nginx/后端语言 根据userAgent返回两套网页，有了新的选择</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么？webpack出2了？&lt;/p&gt;
&lt;p&gt;刚用了小半年的webpack就又要重头学过了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_thumb.png&quot; alt=&quot;摊手&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么试试吧？先试试改造一下blog？&lt;/p&gt;
&lt;p&gt;我擦？怎么用requirejs？&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 いやほい</title>
    <link href="https://blog.xingoxu.com/2017/01/2017-iyahoi/"/>
    <id>https://blog.xingoxu.com/2017/01/2017-iyahoi/</id>
    <published>2017-01-03T11:55:45.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>时间匆匆流逝，告别2016年，回看2015年，这一年也算是小有成就感</p>
<a id="more"></a>
<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>狂点技术点的一年</p>
<p>年初还在学习Android的我，抵不住朋友的 誘う ，决定学习一下JavaScript，把红书看完之后觉得找到了真爱语言，非常喜欢JavaScript的开放与灵活，于是放弃Android转前端</p>
<p>2月~3月决定对blog现有主题进行修改来上手对HTML/CSS/JS的学习</p>
<p>3月底~6月初 帮助学校完成简单的学生管理与成绩抓取</p>
<p>6月底 开始萌购实习</p>
<p>7月 协助完成<a href="http://rennigou.jp" target="_blank" rel="external">萌购任你购</a>前台页面</p>
<p>8月上 完成简单活动页面<a href="http://www.030buy.net/special/2016.8.9.hh/" target="_blank" rel="external">螺旋警戒线</a></p>
<p>8月下 完成<a href="http://works.xingoxu.com/buy-calc/" target="_blank" rel="external">日系剁手网站价格综合对比工具</a> <a href="http://weibo.com/1804320382/E51AYqS9e?type=like" target="_blank" rel="external">微博</a>获得9333转发，2446个赞，阅读量273.3万</p>
<p>9月 完成单页面活动页面<a href="http://www.030buy.net/special/2016.9.6.qwqxs/" target="_blank" rel="external">轻文轻小说</a></p>
<p>10月~12月 独立完成萌购App内所有内嵌网页</p>
<p>12月上 为<a href="https://user.030buy.net/login" target="_blank" rel="external">登录页</a>添加Canvas2D动画</p>
<p>从技术上，感觉自己是进步非常大，然而技术日新月异，长远的看，可能也只是从0到1的过程，并没有到100，所以还要接着加油！</p>
<h1 id="娱乐上"><a href="#娱乐上" class="headerlink" title="娱乐上"></a>娱乐上</h1><p>5月帝都玩 <a href="https://goo.gl/photos/QebSkK5bAivkywjL7" target="_blank" rel="external">Google Photos</a></p>
<p>6月陪肉排玩了一天</p>
<p>7月和监督一起去了独立游戏大会</p>
<p>12月和监督一起cp19 <a href="https://goo.gl/photos/hrwJoTuMnZd7cXgD7" target="_blank" rel="external">Google Photos</a></p>
<p><a href="http://bgm.tv/award/2016/xingo" target="_blank" rel="external">bangumi 2016</a></p>
<h1 id="新的一年"><a href="#新的一年" class="headerlink" title="新的一年"></a>新的一年</h1><p>顺利完成4月底的旅行</p>
<p>顺利毕业</p>
<p>至少考出N3，希望能考出N2</p>
<p>希望在技术上能有新的进步 rxJs，后端也好，可视化前端也好，游戏开发也好</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间匆匆流逝，告别2016年，回看2015年，这一年也算是小有成就感&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>改进多说</title>
    <link href="https://blog.xingoxu.com/2016/12/improve-duoshuo/"/>
    <id>https://blog.xingoxu.com/2016/12/improve-duoshuo/</id>
    <published>2016-12-27T07:34:24.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>增加用户尾巴</li>
<li>头像/表情转换成https</li>
</ul>
<a id="more"></a>
<h1 id="多说现有问题"><a href="#多说现有问题" class="headerlink" title="多说现有问题"></a>多说现有问题</h1><ol>
<li>稳定版不能切换表情</li>
<li>dev版不能收起表情框</li>
<li>新浪头像/QQ头像/新浪表情 国内已经支持https了，多说没有及时跟进</li>
</ol>
<p>另外多说记录了ua，在用户返回的数据里也给到了发评论的ua，想利用这个ua，展现我们睾贵的操作系统/浏览器/硬件等</p>
<p>相比不能切换表情，不能收起表情框稍微好那么一点，于是我决定将多说替换成开发版，而且对标准版增加UA以及https的教程网上也有很多，我也进行了参考，我自修改的<a href="https://github.com/xingoxu/improve-duoshuo/blob/b3985130b8fe565e5d47185edcc12c5efc4022ac/embed.js" target="_blank" rel="external">0.32版improve-duoshuo</a>就是使用标准版的多说进行了显示UA，只是没有替换https，如果你需要对标准版进行动手术，欢迎你参考我的这份，也欢迎你参考本篇blog的Reference</p>
<p><strong>以下内容使用多说dev版进行</strong></p>
<p>首先格式化多说，使其稍微好看一点</p>
<h1 id="添加https"><a href="#添加https" class="headerlink" title="添加https"></a>添加https</h1><h2 id="用户头像https"><a href="#用户头像https" class="headerlink" title="用户头像https"></a>用户头像https</h2><p>参考<a href="https://blog.nofile.cc/posts/2016/11/26/note-duoshuo-https.html" target="_blank" rel="external">多说插件支持站点 https</a>，在<a href="https://github.com/xingoxu/improve-duoshuo/commit/0c4a3456784e98f5a47ef0a46f5a5f4e3165f66a" target="_blank" rel="external">第2634行</a>替换a字符串</p>
<h2 id="替换表情https"><a href="#替换表情https" class="headerlink" title="替换表情https"></a>替换表情https</h2><p>点击表情后，Network中出现</p>
<p><img src="https://ooo.0o0.ooo/2016/12/27/586228e6c8f9e.png" alt="点击表情后，DevTools-Network"></p>
<p>格式化后发现</p>
<p><img src="https://ooo.0o0.ooo/2016/12/27/586229a1c0dae.png" alt="格式化jsonp"></p>
<p>证明前缀写死在js中，搜索一下<code>http://</code>，发现和新浪有关的只有<a href="https://github.com/xingoxu/improve-duoshuo/commit/0c4a3456784e98f5a47ef0a46f5a5f4e3165f66a" target="_blank" rel="external">第3333行</a>，修改成https后，问题解决</p>
<h1 id="增加ua"><a href="#增加ua" class="headerlink" title="增加ua"></a>增加ua</h1><p>dev版多说格式化后找到<code>ds-comment-header</code> <code>ds-user-name</code> 附近，发现全部改成了react风格的绑定</p>
<p>尝试旧逻辑不变，直接插入<code>{ userTail.showAdmin(author) }</code>和 <code>{ userTail.showUA(comment) }</code> </p>
<blockquote>
<p>userTail是之前0.32的全局helper</p>
</blockquote>
<p>发现逻辑正常，证明模板可以读取全局变量，但输出字符被escape了</p>
<p>那就只能老老实实的改成模板形式了</p>
<p>代码参见<a href="https://github.com/xingoxu/improve-duoshuo/commit/81106ba23d110f0e866e627799fc95d6bec6bc76" target="_blank" rel="external">旧2869行/新2847行</a>，没啥技术含量</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://blog.nofile.cc/posts/2016/11/26/note-duoshuo-https.html" target="_blank" rel="external">多说插件支持站点 https</a></p>
<p><a href="http://ssk.91txh.com/209" target="_blank" rel="external">多说回复后显示浏览器及操作系统信息（Useragent）</a></p>
</blockquote>
<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>多说这几个礼拜天天炸，时不时500，看来是要跑路啊，赶紧趁跑路前上一波https装个逼（雾</p>
<p>也欢迎对我的<a href="https://github.com/xingoxu/improve-duoshuo" target="_blank" rel="external">improve-duoshuo</a>提issue提pr</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;增加用户尾巴&lt;/li&gt;
&lt;li&gt;头像/表情转换成https&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Travis Ci使hexo自动生成并部署</title>
    <link href="https://blog.xingoxu.com/2016/12/use-travis-ci-your-blog/"/>
    <id>https://blog.xingoxu.com/2016/12/use-travis-ci-your-blog/</id>
    <published>2016-12-23T07:51:13.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>前两天偶然看见v2ex上有人说使用travis ci做hexo的持续集成，想起对哦，何必需要每次写完博客再进行手动的hexo clean &amp;&amp; hexo g &amp;&amp; hexo d呢</p>
<a id="more"></a>
<h1 id="为什么选择travis-ci"><a href="#为什么选择travis-ci" class="headerlink" title="为什么选择travis ci"></a>为什么选择travis ci</h1><p>因为他和github配合的很好，如果是github的开源项目，travis ci 永久免费</p>
<p>言下之意，如果你是使用github pages来托管你的博客的话，那travis ci简直就是最好的搭档</p>
<p><img src="https://ooo.0o0.ooo/2016/12/23/585cdeb7b5d87.png" alt="travis ci 开源项目永久免费"></p>
<h1 id="注册travis-ci"><a href="#注册travis-ci" class="headerlink" title="注册travis ci"></a>注册travis ci</h1><p>什么鬼，没有注册，travis-ci.org也只支持使用github登录</p>
<h2 id="开启travis-ci对项目的trigger"><a href="#开启travis-ci对项目的trigger" class="headerlink" title="开启travis ci对项目的trigger"></a>开启travis ci对项目的trigger</h2><p>没什么难的，进右上角头像里的accounts，按照出现的提示打开repo的开关就可以了</p>
<h1 id="撰写-travis-yml"><a href="#撰写-travis-yml" class="headerlink" title="撰写.travis.yml"></a>撰写.travis.yml</h1><p><a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/" target="_blank" rel="external">官方的nodejs的specific doc</a></p>
<p><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="external">Getting Started</a></p>
<p>如果你想再加hook，那么自己看官方文档去，这里对我自己的travis.yml稍作解释</p>
<blockquote>
<p>Hosted on <a href="https://github.com/xingoxu/xingoxu.github.io/blob/source/.travis.yml" target="_blank" rel="external">GitHub</a><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">node_js</span></div><div class="line"><span class="attr">node_js:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">'6'</span></div><div class="line"><span class="attr">before_install:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span></div><div class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></div><div class="line"><span class="attr">install:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span></div><div class="line"><span class="attr">after_script:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"xingoxu"</span></div><div class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"xingoxu@gmail.com"</span></div><div class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://$&#123;GH_REF&#125;</span> <span class="string">.deploy_git</span></div><div class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">.deploy_git</span></div><div class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">master</span></div><div class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">../</span></div><div class="line"><span class="bullet">  -</span> <span class="string">sed</span> <span class="bullet">-i''</span> <span class="string">"s~$&#123;GH_REF&#125;~$&#123;GH_TOKEN&#125;:x-oauth-basic@$&#123;GH_REF&#125;~"</span> <span class="string">_config.yml</span></div><div class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">d</span> <span class="string">&gt; log.txt 2&gt;&amp;1</span></div><div class="line"><span class="string">  - cat log.txt | sed "s~$&#123;GH_TOKEN&#125;~TOKEN~g"</span></div><div class="line"><span class="string"></span><span class="attr">branches:</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">source</span></div><div class="line"><span class="attr">env:</span></div><div class="line"><span class="attr">  global:</span></div><div class="line"><span class="attr">  - GH_REF:</span> <span class="string">github.com/xingoxu/xingoxu.github.io.git</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>前面的不用多说，需要关注的是部署的问题</p>
<h2 id="解决git-push的证书问题"><a href="#解决git-push的证书问题" class="headerlink" title="解决git push的证书问题"></a>解决git push的证书问题</h2><p>普通的push肯定是需要ssh的key的，或者https的话需要输入用户名和密码</p>
<p>然鹅，这里是持续化环境中，也就是虚拟机环境中，那根本没法询问用户啊</p>
<p>所以我们要给我们的部署施加一些小魔法</p>
<p>那就是，github的开发者api。使用github的api，使用personal access token与push链接的拼接以达到不登陆的效果</p>
<p>进入Settings -&gt; <a href="https://github.com/settings/tokens" target="_blank" rel="external">Personal access tokens</a></p>
<p>新建一个token，我给他命名为travis</p>
<p>然后勾上repo的相应权限</p>
<p><img src="https://ooo.0o0.ooo/2016/12/23/585cf0ac72c22.png" alt="写在push链接里的token"></p>
<p>然后，要注意的是，这样的密钥是不能写在.travis.yml中的，那坏人看到了，肯定能拿去干坏坏的事情</p>
<p>于是，可以放在travis ci的repo的settings的环境变量中</p>
<p><img src="https://ooo.0o0.ooo/2016/12/23/585cf1ce75576.png" alt="travis ci repo setting"></p>
<p>可以在文件中以<code>${变量名}</code>来引用</p>
<p>文件中的env global，和在这里设置的效果相同</p>
<p>所以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i<span class="string">''</span> <span class="string">"s~<span class="variable">$&#123;GH_REF&#125;</span>~<span class="variable">$&#123;GH_TOKEN&#125;</span>:x-oauth-basic@<span class="variable">$&#123;GH_REF&#125;</span>~"</span> _config.yml</div></pre></td></tr></table></figure></p>
<p>就会变成</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i<span class="string">''</span> <span class="string">"s~github.com/xingoxu/xingoxu.github.io.git~这里是密钥:x-oauth-basic@github.com/xingoxu/xingoxu.github.io.git~"</span></div></pre></td></tr></table></figure>
<p>以将config.yml中的deploy的地址改成这样的一个拼接地址，就不需要密钥啦</p>
<h2 id="解决master-commit树被清空"><a href="#解决master-commit树被清空" class="headerlink" title="解决master commit树被清空"></a>解决master commit树被清空</h2><p>如果仅解决push问题，那么你会发现，你部署分支的commit树被清空了</p>
<p>其实也不是什么很大的问题，但感觉看起来很丑，每次更新都像是一个新站点，没有历史更新记录，虽然这样以后你可以用source的commit来记录和回溯，但，总觉得怪怪的</p>
<p>使用下面的git命令来解决问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://<span class="variable">$&#123;GH_REF&#125;</span> .deploy_git</div><div class="line"><span class="built_in">cd</span> .deploy_git</div><div class="line">git checkout master</div><div class="line"><span class="built_in">cd</span> ../</div></pre></td></tr></table></figure></p>
<p>其实是很简单的git操作，就是需要注意一下</p>
<p>最后注意下主题文件夹如果是git文件夹的问题，不过这个应该不算是持续集成的问题</p>
<h2 id="解决hexo-d显示出私钥的问题"><a href="#解决hexo-d显示出私钥的问题" class="headerlink" title="解决hexo d显示出私钥的问题"></a>解决hexo d显示出私钥的问题</h2><p>travis ci的build log是可以被大家看到的，但是，在添加变量那边关掉后 就不会显示出来了，然而，这也仅限于使用<code>${}</code>来引用他的地方，git push时，会把此地址再显示一遍，这样你的私人密钥又会被显示了</p>
<p>于是乎我把hexo d的命令改成了这两行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo d &gt; log.txt 2&gt;&amp;1</div><div class="line">cat log.txt | sed <span class="string">"s~<span class="variable">$&#123;GH_TOKEN&#125;</span>~TOKEN~g"</span></div></pre></td></tr></table></figure>
<p>将hexo d的输出，包括标准与非标准，全部输入到log.txt，再cat出来的时候，使用sed对里边含有GH_TOKEN统统替换成TOKEN字符串</p>
<p>我对linux命令不怎么样熟悉，只能写成这样，如果您有更好的，不输出到log.txt的方法，可以在评论里指点一下</p>
<p>当然这样也有“缺点”，其实这个缺点在这里不成立，缺点就是把错误吞了，但不成立的原因是，after script的错误不错误不会影响到ci的过程</p>
<h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><p>写完文章后不再需要手动hexo clean &amp;&amp; hexo g &amp;&amp; hexo d了</p>
<h1 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h1><p>也算不上什么坏处吧，非script部分出错了不会有提示，当然放在script里也没啥关系</p>
<p>还有一个就是毕竟是云端操作，时间会比性能强劲的本地电脑长</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><blockquote>
<p><a href="https://xin053.github.io/2016/06/05/Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github/" target="_blank" rel="external">Travis CI 自动部署 Hexo 博客到 Github</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天偶然看见v2ex上有人说使用travis ci做hexo的持续集成，想起对哦，何必需要每次写完博客再进行手动的hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d呢&lt;/p&gt;
    
    </summary>
    
      <category term="maintaince" scheme="https://blog.xingoxu.com/categories/maintaince/"/>
    
      <category term="blog-setup" scheme="https://blog.xingoxu.com/categories/maintaince/blog-setup/"/>
    
    
  </entry>
  
  <entry>
    <title>新MacBook Pro连接U2715H并使用SwitchResX开启2K HiDPI</title>
    <link href="https://blog.xingoxu.com/2016/12/config-switchresx-and-2khidpi/"/>
    <id>https://blog.xingoxu.com/2016/12/config-switchresx-and-2khidpi/</id>
    <published>2016-12-18T13:57:37.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>  <strong>非Apple显示器字体模糊的终极方案</strong></p>
<p>  OSX的渲染和输出是分成两部分的，因此，我们可以利用这个机制在普通2K显示器上开启2K HiDPI</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>等了一年半，很早就想入macbook的坑了，然而呢厨师貌似忘记了mbp这条产品线了，当然了，英特尔也是有一部分责任的，因此一年前的这个时候，我买了微软的surface pro 4。</p>
<p>结果这玩意非常不好使啊，开发者这边各种吃屎啊，各种没有快捷键啊，起个bash非常烦啊（最快也要右键），终于一个月前入手了macbook，但入手之后的那段时间，非常非常忙，各种事情吧，所以直到最近才有时间去配置各种开发环境。</p>
<p>当然我也不是果粉，os x这个破系统也是💊，各种问题，也有很吃屎的地方（有空整理），所以，surface pro 4还不能扔掉233</p>
<h1 id="初次连接显示器"><a href="#初次连接显示器" class="headerlink" title="初次连接显示器"></a>初次连接显示器</h1><p>连上u2715h之后，我以为会展现一个比windows更好看更漂亮的，结果没想到，连上之后的字 是这样的：</p>
<p><img src="https://ooo.0o0.ooo/2016/12/18/58569bffcf83b.png" alt="未调整前"></p>
<p>好好的東京のイケメン男子就被这个长满粉刺的字体给毁了，尤其是这个g，非常难看，感觉糊在一起了，整个人都不好了，怎么会这样</p>
<h1 id="google一下？"><a href="#google一下？" class="headerlink" title="google一下？"></a>google一下？</h1><p>80%教你开启LCD字体平滑，但开启之后，并没有任何卵用</p>
<p>20%教你使用一个ruby脚本，将Television变成显示器，然而，还是没有任何卵用</p>
<p>上面那张图就是干完那两件事情之后的截图，还是那样，粉刺字体，像狗啃过</p>
<h1 id="试试hidpi？"><a href="#试试hidpi？" class="headerlink" title="试试hidpi？"></a>试试hidpi？</h1><p>在surface上装过虚拟机的黑果，当时用过一个软件叫RDM，为高分屏而准备的（也就是变成Retina的渲染效果），打开发现，有HiDPI的选项，选择1280x800，开启了hidpi，字体平滑了，结果因为显示器是16:9，选择的是16:10，旁边有两条黑边，想选择1280x720，结果点了无反应，唉，无奈 回到原来的分辨率</p>
<p>所以通过这个事情知道了，并不是显示器的问题，只是苹果在1:1的显示下已经放弃了治疗（同时在思考macbook air朋友的心理阴影）</p>
<h1 id="探索新可能"><a href="#探索新可能" class="headerlink" title="探索新可能"></a>探索新可能</h1><p>既然知道了hidpi是字体平滑的关键所在，那我就试试往这个方向搜索看看，由<a href="https://www.v2ex.com/t/277921" target="_blank" rel="external">这贴</a>和<a href="https://www.v2ex.com/t/307893" target="_blank" rel="external">这贴</a>和<a href="https://www.zhihu.com/question/27610849" target="_blank" rel="external">这贴</a>得知，osx的渲染和输出是两个步骤，得知了一款SwitchResX的软件，可以修改自定义分辨率，那就尝试一下</p>
<p>按照<a href="https://www.zhihu.com/question/35300978" target="_blank" rel="external">此贴</a>得票最高做法，安装SwitchResX，关闭SIP，重启，添加Custom Resolution，保存，重启</p>
<p>结果tm是 “Not active - invalid?” ，握日 折腾了一晚上，还是不行吗？心灰意冷之时，拉到下方看到 Sierra 做法，只是比上方多新建一个账户，感觉很奇怪，新建一个账户又能改变什么呢，抱着并不怎么会成功的心态尝试了一下，新建了账户，删除了原有的分辨率，填入了1080px2的分辨率 3840x2160，重启，进入新建的这个账户，尝试一下，居然成功了！</p>
<p>于是更大胆的思考了一下，既然是渲染与输出两部分，那也就是说，我可以使用5k分辨率HiDPI到2k，进行输出咯？于是我就尝试添加了一个5120x2880，重启，点击切换，哇！成了！字体变得顺滑了！</p>
<p><img src="https://ooo.0o0.ooo/2016/12/18/5856a391cadba.png" alt="成功在普通2K显示器开启2K HiDPI"></p>
<p><img src="https://ooo.0o0.ooo/2016/12/18/5856a5badb5b3.png" alt="对比"></p>
<h1 id="后遗症"><a href="#后遗症" class="headerlink" title="后遗症"></a>后遗症</h1><p>折腾了这么多的方法后，这些方法给我留下了后遗症，我并不能确定是SwitchResX这个软件留下的，还是因为这些个方法一起作用，导致了下面的后遗症</p>
<h2 id="合盖的时候外接显示器必须不能是hidpi"><a href="#合盖的时候外接显示器必须不能是hidpi" class="headerlink" title="合盖的时候外接显示器必须不能是hidpi"></a>合盖的时候外接显示器必须不能是hidpi</h2><p>正常外接显示器的情况下，合盖之后，外接显示器黑屏，再亮屏</p>
<p>如果合盖之前外接显示器是hidpi，合盖之后，外接显示器一定黑屏毫无显示，此时其实有信号，有鼠标，但就是黑屏，打开盖子又正常了。尝试之后发现是合盖的时候外接显示器不能为hidpi，这并不意味着你开盖的时候外接显示器不能是hidpi，也并不意味着你合盖之后外接显示器不能变成hidpi，只是如果你要合盖，那外接显示器请不要是hidpi</p>
<h2 id="开盖莫名其妙注销了"><a href="#开盖莫名其妙注销了" class="headerlink" title="开盖莫名其妙注销了"></a><strong>开盖莫名其妙注销了</strong></h2><p>真的是莫名其妙至极，插电插外显示器的情况下，开盖后要求输入密码，结果输入之后原有程序统统重新打开，黑人问号！</p>
<p>我尝试过把系统设置里取消勾掉再重新勾上，也尝试过把SwitchResX中的Sleep monitors after disabling给取消勾掉，更尝试过删除switchresx，并没有任何效果，所以这个后遗症需要十分注意！</p>
<p>当然我自己也找到了一个变通的方法，那就是，拔掉线，再开盖，就不会注销了，虽然麻烦了点，但我希望把我电脑搞出这个设定的人去吃屎</p>
<h1 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h1><p>这个问题应该不是由软件引起的，没错，这个问题就是 卡</p>
<p>思考一下，你的显示器是2k的，显示效果完全都由显卡渲染，mac输出5k分辨率，再缩到2k，虽然是新款的macbook pro，系统的动画也不卡，但用chrome的时候，就会很明显的发现一些css3的效果非常明显的掉帧，大概降到了20帧/s吧，safari好一点，但也就比chrome好大概10帧左右</p>
<p>这个问题说大不大，说小不小，不大的原因是，chrome这种调显卡渲染的程序不要开太多，对于我这样拿mbp写代码的人，基本没有什么影响，也就是开一个chrome，开一个编辑器，编辑器基本无视，也就是chrome，chrome也就是看看文档，和显示的效果而已</p>
<p>不小的原因是，我今天中午下了个720p的新番全屏来看，结果看到一半，开始掉帧卡了，一摸macbook，贼热（我的macbook放在床上，因为天气很冷，所以也不怎么在意温度，不看视频的时候摸了下只是温的），马上放到了桌子上，让他散热，很快macbook的温度就降下来了（也让我看到了这么牛逼的散热，这surface简直是落后几个世纪），愉快的继续看视频</p>
<p>所以结论是</p>
<ol>
<li>保持散热</li>
<li>别开太多浏览器</li>
</ol>
<p>当然如果你很在乎性能，不在乎这点渲染效果，那还是还原成2k普通分辨率吧，我之前的switchresx应该也不是完全卸载，完全卸载官方的做法是在顶部菜单里uninstall，不过官方说会删除所有switchresx做过的修改，那估计自定义的分辨率也会被删除</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  &lt;strong&gt;非Apple显示器字体模糊的终极方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  OSX的渲染和输出是分成两部分的，因此，我们可以利用这个机制在普通2K显示器上开启2K HiDPI&lt;/p&gt;
    
    </summary>
    
      <category term="maintaince" scheme="https://blog.xingoxu.com/categories/maintaince/"/>
    
      <category term="macbook" scheme="https://blog.xingoxu.com/categories/maintaince/macbook/"/>
    
    
  </entry>
  
  <entry>
    <title>最近遇到的小坑</title>
    <link href="https://blog.xingoxu.com/2016/10/2016-10-27/"/>
    <id>https://blog.xingoxu.com/2016/10/2016-10-27/</id>
    <published>2016-10-27T15:58:37.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Android Chrome 非常奇怪的字体偏移</li>
<li>IOS Safari -webkit-box 非常奇怪的字体偏移</li>
<li>linear-gradient 小笔记</li>
<li>晒晒最近的怪物猎人物语</li>
</ol>
<p>夹个怪猎物语的私货你们有意见吗【没有】</p>
<a id="more"></a>
<p>最近两天在做移动端的web开发，总体来说活不算多，页面很简单，全新的页面没有包袱，也有现成的ui库可以用，又是用vue进行开发，一个礼拜就切完了所有5个图，所以大多数时间都花在了适配后端数据以及细节的深究</p>
<h1 id="Android-非常奇怪的字体偏移"><a href="#Android-非常奇怪的字体偏移" class="headerlink" title="Android 非常奇怪的字体偏移"></a>Android 非常奇怪的字体偏移</h1><p>上图（左iphone 6/ios 10.0，右Nexus 6p/Android 7.0/Chrome 53.0）</p>
<p><img src="https://ooo.0o0.ooo/2016/10/25/580ef6ffa1f2c.png" alt="ios.png"> <img src="https://ooo.0o0.ooo/2016/10/25/580ef6ffc70f9.png" alt="android.png"></p>
<p>仔细对比</p>
<p><img src="https://ooo.0o0.ooo/2016/10/24/580dd472845a5.png" alt="ios-android对比1"></p>
<p>（上边标题没有划出来的地方貌似是 ios -webkit-box 的问题）</p>
<p>几乎所有用 px 单位设置过 line-height 的地方， android 都会不由自主的字会向上偏移大概 2px 左右，然而看看隔壁苹果，我去可真是正常的不能再正常了，全部按照我想要的来，真漂亮。</p>
<blockquote>
<p>生气，我大谷歌桌面端的浏览器这么fashion，手机吃瘪了？</p>
</blockquote>
<p>然而偶尔调试一下，发现设置成line-height: normal;便全部都正常了</p>
<p>上图（左右均 Android ，使用 Chrome inspect 调试）<br><img src="https://ooo.0o0.ooo/2016/10/24/580dd5fac5263.png" alt="对比2"><br><img src="https://ooo.0o0.ooo/2016/10/24/580dd62612125.png" alt="对比3"></p>
<p>完全没有道理啊，可以看到蓝色部分，字根本没有按照极限走，反而全部都贴顶，甚至还有超出蓝色部分的</p>
<blockquote>
<p>想不明白的我用同事的Nexus 6测试，结果发现，握日，他的手机居然是正常的</p>
</blockquote>
<p>仔细一看，发现是渲染字体的问题</p>
<p>我的Nexus 6p使用的是日文语言，渲染的时候用的是Noto Sans CJK JP Regular<br><img src="https://ooo.0o0.ooo/2016/10/25/580eb1207efbf.png" alt="normal.png"> </p>
<p>而他的是中文，渲染就用普通Noto Sans</p>
<blockquote>想了想，日文字体中的很多中文字体是不存在的，发现了不存在的中文字体可能去借用了其他字体库，日文的中文字体和普通的中文字体混在了一起，系统没有处理好出了问题，一个猜想，不一定对</blockquote><br><blockquote>当我把iphone 6改成日文再测试，发现，还是很棒的渲染效果 （辣鸡Google</blockquote>

<h1 id="IOS-webkit-box-奇怪的字体偏移"><a href="#IOS-webkit-box-奇怪的字体偏移" class="headerlink" title="IOS -webkit-box 奇怪的字体偏移"></a>IOS -webkit-box 奇怪的字体偏移</h1><p>用-webkit-box在做一个省略的两行标题的时候，碰到的一个非常奇怪的问题</p>
<p>上图（iphone 6/ios 10.0）</p>
<p><img src="https://ooo.0o0.ooo/2016/10/25/580f016a7a353.png" alt="iphone-webkit-box-1.png"></p>
<p>同样的一个组件，css应该完全一样，没有继承，也试过了line-height重置成normal，然而并没有什么卵用</p>
<p>试试去除-webkit-box，发现成了，猜测是-webkit-box在safari的某种条件下的特殊bug，Android正常</p>
<p>反正这块地方高度定死，不如直接脱离文档流，float: left，解决了</p>
<p><img src="https://ooo.0o0.ooo/2016/10/25/580f056e7979c.png" alt="ios-webkit-box-fixed.png"></p>
<p>虽然解决了，然而并不知道原因</p>
<p>不过box也已经废弃了，flex已经替代box（标准不一样）。后来搜了一下，做多行省略号倒是有很多tricks，当时也是纠结于这一个事情，实在是太傻了233，还是不要闷声写代码啊，多谷歌一下，说不定有其他套路233</p>
<h1 id="linear-gradient-小笔记"><a href="#linear-gradient-小笔记" class="headerlink" title="linear-gradient 小笔记"></a>linear-gradient 小笔记</h1><p>很久以前便知道了他的大名，然而 很久都没有使用过它，因为他 远看厉害，去看他的标准，却总是被搞得一头雾水<br>这两天做一个timeline的效果，以前不怎么用linear-gradient，一般用:before,:after进行拼接，然而这次觉得，巨麻烦，用上了linear-gradient<br>第一次用，做类似于–o- 这样的效果，稍微瞄了几眼标准，随手写</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>,<span class="selector-tag">black</span> 70%,<span class="selector-tag">white</span> 30%);</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2016/10/27/58121bf5dea34.png" alt="左70右30"></p>
<p>看了效果，不错</p>
<p>结果今天过去做- o  这样的效果，写下了<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>,<span class="selector-tag">black</span> 30%,<span class="selector-tag">white</span> 70%);</div></pre></td></tr></table></figure></p>
<p><img src="https://ooo.0o0.ooo/2016/10/27/58121c6942677.png" alt="左30右70，却变成了黑白渐变"><br>结果变成了黑白渐变</p>
<p>只好乖乖去仔细看文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> linear-gradient( </div><div class="line">  [ &lt;angle&gt; | to &lt;side-or-corner&gt; ,]? &lt;color-stop&gt; [, &lt;color-stop&gt;]+ )</div><div class="line">  \---------------------------------/ \----------------------------/</div><div class="line">    Definition of the gradient line        List of color stops  </div><div class="line"></div><div class="line">where &lt;side-or-corner&gt; = [left | right] || [top | bottom]</div><div class="line">  and &lt;color-stop&gt;     = &lt;color&gt; [ &lt;percentage&gt; | &lt;length&gt; ]?</div></pre></td></tr></table></figure></p>
<p>注意这个color-stop</p>
<blockquote>
<p><code>&lt;color-stop&gt;</code></p>
<p>This value is comprised of a <color> value, followed by an optional stop position (either a percentage or a <length> along the gradient’s axis).<br>Rendering of color stops in CSS gradients follows the same rules as color stops in SVG gradients.</length></color></p>
</blockquote>
<p>followed by an optional stop position ← 原来是停止位置。。。</p>
<p>所以应该这么写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>,<span class="selector-tag">black</span> 1%,<span class="selector-tag">white</span> 1%) <span class="selector-tag">no-repeat</span>;</div></pre></td></tr></table></figure></p>
<p>当然啦，要注意多个颜色（&gt;3）的情况下，两个颜色之间的距离如果大于0就是产生渐变（废话，这是人家本来的用处啊233）</p>
<p>所以如果要做无渐变的多个颜色的混合，应该这么写</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>,<span class="selector-tag">black</span> 1%,<span class="selector-tag">white</span> 1%,<span class="selector-tag">white</span> 3%,<span class="selector-id">#0c0119</span> 3%) <span class="selector-tag">no-repeat</span>;</div><div class="line">                                     \------/ \------/ \------/ \------/</div><div class="line">                                     颜色0结束 颜色1开始 颜色1结束 颜色2开始</div></pre></td></tr></table></figure>
<h1 id="晒游戏晒游戏233"><a href="#晒游戏晒游戏233" class="headerlink" title="晒游戏晒游戏233"></a>晒游戏晒游戏233</h1><p>最近在玩怪物猎人物语！超喜欢リュート，田村睦心这季配了好多男主，都超可爱！隔壁bs的约克也是！</p>
<p>感觉这个游戏就是卡普空简化战斗的怪物猎人啊，果然从小培养信仰吗（然而我并不吃这套哼</p>
<p>还差一些材料，现在在刷塔，刷完塔做出装备后就马上能全委托通关啦【并不打算再刷其他东西了】</p>
<p>晒个现在的银火龙套</p>
<p><img src="https://ooo.0o0.ooo/2016/10/27/58122335e1c72.jpg" alt="1.jpg"><br><img src="https://ooo.0o0.ooo/2016/10/27/5812238f779f8.jpg" alt="2.jpg"><br><img src="https://ooo.0o0.ooo/2016/10/27/581223dbbfa58.jpg" alt="3.jpg"><br><img src="https://ooo.0o0.ooo/2016/10/27/581223db71dc7.jpg" alt="4.jpg"><br><img src="https://ooo.0o0.ooo/2016/10/27/581223d5d6ea8.jpg" alt="5.jpg"></p>
<p>快说帅233</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Android Chrome 非常奇怪的字体偏移&lt;/li&gt;
&lt;li&gt;IOS Safari -webkit-box 非常奇怪的字体偏移&lt;/li&gt;
&lt;li&gt;linear-gradient 小笔记&lt;/li&gt;
&lt;li&gt;晒晒最近的怪物猎人物语&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;夹个怪猎物语的私货你们有意见吗【没有】&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>近况</title>
    <link href="https://blog.xingoxu.com/2016/09/2016-09-18/"/>
    <id>https://blog.xingoxu.com/2016/09/2016-09-18/</id>
    <published>2016-09-18T08:53:27.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>  即使是找到了实习，然而还是没能闲下来啊_(:з」∠)_</p>
<a id="more"></a>
<h2 id="浏览器的dom操作合并"><a href="#浏览器的dom操作合并" class="headerlink" title="浏览器的dom操作合并"></a>浏览器的dom操作合并</h2><p>　　刚学js的时候，明白js单线程时间线的模型，知道dom操作是缓慢的，因此明白要做动画最好应该在css中书写，修改dom只修改他的class，在不同的状态间切换，刚开始做一些动画成功了，然而做一个<code>input[type=text]</code>的错误闪烁框，写了animation，想在两个状态间交换，然而点了却没有反应，无论是用jQ写，还是用原生dom写，在控制台中根本没有变换过，当时很是疑问，最后我<del>异想天开</del>，试了一下setTimeout，把两个状态间的一个放入其中，结果就顺利的展现出想要的效果了。<br>　　当时没有仔细想过，后来当看到优化dom操作，减少重流重绘 博文的时候，猛然想起，浏览器对dom树的操作都是有优化的，同一个时间线中操作dom的操作会被合并成一个，到你下一次读取的时候才会产生变化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domElem; <span class="comment">//假设这是dom节点</span></div><div class="line"><span class="built_in">console</span>.log(domElem.className);</div><div class="line"><span class="comment">//&lt;- 'c'</span></div><div class="line">domElem.className = <span class="string">'a'</span>;</div><div class="line">domElem.className = <span class="string">'b'</span>;</div><div class="line">domElem.className = <span class="string">'a'</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">实际上浏览器只干了一件事情</span></div><div class="line"><span class="comment">domElem.className = 'a';</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(domElem.className);</div><div class="line"><span class="comment">//&lt;- 'a'</span></div><div class="line">domElem.className = <span class="string">'b'</span>;</div><div class="line"><span class="built_in">console</span>.log(domElem.className);</div><div class="line"><span class="comment">//&lt;-'b'</span></div><div class="line">domElem.className = <span class="string">'c'</span>;</div><div class="line"><span class="built_in">console</span>.log(domElem.className);</div><div class="line"><span class="comment">//&lt;-'c'</span></div></pre></td></tr></table></figure>
<h2 id="React的学习"><a href="#React的学习" class="headerlink" title="React的学习"></a>React的学习</h2><p>　　<del>工作量不够</del>趁着空闲的时间，学习了React【，感受是React其实是单向版的Vue，但React最重要的是它带给我们的Components的概念，React其他的东西非常小，不依赖组件，什么都没有，可以说是Virtual Dom版的Mustache，正因为其他都很小，他的Components就变成了他想传达给我们的理念<del>（大概是这样）</del>。看了getting started，手痒痒，写了一个一直很想做的一个东西，感觉用React来写这个真是太合适了</p>
<blockquote>
<p><a href="http://works.xingoxu.com/buy-calc/" target="_blank" rel="external">日系剁手网站价格综合对比工具</a></p>
</blockquote>
<p>其实我最想对比的是亚马逊直邮和代购之间的价格差，但是亚马逊这个计费规则实在是太奇葩了，而且，真结算的时候貌似并不是他的那个计费规则，所以只好暂时搁置</p>
<p>因为之前有MVVM框架的概念，在学习Vue和React就显得简单了很多，作为在实际使用的人来说，三种框架（Angularjs, React, Vue）我感觉写的最顺手的，最符合顺下来的思路的，还是Vue</p>
<h2 id="利用Performance追踪运营商广告"><a href="#利用Performance追踪运营商广告" class="headerlink" title="利用Performance追踪运营商广告"></a>利用Performance追踪运营商广告</h2><p>　　这几天，智障的上海电信又给我插入了丰富的广告内容，以前插的是什么jd啦，taobao啦，tmall啦，一号店啦，现在他们都上https了，丧心病狂的电信就开始插cnbeta，csdn，s1，卧槽，excuse me，你这样挑衅技术真的好吗？<br>  　好吧，你赢了，我承认当我看到和感受到被插了，我打开chrome面板只能看到当前的html的结构，network部分是空空的，只能从html结构里查插入的广告服务器地址。<br>      然而前几天在<a href="http://weibo.com/u/2313289447" target="_blank" rel="external">@EtherDream</a> 微博上看到的这条语句，就可以快速的筛出非本域的加载的资源了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">performance.getEntries().forEach(<span class="function"><span class="params">v</span>=&gt;</span> <span class="built_in">console</span>.log(v.name));</div></pre></td></tr></table></figure>
<p>　　然而我们狗日的上海电信是tcp劫持给你插包，把正常网页插在iframe中返回，真几把酷炫，希望电信原地爆炸，全家上天，并求大佬给点流量到他们的广告服务器上【。</p>
<h2 id="近期游戏与番"><a href="#近期游戏与番" class="headerlink" title="近期游戏与番"></a>近期游戏与番</h2><p>  　8月买了胧村正，卧槽，这游戏真好玩！三个礼拜本篇白金！现在正在努力DLC全奖杯中~</p>
<p>  <img src="https://ooo.0o0.ooo/2017/05/25/59264ac2020d6.png" alt="本篇与DLC1完美通关~"></p>
<p>  番的话，最近看了<a href="https://bgm.tv/subject/4014" target="_blank" rel="external">《异邦人 无皇刃谭》</a>，超好看，推荐！<br>  <img src="https://lain.bgm.tv/pic/cover/l/1c/df/4014_e6u34.jpg" alt="异邦人 无皇刃谭"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  即使是找到了实习，然而还是没能闲下来啊_(:з」∠)_&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>近况</title>
    <link href="https://blog.xingoxu.com/2016/06/2016-06-16/"/>
    <id>https://blog.xingoxu.com/2016/06/2016-06-16/</id>
    <published>2016-06-16T12:47:18.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>　　突然发现今天是个轴对称的日期233是个写博客的好日子（？），离上一次写博客有两个月，然而这两个月中真是经历了许多许多，不过接下来感觉可以稍微放轻松一点了</p>
<a id="more"></a>
<p>　　还是按时间顺序留一下近况吧：</p>
<h2 id="肉排的上海之行"><a href="#肉排的上海之行" class="headerlink" title="肉排的上海之行"></a>肉排的上海之行</h2><p>　　（听说）肉排来上海看演唱会，也很想不上课，于是主动请缨，开了张事假单陪他一起去疯了一天，爽死了。早上在家一起玩了一会看了集magi <del>（然后入了坑）</del> （虽然是为了阿里巴巴入了坑，结果却喜欢上了白龙233），中午一起去吃了面之后下午唱了一下午的歌呢，超高兴的是纯K居然有野良神的ed，而且画面有好多雪音呢 <del>（痴汉脸）</del><br>　　和肉排出去玩的照片可以在 <a href="https://goo.gl/photos/PqgWaayG9yxYDcPq6" target="_blank" rel="external">Google Photos</a> 上看见 <del>（其实大多都是雪音）</del> </p>
<h2 id="软考"><a href="#软考" class="headerlink" title="软考"></a>软考</h2><p>　　得知有软考这个东西的时候，是上个学期的快期末，当时还以为这考试有多了不得，也是在微博上看了许多认识了原来这个国家并不认识的一面吧，而且一看那个清一色的题集，教程什么的，都是一个出版社出的，还有再看里面的内容的话，跟这个时代的许多也是格格不入，大概就知道是怎么回事了。<br>　　不过里面考的技术的东西是非常简单基础的，也就不那么在意。把一整本书刷了之后也没有留下什么遗憾，什么买了书不做啊浪费钱这样的遗憾。不如说还是略微有点收获的，认识了函数指针呢233感觉是肯定能过，希望不要给自己乱插什么flag（</p>
<h2 id="百度面试"><a href="#百度面试" class="headerlink" title="百度面试"></a>百度面试</h2><p>　　3月中旬投的前端简历，3月底考完的在线笔试，考完笔试我以为基本也是没有可能了，因为简答题也没编出很多，选择题也不一定完全对（有PHP），最后算法题三道总共300%也只做出120%貌似，因此我觉得是木有可能了。结果5月中旬的时候打了个电话来直接来面试我了，完全没有准备，就这么战战兢兢的在阳台上说了和面试官聊了一个多小时，自己明白自己说的有很多还是有那么点问题的，聊的也是最近基本都没怎么用的css（一直在写angularjs业务逻辑），不过还是过了。<br>　　第二个礼拜又打了个电话过来面试，面完之后让我去一次张江百度面试一次，我投的是前端，上来问我你还会其他后端语言吗，我笑着说只会nodejs（心中黑人问号233），然后问了比较多的nodejs和express的使用吧，最近是一直在用，感觉自己回答的还挺好的，然而问到方法里填的参数，有些方法实在是记不住，因为我二次封装了他们，似乎是这些影响了一些吧，最后面试官问我有什么要问的，我问我怎么样，他说还有一些细节没有掌握好，我又问你觉得我能过吗，他笑着说　不好说，会尽快通知你的。<br>　　这尽快一等就是两个礼拜多，看到网页上状态是“筛选未通过”，于是我就去寻找其他家了。结果到了考试周，我都快入职其他家了，百度电话打了过来，问我有没有找到暑期实习，我说找到了，他问我入职了吗，我说还没有，他说　如果我给你offer，你能来吗，我惊讶了挺久的，脑子一片空白，回答了一句，能让我再想想不（智障的我），他说好吧我了解了，然后就挂了。<br>　　唉其实挂了电话后心里就有了谱，早就答应了人家，我觉得我也不太敢爽约别人，不过我当时说让我再想想实在是太智障了233。虽然我知道如果去百度肯定也是个备胎。<br>　　上张图，表示并木有撒谎（？：<br>　　<img src="https://ooo.0o0.ooo/2016/06/16/5762991891eee.png" alt="投递进度"></p>
<h2 id="帝都再临"><a href="#帝都再临" class="headerlink" title="帝都再临"></a>帝都再临</h2><p>　　3月的时候知道自己5月份又能去北京玩，别提有多高兴了，还是公费不用自己出钱，爽死了。虽然本来过去是为了竞赛，然而我本来就没想在算法和数据结构上要有多大的造诣，能过学校的考试拿个优就好，能稍微拿个一般的奖就好，因为并不想往ACM方向发展嘛，根本就没认真在这上面花过时间，所以只要被我逮到空，就是各种约啊！哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈好开心啊那几天！<br>　　27号下午到的北京，晚上就跟肉排和监督聚在一起啦！一起吃了饭！<br>　　28号下午考试，上午稍微练了手做了道算法题，晚上和微博另一个好友面了基。<br>　　29号上午去北大溜达了一下，拿了个纪念品，然后马上就赶往监督家闹腾了哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈！！！监督家真好玩！！！！！！！！好软的床！好多抱的！好多手办！好多漫画！好多海报！啊啊啊啊啊啊啊！うーらーやーまーしーいー！！！！！不我们还是先吃了中饭！然后在监督家各种玩啊！最后又一起吃了晚饭！すっごく楽しい！<br>　　30号睡了个懒觉，下午就回家啦<br>　　<br>　　唉每次和监督面基，总能聊好多好多，总觉得不管聊什么，监督总是很懂，真的就是很懂，很厉害很厉害，厉害的深不可测，崇拜啊~<br>　　第二次去北京的照片可以在 <a href="https://goo.gl/photos/QebSkK5bAivkywjL7" target="_blank" rel="external">Google Photos</a> 上可以看见。</p>
<h2 id="学生事务中心网上平台"><a href="#学生事务中心网上平台" class="headerlink" title="学生事务中心网上平台"></a>学生事务中心网上平台</h2><p>　　经过一个月搭建框架，一个月填充功能，一个月重读重写，终于基本能用啦，我还会加功能的，一是要完成到毕业，二是要做到毕设的程度，我会加油的！<br>　　在自己服务器上的就会关掉啦，如果有公共内容的话，我会把它的文档填充完整的！</p>
<h2 id="萌购实习"><a href="#萌购实习" class="headerlink" title="萌购实习"></a>萌购实习</h2><p>　　在等待百度面试的时候，投了简历给萌购，当晚就收到了笔试的题目，迅速完成后第二天便收到了面试的通知，考虑过后，还是决定去萌购。<br>　　感谢监督君和肉排桑在这半年来帮我出谋划策制定学习路线，真的非常感谢！
　　</p>
<h2 id="大四课程的免听"><a href="#大四课程的免听" class="headerlink" title="大四课程的免听"></a>大四课程的免听</h2><p>　　总绩点达到3.0，通过英语四级六级，且有单位实习的话，可以免听大四的课程，唉去找了一圈老师，扭扭捏捏不太肯告诉我，特别有个丑老师，又不好说话，一定要我按程序走，问到程序，他又说不清楚，跑到教务去，发现有这条，就心定了，唉为了忙活个短学期的免听和迟上课以及下学期的免听，真是操碎了心啊。</p>
<h2 id="接下来的计划"><a href="#接下来的计划" class="headerlink" title="接下来的计划"></a>接下来的计划</h2><p>　　近来的话会学习Vue.js，学习git的内容，实习的话我一定要在实习中学习到更多的经验！因此只是暂时的歇息，要为接下来的成为社会人做好扎实的过渡咯！<br>　　长期的话肯定是赚钱买买买咯，最近一堆很想买的东西，啊好心痒痒呢！<br>　　还有的话有空会把博客再调整一下，感觉不管是js部分还是css部分都写的不怎么好。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　突然发现今天是个轴对称的日期233是个写博客的好日子（？），离上一次写博客有两个月，然而这两个月中真是经历了许多许多，不过接下来感觉可以稍微放轻松一点了&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>近期学习小结</title>
    <link href="https://blog.xingoxu.com/2016/04/2016-04-19/"/>
    <id>https://blog.xingoxu.com/2016/04/2016-04-19/</id>
    <published>2016-04-18T16:48:42.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>又是好久没有写博客啦，最近一段时间学习了Angularjs，Bootstrap，Promise，nodejs，express，其实本来就想学这些，正巧学校老师拜托我帮忙搞个迷你的项目来帮助他们管理一些事务，技术又不限，又考虑到这些事务其实是很简单的最基础的增删改查，就搭着这个顺风车学习了这些，还能实践</p>
<a id="more"></a>
<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><p>nodejs的学习我是跟着《了不起的Node.js》这本书来入门的，其中书后面的connect，express等部分可能有点过时了（api之类的），但是其实这些框架学习了前面的知识后，稍微看一下这本书讲的理念，完全可以去看文档便能灵活掌握使用方法了，就nodejs这一块我感觉坑其实不多不深。<br>另外我觉得这本书不错<del>（我不是书商啊大家不要随便轻信我的话）</del>，是因为他让我对现在web后端的一些新的概念，新的理念，一些实际应用中的是如何实现有了一点概念，比如session（之前我还读season233），mongodb这些的，总算是感觉自己离这些看起来很高大上的东西其实只有几行代码的距离。在nodejs中，如果需要处理一些复杂的逻辑，回调函数用的多的话，那么Promise就有了用武之地，包括维护代码整洁，代码分层（？）这个样子是非常有帮助的，而且nodejs稳步实现ES6嘛所以Promise是原生对象（奇怪WebStorm为什么没有提示）。</p>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p><a href="http://liubin.org/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a></p>
<h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><p>整个Angularjs的学习过程我觉得是非常陡峭的，学的时候我并没有买书看，我先去看的视频，视频其实没有多少，然而反复看了三个礼拜（老忘），上手写了几段，而且视频看到最后说是声明式ui，恍然大悟（？），才算是感觉好像入门了。。。。<del>（唉我说google的文档啊你能不能好好写啊，找着看真累）</del></p>
<h2 id="双向绑定的’-scope’"><a href="#双向绑定的’-scope’" class="headerlink" title="双向绑定的’$scope’"></a>双向绑定的’$scope’</h2><p>用Angularjs来实现的前端的web应用（？），在其ngApp下的作用域的每一个DOM节点上都会有$scope，$scope是双向绑定的灵魂所在。这个\$scope是以原型链的方式来继承上一级节点的\$scope的，因此在实现逻辑复用的时候，是不应该将函数啊什么的全部都往scope上来附，感觉就相当于全局变量污染（？），可读性和扩展性会比较差。</p>
<h2 id="controller与directive"><a href="#controller与directive" class="headerlink" title="controller与directive"></a>controller与directive</h2><p>刚学习Angularjs的时候我对controller和directive很懊恼，玛德，怎么前面这个东西是个controller，后面这个东西怎么也有controller，后面这个东西还能依赖啊，那么多config项，什么compile啊什么link啊，然后当写了一点，体验了一些过后，controller这个东西，就是mvc中的controller，你可以在controller范围内的节点上声明ngClick调用controller，那就是mvc的结构咯，v-&gt;c,c-&gt;m,m-&gt;v，而directive这个东西其实是angularjs最后偏向的mvw的what，因为他什么都可以当，我现在比较喜欢拿directive当presenter，当我一直在考虑如何将代码的逻辑理顺，把代码结构分清，而且各司其职，我发现原来我更倾向于mvp这个模式。</p>
<blockquote>
<p>按需加载 AngularJS 的 Controller<br><a href="http://www.cnblogs.com/zhrj000/p/3383898.html" target="_blank" rel="external">http://www.cnblogs.com/zhrj000/p/3383898.html</a><br><a href="http://beginor.github.io/2014/12/20/angularjs-controller-load-on-demand.html" target="_blank" rel="external">http://beginor.github.io/2014/12/20/angularjs-controller-load-on-demand.html</a></p>
<p>angularjs controller之间如何通信<br><a href="https://segmentfault.com/a/1190000000639592" target="_blank" rel="external">https://segmentfault.com/a/1190000000639592</a></p>
<p>angularjs手动触发dirty check<br><a href="https://segmentfault.com/q/1010000003796580" target="_blank" rel="external">https://segmentfault.com/q/1010000003796580</a></p>
</blockquote>
<h2 id="angularjs的一些坑（？）"><a href="#angularjs的一些坑（？）" class="headerlink" title="angularjs的一些坑（？）"></a>angularjs的一些坑（？）</h2><p>在angularjs 中 jquery on是bind？我似乎在link中用jquery绑定的on并没有live的效果，最后还是用了directive来绑定link，感觉是不是小题大做了？</p>
<blockquote>
<p>还发现了 input[type=text] 设置display:block的时候，发现其并没有像个div占满一整行，反而像inline-block，觉得比较奇怪。。。</p>
</blockquote>
<h1 id="近期做的nodejs-express-AngularJS-BootStrap-Promise的实现"><a href="#近期做的nodejs-express-AngularJS-BootStrap-Promise的实现" class="headerlink" title="近期做的nodejs+express+AngularJS+BootStrap+Promise的实现"></a>近期做的nodejs+express+AngularJS+BootStrap+Promise的实现</h1><p>一个简单的实现，用户的增删改查，用户权限对模块的自由控制<br><code>https://dev点xingoxu.cn</code><br>用户名与密码都是12345678901，增加的用户学号是11位的，错误没有做太多的处理只是在主界面上禁用了所有交互并显示错误（没有花特别特别多的时间在这个上面）</p>
<p>不要玩坏了噻，总感觉自己做出来的东西特别容易塌。。。。。</p>
<p>前端：<br><a href="https://github.com/xingoxu/dashboard-with-angularjs" target="_blank" rel="external">https://github.com/xingoxu/dashboard-with-angularjs</a></p>
<p>后端：<br><a href="https://github.com/xingoxu/crud-with-nodejs-mysql" target="_blank" rel="external">https://github.com/xingoxu/crud-with-nodejs-mysql</a></p>
<p>改进点有很多了吧：</p>
<h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p>因为没有实际对它的处理经验，我感觉有两种处理方式，1是上https，随便怎么传（x），2是把密码用客户端一个会变的东西来进行加密，然后把这个会变的东西固定处理后发送到服务器，再进行解密，感觉2似乎还是有点不可靠？</p>
<h2 id="合并http请求"><a href="#合并http请求" class="headerlink" title="合并http请求"></a>合并http请求</h2><p>现在的add,delete,update操作完成后还需要再refresh一次，其实可以把他们都合并到一个http请求里</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>界面可以完善的更好</p>
<h2 id="后端还有很多逻辑可以复用"><a href="#后端还有很多逻辑可以复用" class="headerlink" title="后端还有很多逻辑可以复用"></a>后端还有很多逻辑可以复用</h2><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>angularjs到此放一放，包括provider，包括实现原理等，可能需要等很以后有需要才能继续拾起来啦，接下来会细看一下html5+css3，js忍者秘籍和ES6</p>
<p>感谢肉排桑和监督桑在这一年来学习上的督促与教导，感谢他们我才能系统学习了这么多知识！真是非常感谢！</p>
<p>另外一些其他的存档：</p>
<blockquote>
<p><a href="http://www.yuzhewo.com/2015/11/03/%E4%BF%AE%E6%94%B9gitlab%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89nginx%E6%9C%8D%E5%8A%A1%E5%8F%8A502%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/" target="_blank" rel="external">gitlab vhost配置 502</a><br><a href="https://www.fancycoding.com/centos7-mail-server-with-dovecot-postfix-ssl/" target="_blank" rel="external">centos7配置邮件服务器</a><br><a href="http://blog.sina.com.cn/s/blog_93a6a0c30101fshd.html" target="_blank" rel="external">z-index不生效</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是好久没有写博客啦，最近一段时间学习了Angularjs，Bootstrap，Promise，nodejs，express，其实本来就想学这些，正巧学校老师拜托我帮忙搞个迷你的项目来帮助他们管理一些事务，技术又不限，又考虑到这些事务其实是很简单的最基础的增删改查，就搭着这个顺风车学习了这些，还能实践&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>gulp.js初体验 - 自动编译/刷新/Release</title>
    <link href="https://blog.xingoxu.com/2016/03/gulpjs-1/"/>
    <id>https://blog.xingoxu.com/2016/03/gulpjs-1/</id>
    <published>2016-03-25T12:34:33.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro:"></a>Intro:</h1><ol>
<li>gulp能做什么</li>
<li>利用gulp编译stylus，本地预览，自动刷新，自动提升版本并Release</li>
<li>心得</li>
</ol>
<a id="more"></a>
<h1 id="gulp能做什么"><a href="#gulp能做什么" class="headerlink" title="gulp能做什么"></a>gulp能做什么</h1><p>半个月前朋友提醒我说可以开始学习构建了，学习grunt，gulp，当时我对这些一无所知，对于构建的理解，只是处于minify html/css/js，uglify js等，想想这些不都已经有了很多现成的工具吗，然后又去grunt,gulp主页逛了，完全看不懂主页上的getting started要干什么</p>
<p>然而最近在尝试使用bootstrap与学习angularjs，想要试试自己搞一个小型的CRUD的app，我发现，我需要一个工具，能帮我处理这些框架中的sass，less，需要一个工具能帮我自动从framework文件夹编译成result并放入dist，而且我也根本无法脱离stylus的语法了（汗），单独编译以及手动整理真是太花费人的时间了，完全不能专注于写代码</p>
<p>于是诞生了以下需求：</p>
<ul>
<li>编译sass,less,stylus</li>
<li>帮我把编译好的内容自动替换掉旧的dist</li>
<li>灵活的http-server，最好能在我修改源文件的时候自动编译好自动刷新</li>
</ul>
<p>打开搜索引擎，发现gulp似乎在一阵之前很火热啊，于是稍稍学习了一下gulp</p>
<p>gulp的官方入门，我感觉不是很好，因为他只告诉了你如何安装插件233（误，好吧，看了一圈又一圈的博客，终于理解了gulp想让我们用它干什么了</p>
<ol>
<li>编写构建任务</li>
<li>执行构建任务</li>
</ol>
<p>其实核心就这两样</p>
<p>然后在任务中我们能干什么呢，gulp给我们了一些api</p>
<ol>
<li>从文档中读取流（.src）</li>
<li>将流传到某个插件中让他读取（.pipe）</li>
<li>最后把插件中输出的流我们把它变回文件（gulp.pipe(gulp.dest())）</li>
</ol>
<p>怪不得叫流式自动化构建，玛德，就不能说正常人的语言吗！</p>
<p>gulp还给我们提供了一个watch api，用来在任务中挂起并监视文件变动</p>
<h1 id="利用gulp的任务"><a href="#利用gulp的任务" class="headerlink" title="利用gulp的任务"></a>利用gulp的任务</h1><blockquote>
<p><a href="https://www.npmjs.com/package/gulp-stylus" target="_blank" rel="external">gulp-stylus</a><br><a href="https://www.npmjs.com/package/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemap</a><br><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/server-with-livereload-and-css-injection.md" target="_blank" rel="external">gulp-browserSync</a><br><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/automate-release-workflow.md" target="_blank" rel="external">利用gulp提升版本号并自动发布</a><br><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/split-tasks-across-multiple-files.md" target="_blank" rel="external">将任务分不同文件存放 - 我最喜欢的特性</a></p>
</blockquote>
<p>哈哈以上都是官方的api文档，其实了解了gulp怎么运作之后，编写属于自己的任务还是挺简单的</p>
<p><del>抄写</del>仿照官方的编译stylus与sourcemap，写了个自己的compile任务</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">	stylus = <span class="built_in">require</span>(<span class="string">'gulp-stylus'</span>),</div><div class="line">	sourceMaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>),</div><div class="line">	runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'compile-stylus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//non-minified用作查看是否是编译问题而不是compress问题</span></div><div class="line">	gulp</div><div class="line">		.src(<span class="string">'src/stylus/*.styl'</span>)</div><div class="line">		.pipe(stylus(&#123;</div><div class="line">			<span class="string">'include css'</span>: <span class="literal">true</span></div><div class="line">		&#125;))</div><div class="line">		.pipe(gulp.dest(<span class="string">'src/debuggable/css/'</span>));</div><div class="line">	<span class="keyword">var</span> taskReturn =</div><div class="line">		gulp</div><div class="line">		.src(<span class="string">'src/stylus/*.styl'</span>)</div><div class="line">		.pipe(sourceMaps.init())</div><div class="line">		.pipe(stylus(&#123;</div><div class="line">			<span class="string">'include css'</span>: <span class="literal">true</span>,</div><div class="line">			<span class="string">'compress'</span>: <span class="literal">true</span></div><div class="line">		&#125;))</div><div class="line">		.pipe(sourceMaps.write(<span class="string">'../../debug-maps'</span>))<span class="comment">//cwd:src/dist/css/</span></div><div class="line">		.pipe(gulp.dest(<span class="string">'src/dist/css/'</span>));</div><div class="line">	<span class="keyword">return</span> taskReturn;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'compile'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">	runSequence(</div><div class="line">		<span class="string">'compile-stylus'</span>,</div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (error) &#123;</div><div class="line">				<span class="built_in">console</span>.log(error.message);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">console</span>.log(<span class="string">'compile finished!'</span>);</div><div class="line">			&#125;</div><div class="line">			callback(error);</div><div class="line">		&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然而我发现其实生成了sourcemap，chrome的调试工具就很棒的帮我们自动对应到了stylus上了，所以好像输出一下那个编译后文件并没有什么卵用了。。。</p>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p><strong>注意！</strong><br>gulp有个坑就是在相对路径时，不要加’./‘，以及注意调用路径，第一次写任务的时候被坑惨了，还以为是自己哪里写错了or getting started过时了</p>
<p>gulp的运行时路径就是你cmd/gitbash的路径，不是相对于js的路径（<strong>使用require-dir的小伙伴们要注意了</strong>）</p>
<p>还有个坑就是自动更新版本并提交的那个中文文档有问题，插件被换掉了，所以按照中文文档写的任务是跑不起来会提示错（好像是fs.end不是一个function）</p>
<p>用了gulp之后，感觉真是爽爆了233</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro:&quot;&gt;&lt;/a&gt;Intro:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;gulp能做什么&lt;/li&gt;
&lt;li&gt;利用gulp编译stylus，本地预览，自动刷新，自动提升版本并Release&lt;/li&gt;
&lt;li&gt;心得&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>近期学习小结</title>
    <link href="https://blog.xingoxu.com/2016/03/2016-03-20/"/>
    <id>https://blog.xingoxu.com/2016/03/2016-03-20/</id>
    <published>2016-03-20T15:36:32.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro:"></a>Intro:</h1><ol>
<li>重拾HTML/CSS</li>
<li>jQuery与Firefox的一个坑</li>
<li>心得</li>
</ol>
<a id="more"></a>
<p>很久没有写博客啦，其实最近一直都在学习，寒假刚开始的时候在学习Android，学着学着感觉Google给我们埋的坑实在是又多又深，关键是，你根本不知道这些是什么情况，原理是什么，去查，只会告诉你，换兼容包兄弟，太坑了吧！而且我一直认为，既然你推广MD设计，那么至少得给开发一些造好的轮子，好多实现都必须自己去实现，MD设计的一些Button什么的，仅仅是更换个背景颜色，就得自己重头造轮子，是不是要把人往悬崖上推？？？于是，在意识到这坑有点吓人的情况下，又对Android其实并没有特别大的兴趣的情况下，立刻停止了学习。</p>
<h1 id="重拾HTML-CSS"><a href="#重拾HTML-CSS" class="headerlink" title="重拾HTML/CSS"></a>重拾HTML/CSS</h1><p>大一的时候跟着Codecademy在线课程学习过基础HTML/CSS，其实当时是为了玩bilibili的空间的自定义CSS，话说回来，入门真的非常简单。然而这次重新审视自己，想想自己到底喜欢什么，看完了JavaScript的入门后，决定转前端。</p>
<p>重新学习HTML/CSS，更多的是在一些理论上的查缺补漏：</p>
<ul>
<li>文档流模型（块级元素，行级元素），定位的层模型（relative/absolute/fixed）</li>
<li>css属性的继承性，css的选择器（+ 空格 &gt; : []），以及属性权重（继承权重0.1 标签权重1 class权重10 id权重100 可叠加），相同情况下后覆盖前，!important大于一切（也有说权重为1000的）</li>
<li>三个单位：em px %各自所对应衡量的标准</li>
</ul>
<p>其实学习HTML/CSS入门很快，但我经常发处女病（这边怎么会多1px？/这边怎么看上去不像是10px？/这边间距是不是多了4px？），但幸好不是坏事，了解了许多许多之前并没有了解的事情。</p>
<p>好多都有了现有的文章啦，也就不再多阐述了。</p>
<blockquote>
<p><a href="http://www.zhangxinxu.com/wordpress/?p=2427" target="_blank" rel="external">transform的matrix</a><br><a href="http://www.w3school.com.cn/css/css_margin_collapsing.asp" target="_blank" rel="external">CSS 外边距合并</a><br><a href="http://www.hicss.net/do-not-tell-me-you-understand-margin/" target="_blank" rel="external">垂直外边距合并问题</a><br><a href="http://www.cnblogs.com/myqianlan/p/4255346.html" target="_blank" rel="external">a img 高度多4px</a><br><a href="http://blog.csdn.net/chen_zw/article/details/8741365" target="_blank" rel="external">position属性</a><br><a href="http://zihua.li/2013/12/keep-height-relevant-to-width-using-css/" target="_blank" rel="external">宽高成比例</a> 《- 没想到padding的height百分比是以width作参照的<br><a href="http://www.zhangxinxu.com/wordpress/?p=2357" target="_blank" rel="external">inline-block 4px（间距）问题</a><br><a href="http://www.w3chtml.com/css3/properties/user-interface/box-sizing.html" target="_blank" rel="external">box-sizing</a><br><a href="http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html" target="_blank" rel="external">clearfix</a><br><a href="http://www.cnblogs.com/KeithWang/p/3139517.html" target="_blank" rel="external">block inline inline-block</a><br><a href="https://segmentfault.com/a/1190000003038583" target="_blank" rel="external">line-height</a><br><a href="http://www.zhangxinxu.com/wordpress/?p=4925" target="_blank" rel="external">vertical align line-height</a><br>内联元素对齐与基线对齐，块级元素与边框对齐<br>行高是整行的高度，并不是盒子的高度，你可以理解为盒子浮在行上，行拉开了，但是盒子还是那么高</p>
</blockquote>
<h1 id="jQuery与Firefox的一个坑"><a href="#jQuery与Firefox的一个坑" class="headerlink" title="jQuery与Firefox的一个坑"></a>jQuery与Firefox的一个坑</h1><p>在写本博客主题的时候，碰到了一个玛德超奇怪的一个问题，为某个按钮添加了mousedown与mouseup事件，然后再给这个按钮添加了click事件，结果呢，IE都反应正常，firefox居然不发生click事件！嘿你敢信？虽然我的mouseup事件是停止了冒泡，然而关click事件奶子事情？事件冒泡不应该只是对于文档层次而言的吗？不是很懂你们Firefox，暂时先把click事件变成mouseup事件</p>
<p>其他关于js的一些小坑~</p>
<blockquote>
<p><a href="http://www.cnblogs.com/feng524822/p/4084037.html" target="_blank" rel="external">label触发两次click事件</a><br><a href="http://www.w3school.com.cn/tags/tag_label.asp" target="_blank" rel="external">label与input关系</a><br><a href="http://stackoverflow.com/questions/24639335/javascript-console-log-causes-error-synchronous-xmlhttprequest-on-the-main-thr" target="_blank" rel="external">sync script</a><br>jQuery现在已经官方支持了live-query，方法名是on off<br><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">js的模块化加载框架 - requireJS</a><br>ejs貌似对switch语句不识别</p>
</blockquote>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>前端这边入门门槛很低，得益于完备的各大网站的html/css的完整的文档（翻译自w3school，以及各大前辈的博客），以及jquery的文档做的也很棒，学习起来真的特别方便！话说在学习jQuery的时候感觉把css所有的选择器重新复习了233</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro:&quot;&gt;&lt;/a&gt;Intro:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;重拾HTML/CSS&lt;/li&gt;
&lt;li&gt;jQuery与Firefox的一个坑&lt;/li&gt;
&lt;li&gt;心得&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>GSC-535 风来的西林</title>
    <link href="https://blog.xingoxu.com/2016/03/GSC-535/"/>
    <id>https://blog.xingoxu.com/2016/03/GSC-535/</id>
    <published>2016-03-20T15:11:17.000Z</published>
    <updated>2017-08-26T07:58:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>终于买了又帅又可爱的西林困，嘻嘻，稍微照几张~<br><a id="more"></a><br><img src="https://ooo.0o0.ooo/2016/03/20/56eec136546c8.jpg" alt="GSC535-1 (6).jpg"><br><img src="https://ooo.0o0.ooo/2016/03/20/56eec131cdbca.jpg" alt="GSC535-1 (1).jpg"><br><img src="https://ooo.0o0.ooo/2016/03/20/56eec133a750e.jpg" alt="GSC535-1 (2).jpg"><br><img src="https://ooo.0o0.ooo/2016/03/20/56eec1362a8e1.jpg" alt="GSC535-1 (3).jpg"><br><img src="https://ooo.0o0.ooo/2016/03/20/56eec1337b00c.jpg" alt="GSC535-1 (4).jpg"><br><img src="https://ooo.0o0.ooo/2016/03/20/56eec13a81f2b.jpg" alt="GSC535-1 (5).jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于买了又帅又可爱的西林困，嘻嘻，稍微照几张~&lt;br&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo主题Paper White</title>
    <link href="https://blog.xingoxu.com/2016/03/hexo-theme-paper-white/"/>
    <id>https://blog.xingoxu.com/2016/03/hexo-theme-paper-white/</id>
    <published>2016-03-11T19:44:46.000Z</published>
    <updated>2017-08-26T07:58:02.950Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎有爱自取啦</p>
<p>最后更新： 2016.01.09</p>
<a id="more"></a>
<h1 id="Paper-White-A-Hexo-Theme"><a href="#Paper-White-A-Hexo-Theme" class="headerlink" title="Paper White - A Hexo Theme"></a>Paper White - A Hexo Theme</h1><p>================</p>
<p>ReadMe 请<a href="https://github.com/xingoxu/hexo-theme-paper-white" target="_blank" rel="external">移步</a></p>
<p>此处将集中显示各种奇奇怪怪 demo</p>
<h1 id="embed-code"><a href="#embed-code" class="headerlink" title="embed code"></a>embed code</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//载入分享模块</span></div><div class="line"><span class="keyword">if</span> (paperWhiteConfig.canShare) &#123;</div><div class="line">	<span class="built_in">require</span>([<span class="string">'/js/share.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">share</span>) </span>&#123;</div><div class="line">		share.init();</div><div class="line">		share.shareLinks.push(&#123;</div><div class="line">			id: <span class="string">'download'</span>, <span class="comment">//暂时都能下载，如有不能下载的需求移动至init进行克隆数组等操作</span></div><div class="line">			label: <span class="string">'下载'</span>,</div><div class="line">			url:<span class="string">'&#123;&#123;raw_image_url&#125;&#125;'</span>, </div><div class="line">			download: <span class="literal">true</span> </div><div class="line">		&#125;);</div><div class="line">		photoSwipeOption.shareEl = <span class="literal">true</span>;</div><div class="line">		photoSwipeOption.shareButtons = share.shareLinks;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="embed-gist"><a href="#embed-gist" class="headerlink" title="embed gist"></a>embed gist</h1><script src="https://gist.github.com/xingoxu/9ef5d5a262f796daad94.js"></script>

<h1 id="jsfiddle"><a href="#jsfiddle" class="headerlink" title="jsfiddle"></a>jsfiddle</h1><script async src="//jsfiddle.net/pq98medb/1/embed/js,html,css,result/dark/"></script>

<h1 id="table"><a href="#table" class="headerlink" title="table"></a>table</h1><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎有爱自取啦&lt;/p&gt;
&lt;p&gt;最后更新： 2016.01.09&lt;/p&gt;
    
    </summary>
    
      <category term="works" scheme="https://blog.xingoxu.com/categories/works/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/works/Front-End-Dev/"/>
    
    
  </entry>
  
</feed>
