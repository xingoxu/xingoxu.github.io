<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xingo&#39;s private plot</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xingoxu.com/"/>
  <updated>2018-06-17T11:49:12.890Z</updated>
  <id>https://blog.xingoxu.com/</id>
  
  <author>
    <name>xingo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>バディ・コンプレックス 聖地巡礼</title>
    <link href="https://blog.xingoxu.com/ja/2018/05/buddy-complex-seichijunrei/"/>
    <id>https://blog.xingoxu.com/ja/2018/05/buddy-complex-seichijunrei/</id>
    <published>2018-05-13T10:13:03.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>GWなか好きな絵描きさんが渡瀬青葉を描きましたので、一年前見放したバディ・コンプレックスをまた見ていて、意外といい作品と思っています。<br>全部見ました昨日聖地巡礼しました。</p><p>1話ラストで未来へ行ってしまって以来、完結編の最後に至っても2014年の東京、千葉の景色が再度登場することはありませんでした<br>なお本作品の舞台には高校や閑静な住宅街を含みます。もし訪問される際は現地の方へ最大限配慮して行動されるようお願いしたく思います。</p><h1 id="千葉県習志野市"><a href="#千葉県習志野市" class="headerlink" title="千葉県習志野市"></a>千葉県習志野市</h1><p></p><p></p><p></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg" alt="通学路のカーブ"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg" alt="通学路のカーブ"></div><br><div class="clear-float img-caption">通学路のカーブ</div><p>津田沼サイクルなくなった、リニューアル中みたいです、グーグルマップによる去年まだあるらしい、残念</p><p><br></p><p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><a id="more"></a></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8v74bns8j21hc0u0u15.jpg" alt="滑り台の公園"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8v73nt2sj21kw121e84.jpg" alt="滑り台の公園"></div><br><div class="clear-float img-caption">滑り台の公園</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8v78ihtxj21hc0u07wp.jpg" alt="小高商店信号機"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8v71em5qj21kw108npd.jpg" alt="小高商店信号機"></div><br><div class="clear-float img-caption">小高商店信号機</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8v7hhi18j21hc0u0npl.jpg" alt="小高商店"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v7dvctbj21j515de82.jpg" alt="小高商店"></div><br><div class="clear-float img-caption">小高商店</div><p>小高商店もなくなった、調べたら2013年の時駅周辺改造のため、本当残念</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8vcvggz6j21hc0u04qx.jpg" alt="津田沼駅5番線"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8vcrsid5j21kw0xb7wk.jpg" alt="津田沼駅5番線"></div><br><div class="clear-float img-caption">津田沼駅5番線</div><p>07:12の三鷹行き電車と07:15の中野行き非津田沼駅始発電車はない、仕様もアニメのものではない。</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅4番線"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8vcpd680j21kw13fqv5.jpg" alt="津田沼駅4番線"></div><br><div class="clear-float img-caption">津田沼駅4番線</div><p>作中では5番線になっているが実際描かれていたのは4番線からの景色。でも左端に写っているユザワヤの広告は５番線の広告。</p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅5番線の広告"></div><div class="pull-left img"><img src="https://i.loli.net/2018/05/13/5af80ae8da67b.jpg" alt="津田沼駅5番線の広告"></div><br><div class="clear-float img-caption">津田沼駅5番線の広告</div><h1 id="東京都笹塚"><a href="#東京都笹塚" class="headerlink" title="東京都笹塚"></a>東京都笹塚</h1><p>これからは主人公追われた景色。大体一緒です。</p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fr8ypiy343j21hc0u0e89.jpg" alt="富士見丘高校前"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8yphw1vrj21kw17pqv9.jpg" alt="富士見丘高校前"></div><br><div class="clear-float img-caption">富士見丘高校前</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fr8ypuq4ilj21hc0u0e89.jpg" alt="電気屋前"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fr8yprlci2j21kw0zz4qs.jpg" alt="電気屋前"></div><br><div class="clear-float img-caption">電気屋前</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8yq0qqmdj21hc0u0x6w.jpg" alt="松屋前"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fr8ypt0zd0j21kw15cu0z.jpg" alt="松屋前"></div><br><div class="clear-float img-caption">松屋前</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8ypym75nj21hc0u0e89.jpg" alt="みのん歯科医院前"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8ypwxe3bj21kw0vxb2b.jpg" alt="みのん歯科医院前"></div><br><div class="clear-float img-caption">みのん歯科医院前</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yr9psyzj21hc0u0kjt.jpg" alt="お茶屋前"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yr9386bj21kw1634qr.jpg" alt="お茶屋前"></div><br><div class="clear-float img-caption">お茶屋前</div><br>TDKからalbaになっちゃった、多分も大昔の事<br><br><br><br><br><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yrjdl0nj21hc0u0he1.jpg" alt="栄湯の脇"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yres6h2j21kw0x2u11.jpg" alt="栄湯の脇"></div><br><div class="clear-float img-caption">栄湯の脇</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yrmijcgj21hc0u0e89.jpg" alt="国道20号 不動産屋前"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yrlen9dj21kw16ohdw.jpg" alt="国道20号 不動産屋前"></div><br><div class="clear-float img-caption">国道20号 不動産屋前</div><p><br></p><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7ely1fr9vhnh93jj21hc0u0u14.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7ely1fr9vid1c5ij23402454qw.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yrwh3lyj21hc0u01l5.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yrqaqqvj21kw0rz7wk.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fr9vjz73pqj21hc0u07wp.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fr9vkbwy2aj22c00sab2a.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yu1hgwgj21hc0u0b2h.jpg" alt="笹塚交差点 DARUMA前"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8ytgi9rnj21kw16ox6s.jpg" alt="笹塚交差点 DARUMA前"></div><br><div class="clear-float img-caption">笹塚交差点 DARUMA前</div><p>だるま 2013 年閉店ですが、他の施設ちゃんと合った。</p><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yucd8gxj21hc0u04qx.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yu0t3xrj21kw151hdv.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yuhfjedj21hc0u0e89.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yu5ays1j21kw13mnpe.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yuhws22j21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yucijqmj21kw1umnph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yv6tavtj21hc0u0qvc.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yvag3s3j21kw14bx6t.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>難易度高くなった</p><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yvs0kenj21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yv3hcd2j21kw23v7wj.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>高架の電車はどこでも取れないから、ちょっと遠いから取ったけど、良くないね</p><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yvuux58j21hc0u0u14.jpg" alt="高架の鉄道"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yv73ha9j20o20eudri.jpg" alt="高架の鉄道"></div><br><div class="clear-float img-caption">高架の鉄道</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yvypfwhj21hc0u0he1.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yvw28eoj21kw1kunph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>ヴァリアンサーを生産している中◯屋工場です</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8ywfvp14j21hc0u0b2h.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8ywiii13j21kw12tu10.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>大山交差点周りは今までと違ってあまり実際の景色に忠実ではない様子。看板や窓の形など、細かいパーツが一致する程度でしかありませんでした。</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8ywsysjhj21hc0u0e89.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8ywsbvdpj21kw16oqv7.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yxg5vp6j21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yx5v5kej21kw16ob2b.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yxhyrcfj21hc0u04qx.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yyb62p3j20n00eagv4.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yz7327tj21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yz1jo80j21kw16o1l0.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p>ここまで全部終わりました、ちなみに主人公の家は本当に存在している、個人宅なので掲載はしません、興味があれば訪れる時絶対迷惑かけないように</p><p>最後までご閲覧いただきありがとうございました。</p><p>Google Maps：<a href="https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing" target="_blank" rel="noopener">https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GWなか好きな絵描きさんが渡瀬青葉を描きましたので、一年前見放したバディ・コンプレックスをまた見ていて、意外といい作品と思っています。&lt;br&gt;全部見ました昨日聖地巡礼しました。&lt;/p&gt;
&lt;p&gt;1話ラストで未来へ行ってしまって以来、完結編の最後に至っても2014年の東京、千葉の景色が再度登場することはありませんでした&lt;br&gt;なお本作品の舞台には高校や閑静な住宅街を含みます。もし訪問される際は現地の方へ最大限配慮して行動されるようお願いしたく思います。&lt;/p&gt;
&lt;h1 id=&quot;千葉県習志野市&quot;&gt;&lt;a href=&quot;#千葉県習志野市&quot; class=&quot;headerlink&quot; title=&quot;千葉県習志野市&quot;&gt;&lt;/a&gt;千葉県習志野市&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;通学路のカーブ&lt;/div&gt;

&lt;p&gt;津田沼サイクルなくなった、リニューアル中みたいです、グーグルマップによる去年まだあるらしい、残念&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>心灵盟友 Buddy Complex 圣地巡礼</title>
    <link href="https://blog.xingoxu.com//2018/05/buddy-complex-seichijunrei/"/>
    <id>https://blog.xingoxu.com//2018/05/buddy-complex-seichijunrei/</id>
    <published>2018-05-13T10:13:03.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>黄金周里因为自己喜欢的画手太太画了渡瀬青葉，所以又把一年前抛弃的 Buddy Complex 捡起来看了一下，意外的发现还挺好看的。全部看完后昨天圣地巡礼了一下。</p><p>这个动画也只有第一集是现实中出现的场景，后边都是未来在天上在船上并没有日本的景色。</p><h1 id="千葉県習志野市"><a href="#千葉県習志野市" class="headerlink" title="千葉県習志野市"></a>千葉県習志野市</h1><p></p><p></p><p></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg" alt="通学路のカーブ"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg" alt="通学路のカーブ"></div><br><div class="clear-float img-caption">通学路のカーブ</div><p>非常遗憾自行车店好像在翻新，去年在Google Map上貌似还有的样子</p><p><br></p><p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><a id="more"></a></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8v74bns8j21hc0u0u15.jpg" alt="滑り台の公園"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8v73nt2sj21kw121e84.jpg" alt="滑り台の公園"></div><br><div class="clear-float img-caption">滑り台の公園</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8v78ihtxj21hc0u07wp.jpg" alt="小高商店信号機"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8v71em5qj21kw108npd.jpg" alt="小高商店信号機"></div><br><div class="clear-float img-caption">小高商店信号機</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8v7hhi18j21hc0u0npl.jpg" alt="小高商店"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v7dvctbj21j515de82.jpg" alt="小高商店"></div><br><div class="clear-float img-caption">小高商店</div><p>小高商店 2013 年的时候好像因为车站周围改造所以关店了，好遗憾</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8vcvggz6j21hc0u04qx.jpg" alt="津田沼駅5番線"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8vcrsid5j21kw0xb7wk.jpg" alt="津田沼駅5番線"></div><br><div class="clear-float img-caption">津田沼駅5番線</div><p>非常遗憾的是，没有07:12往三鷹的电车与7:15的中野非始发电车，样式也并不是动画的样子。</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅4番線"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8vcpd680j21kw13fqv5.jpg" alt="津田沼駅4番線"></div><br><div class="clear-float img-caption">津田沼駅4番線</div><p>刚才还在5番線的但事实上这里的镜头确实是4番線向5番線方向的景色，但是左边的广告牌却是5番線的广告牌</p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅5番線の広告"></div><div class="pull-left img"><img src="https://i.loli.net/2018/05/13/5af80ae8da67b.jpg" alt="津田沼駅5番線の広告"></div><br><div class="clear-float img-caption">津田沼駅5番線の広告</div><h1 id="東京都笹塚"><a href="#東京都笹塚" class="headerlink" title="東京都笹塚"></a>東京都笹塚</h1><p>接下来就是男主被追的场景，这里大多都一模一样。</p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fr8ypiy343j21hc0u0e89.jpg" alt="富士見丘高校前"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8yphw1vrj21kw17pqv9.jpg" alt="富士見丘高校前"></div><br><div class="clear-float img-caption">富士見丘高校前</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fr8ypuq4ilj21hc0u0e89.jpg" alt="電気屋前"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fr8yprlci2j21kw0zz4qs.jpg" alt="電気屋前"></div><br><div class="clear-float img-caption">電気屋前</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8yq0qqmdj21hc0u0x6w.jpg" alt="松屋前"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fr8ypt0zd0j21kw15cu0z.jpg" alt="松屋前"></div><br><div class="clear-float img-caption">松屋前</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8ypym75nj21hc0u0e89.jpg" alt="みのん歯科医院前"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fr8ypwxe3bj21kw0vxb2b.jpg" alt="みのん歯科医院前"></div><br><div class="clear-float img-caption">みのん歯科医院前</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yr9psyzj21hc0u0kjt.jpg" alt="お茶屋前"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yr9386bj21kw1634qr.jpg" alt="お茶屋前"></div><br><div class="clear-float img-caption">お茶屋前</div><br>TDK 变成了 alba，也是很久以前就变了的貌似<br><br><br><br><br><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yrjdl0nj21hc0u0he1.jpg" alt="栄湯の脇"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yres6h2j21kw0x2u11.jpg" alt="栄湯の脇"></div><br><div class="clear-float img-caption">栄湯の脇</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yrmijcgj21hc0u0e89.jpg" alt="国道20号 不動産屋前"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yrlen9dj21kw16ohdw.jpg" alt="国道20号 不動産屋前"></div><br><div class="clear-float img-caption">国道20号 不動産屋前</div><p><br></p><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7ely1fr9vhnh93jj21hc0u0u14.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7ely1fr9vid1c5ij23402454qw.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yrwh3lyj21hc0u01l5.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yrqaqqvj21kw0rz7wk.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fr9vjz73pqj21hc0u07wp.jpg" alt="国道20号"></div><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fr9vkbwy2aj22c00sab2a.jpg" alt="国道20号"></div><br><div class="clear-float img-caption">国道20号</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yu1hgwgj21hc0u0b2h.jpg" alt="笹塚交差点 DARUMA前"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8ytgi9rnj21kw16ox6s.jpg" alt="笹塚交差点 DARUMA前"></div><br><div class="clear-float img-caption">笹塚交差点 DARUMA前</div><p>だるま 2013 年关店的，不过其他的地方都能对上</p><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yucd8gxj21hc0u04qx.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yu0t3xrj21kw151hdv.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yuhfjedj21hc0u0e89.jpg" alt="笹塚交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yu5ays1j21kw13mnpe.jpg" alt="笹塚交差点"></div><br><div class="clear-float img-caption">笹塚交差点</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yuhws22j21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yucijqmj21kw1umnph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yv6tavtj21hc0u0qvc.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yvag3s3j21kw14bx6t.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>从这里开始难度就变得好高，大家凑合看吧</p><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yvs0kenj21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yv3hcd2j21kw23v7wj.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>高架电车没有地方能拍，就跑的稍微远了一点，不过还是没能拍好</p><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yvuux58j21hc0u0u14.jpg" alt="高架の鉄道"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yv73ha9j20o20eudri.jpg" alt="高架の鉄道"></div><br><div class="clear-float img-caption">高架の鉄道</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7ely1fr8yvypfwhj21hc0u0he1.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yvw28eoj21kw1kunph.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>正在制作 valiancer 的中◯屋工厂</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8ywfvp14j21hc0u0b2h.jpg" alt="高架下"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8ywiii13j21kw12tu10.jpg" alt="高架下"></div><br><div class="clear-float img-caption">高架下</div><p>大山交差点这里并没有完全按照现实世界的布景画</p><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8ywsysjhj21hc0u0e89.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8ywsbvdpj21kw16oqv7.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yxg5vp6j21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yx5v5kej21kw16ob2b.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yxhyrcfj21hc0u04qx.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7ely1fr8yyb62p3j20n00eagv4.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8yz7327tj21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7ely1fr8yz1jo80j21kw16o1l0.jpg" alt="大山交差点"></div><br><div class="clear-float img-caption">大山交差点</div><p>到这里就全部结束啦，顺带一提主人公的家是真实存在的，不过因为私人房屋的原因不会上传到SNS等地方，如果有兴趣的访问的话也请一定不要给对方带来困扰。</p><p>Google Maps：<a href="https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing" target="_blank" rel="noopener">https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黄金周里因为自己喜欢的画手太太画了渡瀬青葉，所以又把一年前抛弃的 Buddy Complex 捡起来看了一下，意外的发现还挺好看的。全部看完后昨天圣地巡礼了一下。&lt;/p&gt;
&lt;p&gt;这个动画也只有第一集是现实中出现的场景，后边都是未来在天上在船上并没有日本的景色。&lt;/p&gt;
&lt;h1 id=&quot;千葉県習志野市&quot;&gt;&lt;a href=&quot;#千葉県習志野市&quot; class=&quot;headerlink&quot; title=&quot;千葉県習志野市&quot;&gt;&lt;/a&gt;千葉県習志野市&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;通学路のカーブ&lt;/div&gt;

&lt;p&gt;非常遗憾自行车店好像在翻新，去年在Google Map上貌似还有的样子&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>ツイッターの Account Activity API 使ってみた</title>
    <link href="https://blog.xingoxu.com/ja/2018/04/twitter-account-activity-api/"/>
    <id>https://blog.xingoxu.com/ja/2018/04/twitter-account-activity-api/</id>
    <published>2018-04-30T12:59:43.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>前日ツイッターのAccount Activity APIを使ってみました、この API が一つ webhook 登録が可能です、アカウントのリアル活動（ツィート、通知、設定）を受信します。</p><p>以下のものが含まれます：</p><ul><li>ツィート</li><li>at 通知</li><li>リプライ</li><li>リツイート</li><li>引用リツイート</li><li>いいね</li><li>ダイレクトメッセージとその受信</li><li>フォロー</li><li>ブロック</li><li>ミュート</li></ul><p>使う時実際起こった問題を書きました。</p><a id="more"></a><h1 id="アプリを作ります"><a href="#アプリを作ります" class="headerlink" title="アプリを作ります"></a>アプリを作ります</h1><p>まずここで <a href="https://apps.twitter.com/" target="_blank" rel="noopener">https://apps.twitter.com/</a> チュートリアルに従ってアプリを作って、アプリの key と secret を取得します。</p><h1 id="Account-Activity-API-を申請します"><a href="#Account-Activity-API-を申請します" class="headerlink" title="Account Activity API を申請します"></a>Account Activity API を申請します</h1><p><a href="https://developer.twitter.com/en/apply" target="_blank" rel="noopener">https://developer.twitter.com/en/apply</a><br>ここで権限を申請します，app ID の添付を忘れずに（app ID について：<a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview</a> ）</p><p>申請成功したらメールが来ます<br><img src="https://i.loli.net/2018/04/30/5ae7000843f53.png" alt="申請成功のメール"></p><h1 id="webhook-URL-を登録"><a href="#webhook-URL-を登録" class="headerlink" title="webhook URL を登録"></a>webhook URL を登録</h1><h2 id="CRC-テスト"><a href="#CRC-テスト" class="headerlink" title="CRC テスト"></a>CRC テスト</h2><p>webhook は CRC テストを合格しなければ登録できない、具体的な要望はここに書いている -&gt;<br><a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks</a></p><p>自分もNode.jsのdemoを書きました、一応参考になれば：<br><a href="https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23</a></p><h2 id="postman-でリクエストを送って-webhook-URL-を登録します"><a href="#postman-でリクエストを送って-webhook-URL-を登録します" class="headerlink" title="postman でリクエストを送って webhook URL を登録します"></a>postman でリクエストを送って webhook URL を登録します</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json?url=$&#123;あなたのwebhook URL&#125;</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p><code>Bearer TOKEN</code> は<code>https://api.twitter.com/oauth2/token</code>で取得できます。</p><p>注意</p><ul><li>webhook URL は https と 443 ポートのみサポートします（<a href="https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36" target="_blank" rel="noopener">https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36</a> ）</li></ul><h2 id="postman-でリクエストを送って-subscription-に-webhook-を登録します"><a href="#postman-でリクエストを送って-subscription-に-webhook-を登録します" class="headerlink" title="postman でリクエストを送って subscription に webhook を登録します"></a>postman でリクエストを送って subscription に webhook を登録します</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>さっきの webhook の id を取って</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: OAuth 1.0</span><br><span class="line"></span><br><span class="line">Body:</span><br><span class="line">webhook_id: さっきの webhook の id</span><br></pre></td></tr></table></figure><p>注意すべきところ：ここAuthorization は OAuth 1.0（user id 認識ため）</p><p>リスポンス内容はない、<code>HTTP Code: 204 No Conent</code></p><p>登録したらここに見えます<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET：https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions/list.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure></p><p>これを受けれます<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"env-beta"</span>,</span><br><span class="line">    <span class="attr">"application_id"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">    <span class="attr">"subscriptions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"user_id"</span>: <span class="string">"12345678"</span>  // &lt;- 自分のuser_id</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>好きなツイートをいいねすると</p><p>ツイッターサーバーから webhook object 受けれます。</p><p>最後、Account Activity API使ってる自家用ツイッターBotです、参考になればぜひ<br><a href="https://github.com/xingoxu/twitter-like-downloader" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader</a></p><p>最後まで閲覧いただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前日ツイッターのAccount Activity APIを使ってみました、この API が一つ webhook 登録が可能です、アカウントのリアル活動（ツィート、通知、設定）を受信します。&lt;/p&gt;
&lt;p&gt;以下のものが含まれます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ツィート&lt;/li&gt;
&lt;li&gt;at 通知&lt;/li&gt;
&lt;li&gt;リプライ&lt;/li&gt;
&lt;li&gt;リツイート&lt;/li&gt;
&lt;li&gt;引用リツイート&lt;/li&gt;
&lt;li&gt;いいね&lt;/li&gt;
&lt;li&gt;ダイレクトメッセージとその受信&lt;/li&gt;
&lt;li&gt;フォロー&lt;/li&gt;
&lt;li&gt;ブロック&lt;/li&gt;
&lt;li&gt;ミュート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使う時実際起こった問題を書きました。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>推特 Account Activity API 使用体验</title>
    <link href="https://blog.xingoxu.com//2018/04/twitter-account-activity-api/"/>
    <id>https://blog.xingoxu.com//2018/04/twitter-account-activity-api/</id>
    <published>2018-04-30T12:59:43.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<p>前几天使用了一下推特的 Account Activity API，这个 API 支持注册一个 webhook，用于接受授权账户的实时活动（推特文，事件，设置）。</p><p>包括以下内容：</p><ul><li>推特内容</li><li>at 提醒</li><li>回复</li><li>转发</li><li>带评论转发</li><li>点赞</li><li>发出的私信和接收到的私信</li><li>关注</li><li>拉黑</li><li>屏蔽</li><li>阅读回执</li></ul><p>在试用的过程中，碰到了一些问题，做一个整理。</p><a id="more"></a><h1 id="应用中心创建应用"><a href="#应用中心创建应用" class="headerlink" title="应用中心创建应用"></a>应用中心创建应用</h1><p>首先需要到 <a href="https://apps.twitter.com/" target="_blank" rel="noopener">https://apps.twitter.com/</a> 在这里按提示创建应用，获得应用的 key 与 Secret。</p><h1 id="申请-Account-Activity-API-试用权限"><a href="#申请-Account-Activity-API-试用权限" class="headerlink" title="申请 Account Activity API 试用权限"></a>申请 Account Activity API 试用权限</h1><p><a href="https://developer.twitter.com/en/apply" target="_blank" rel="noopener">https://developer.twitter.com/en/apply</a><br>到这里按照提示申请API权限，并附上 app ID（app ID相关解释：<a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview</a> ）</p><p>申请完成后会收到邮件<br><img src="https://i.loli.net/2018/04/30/5ae7000843f53.png" alt="申请成功回执"></p><h1 id="注册-webhook"><a href="#注册-webhook" class="headerlink" title="注册 webhook"></a>注册 webhook</h1><h2 id="CRC-测试"><a href="#CRC-测试" class="headerlink" title="CRC 测试"></a>CRC 测试</h2><p>webhook 的地址要求通过 CRC 测试，详细要求可以查看<br><a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks</a></p><p>写了一个自己的demo，关于CRC测试的代码：<br><a href="https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23</a></p><h2 id="通过-postman-发送请求注册-webhook"><a href="#通过-postman-发送请求注册-webhook" class="headerlink" title="通过 postman 发送请求注册 webhook"></a>通过 postman 发送请求注册 webhook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json?url=$&#123;你的webhook地址&#125;</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p><code>Bearer TOKEN</code> 可以通过<code>https://api.twitter.com/oauth2/token</code>接口获得</p><p>注意</p><ul><li>webhook 地址 需要https，且只能使用443端口（<a href="https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36" target="_blank" rel="noopener">https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36</a> ）</li></ul><h2 id="通过-postman-发送请求在-subscription-里注册-webhook"><a href="#通过-postman-发送请求在-subscription-里注册-webhook" class="headerlink" title="通过 postman 发送请求在 subscription 里注册 webhook"></a>通过 postman 发送请求在 subscription 里注册 webhook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/webhooks.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>获取到刚才的 webhook id</p><p>之后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: OAuth 1.0</span><br><span class="line"></span><br><span class="line">Body:</span><br><span class="line">webhook_id: 刚才的 webhook id</span><br></pre></td></tr></table></figure></p><p>注意这里需要用OAuth 1.0（用于识别注册的user id）</p><p>注册完成后不会有任何返回，<code>HTTP Code: 204 No Conent</code></p><p>注册完成后可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET：https://api.twitter.com/1.1/account_activity/all/env-beta/subscriptions/list.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>可以收到<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"env-beta"</span>,</span><br><span class="line">    <span class="attr">"application_id"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">    <span class="attr">"subscriptions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"user_id"</span>: <span class="string">"12345678"</span>  // &lt;- 自己的user_id</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>随便对一条推特点赞</p><p>可以收到推特来的 webhook object。</p><p>自己用这个写了一个推特的bot，可以作为参考。<br><a href="https://github.com/xingoxu/twitter-like-downloader" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天使用了一下推特的 Account Activity API，这个 API 支持注册一个 webhook，用于接受授权账户的实时活动（推特文，事件，设置）。&lt;/p&gt;
&lt;p&gt;包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推特内容&lt;/li&gt;
&lt;li&gt;at 提醒&lt;/li&gt;
&lt;li&gt;回复&lt;/li&gt;
&lt;li&gt;转发&lt;/li&gt;
&lt;li&gt;带评论转发&lt;/li&gt;
&lt;li&gt;点赞&lt;/li&gt;
&lt;li&gt;发出的私信和接收到的私信&lt;/li&gt;
&lt;li&gt;关注&lt;/li&gt;
&lt;li&gt;拉黑&lt;/li&gt;
&lt;li&gt;屏蔽&lt;/li&gt;
&lt;li&gt;阅读回执&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在试用的过程中，碰到了一些问题，做一个整理。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>再见 2017</title>
    <link href="https://blog.xingoxu.com//2018/04/2017-end/"/>
    <id>https://blog.xingoxu.com//2018/04/2017-end/</id>
    <published>2018-04-10T04:15:49.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>忙完这一阵，回过神来已经是2018年的4月了，才有空开始补一些之前没有干完的事情，比如写这一篇2017年的总结。</p><p>仔细想想还真的是2017年经历了太多太多事情，很多事情甚至自己都没有想到，感觉自己非常幸运，总的来说是一个很开心的一年。<br><a id="more"></a></p><p>按时间顺序</p><h1 id="跳槽到饿了妈"><a href="#跳槽到饿了妈" class="headerlink" title="跳槽到饿了妈"></a>跳槽到饿了妈</h1><p>怎么说，年前就有想跳槽的想法，其实在萌购干着也挺好的，老板也承诺说毕业之后的工资多少多少，价格嘛也不低（跟饿了妈差不多），但始终是有那么点没有安全感，终于逮到个机会去了饿了妈面试，虽然自己是个菜鸡，不过面试的问题还算是都自我感觉挺好的答了下来，于是就很顺利的跳槽到了饿了妈。</p><p>也算走到了算是一个不太容易倒闭的公司，体验了各种大公司的流程，效率也挺高的，时间嘛也还行自己手脚比较快所以基本会有一定的空闲时间，不算很多，但可以。</p><h1 id="去日本玩"><a href="#去日本玩" class="headerlink" title="去日本玩"></a>去日本玩</h1><p>刚进饿了妈不久，就要收拾东西准备攻略自己一个人出去玩啦。半年前的既定安排跟跳槽也无关，不过当时想着4月底5月初的时间段怎么说也得三方啊毕业的准备都差不多了吧，那又是谁知道这个点了我自己居然还会跳槽，真是。。。</p><p>嘛操着自己零零碎碎平假名和片假名，也没跟太多人说话，现在想起来我当时到底是怎么旅游的都完全不怎么会说日语，顺顺利利的玩了10天，肥肠快乐，嘛钱也用了不少，差不多一共两万左右吧？</p><p><a href="https://photos.app.goo.gl/Gh0Qox7rmOz3rRqz2" target="_blank" rel="noopener">Google Photo</a></p><h1 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h1><p><div class="IMGalignRight" style="width: 330px;"><img src="https://i.loli.net/2018/04/10/5acc59ab88143.jpg" alt="毕业啦"></div><br>一霎眼毕业了，当时好像没有什么感觉，取了毕业证书，学位证书，回家就往公司的系统上传表示7.1日起就可以拿正式工资了，只有这点才让我感觉到了毕业。不过现在想想，我居然已经是个社会人了，而且已经实习+上班上了一年了，时间的力量还真是强大，把自己给塑造成了什么样只有回头看的时候才能知道。</p><p>我对学校没什么好感，对周围同学也没什么太多好感，4年自己也不知道自己干了什么，只是埋头学了很多东西，所以这4年，嘛也就这样。</p><h1 id="N2合格"><a href="#N2合格" class="headerlink" title="N2合格"></a>N2合格</h1><p>旅游回来之后发现自己只有一个月时间就要考N2于是工作之余还不停的去做之前买来没做的练习再去查字典，最后考前一星期还买了一本书再做练习，直接就上了考场。考完回来感觉应该能过吧，虽然有一半的语法题我是瞎蒙的，有一篇阅读没有时间看。这种没有范围的考试真的非常吓人，又或者说因为是第一次正正经经考一个完全自学的语言所以会如此害怕。</p><p>复习非常累，考试也很累，幸好最后顺利通过，还是很开心的（分数不高啦）</p><h1 id="跳槽去了LINE"><a href="#跳槽去了LINE" class="headerlink" title="跳槽去了LINE"></a>跳槽去了LINE</h1><p>这算是下半年一直在做的一件事情吧，从9月初开始试试的心态投了一封简历，结果到最后面试走完被发了offer真的非常非常开心又意外，一个是LINE是日本的企业之中应该是我心中最想去的一个企业，Google也好Twitter也好也很想去，但那些真的水平太高，自己99%是不太可能的，不过LINE的话最初我觉得自己可能70%不太可能，不过最后居然能进是非常意外的，另一个意外就是自己其实日语也就是三脚猫水准，也不要说三脚猫了，一脚猫吧，顶多也就看看小学生向的普通动画，在这之前都没跟日本人说过话，推特也只是在去日本玩送东西给太太的时候结下的太太聊天，聊的也不多还不需要太注重细节，就这么烂的水平，居然最后被采用了。</p><p>然后就是递签证，返签证，去日本找地方睡觉，上班这样的过程，签证只花了一周不过递签证跟返签证还真是艰辛前前后后块花了一个半月，嘛只能算是好事多磨。期间当然是在饿了妈当没事人一样刷KPI，我觉得如果我不走的话我KPI至少有B吧，A能不能有就不太清楚了。</p><p>第一次离开自己家自己一个人住，唔太幸福了，小黄本放题啊~~</p><p>要说原因的话，也不太那么好明着说吧，嘛自己来日本的时候的确也是觉得哇这里真好真舒服，想来这里上班呢，另一个是2017下半年也的确发生了很多事，让自己对周围的环境有了一些看法吧。</p><h1 id="2018年的计划？"><a href="#2018年的计划？" class="headerlink" title="2018年的计划？"></a>2018年的计划？</h1><p>天呐看看去年的计划，什么rxJs，什么后端，什么可视化前端，什么游戏开发，完全没有学嘛。<br>2018年的话，先把欠账还清吧，下的动画啥的赶紧看完，不过游戏啥的基本都完成了还算是，摸鱼上手（笑）</p><p><a href="https://bgm.tv/award/2017/xingo" target="_blank" rel="noopener">Bangumi 2017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忙完这一阵，回过神来已经是2018年的4月了，才有空开始补一些之前没有干完的事情，比如写这一篇2017年的总结。&lt;/p&gt;
&lt;p&gt;仔细想想还真的是2017年经历了太多太多事情，很多事情甚至自己都没有想到，感觉自己非常幸运，总的来说是一个很开心的一年。&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue + TypeScript 尝鲜体验</title>
    <link href="https://blog.xingoxu.com//2017/10/vue-typescript-early/"/>
    <id>https://blog.xingoxu.com//2017/10/vue-typescript-early/</id>
    <published>2017-10-18T07:04:23.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>适用 Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2</p></blockquote><p>其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 Javascript，便爱上了这门语言。</p><p>但现在的我稍稍又觉得这样的东西其实还行，只使用类型系统也并没有完全限制 Javascript 本身的灵活性，并且他帮助我不会犯一些低级错误，而且还能配合 Visual Studio Code 的提示，我觉得这个还是很不错的，最近忙起来的时候，甚至经常把两个输入框的 value 直接进行比较了，于是就想尝试一下 TypeScript。</p><a id="more"></a><h1 id="官方做法"><a href="#官方做法" class="headerlink" title="官方做法"></a>官方做法</h1><p>Vue 2.2 以上之后，官方给 Vue已经添加了很多类型声明，那么我们就来实践一下在单文件 Vue 中使用 TypeScript。</p><h2 id="webpack-rules-中添加-ts-loader-相关（这里使用-webpack-2）"><a href="#webpack-rules-中添加-ts-loader-相关（这里使用-webpack-2）" class="headerlink" title="webpack rules 中添加 ts-loader 相关（这里使用 webpack 2）"></a>webpack rules 中添加 ts-loader 相关（这里使用 webpack 2）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules|vue\/src/</span>,</span><br><span class="line">  loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示对 .ts 文件编译时使用 ts-loader 进行读取，appendTsSuffixTo 是为了让 tsc 对 vue 文件能够当成一个 module 进行处理，以解决 moudle not found 的问题（tsc 本身不认识 vue 结尾的文件）</p><h2 id="添加-d-ts文件"><a href="#添加-d-ts文件" class="headerlink" title="添加 .d.ts文件"></a>添加 .d.ts文件</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是为了让 vscode 在 ts 文件中识别 vue 结尾文件</p><h2 id="项目根目录下添加-tsconfig-json"><a href="#项目根目录下添加-tsconfig-json" class="headerlink" title="项目根目录下添加 tsconfig.json"></a>项目根目录下添加 tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>allowSyntheticDefaultImports</code> 是为了能够用 es6 形式的 import，其他就参照 Vue 和官网的弄了个最小化的 json。</p><h2 id="万事俱备，让我们-npm-run-dev-跑起来！"><a href="#万事俱备，让我们-npm-run-dev-跑起来！" class="headerlink" title="万事俱备，让我们 npm run dev 跑起来！"></a>万事俱备，让我们 <code>npm run dev</code> 跑起来！</h2><p>在这里，我们假设使用 Vue 官方的 webpack boilerplate，对 Hello.vue 进行一下改造。</p><p>在模板的 msg 下新增一行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Say Hello Times: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>并将 script 部分修改成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Declare the component's type</span></span></span><br><span class="line"><span class="undefined">  interface HelloInterface extends Vue &#123;</span></span><br><span class="line"><span class="undefined">    msg: string,</span></span><br><span class="line"><span class="undefined">    count: number,</span></span><br><span class="line"><span class="undefined">    sayHello(): number</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="javascript">    HelloInterface <span class="keyword">as</span> interface</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line"><span class="undefined">        count: 0</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      sayHello() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// We need to explicitly annotate the exported options object</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// with the Hello type</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;HelloInterface&gt;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码没有什么太大的问题</p><p>接着我们改造一下 App.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span> @<span class="attr">click</span>=<span class="string">"sayHello"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; interface <span class="keyword">as</span> helloInterface, <span class="keyword">default</span> <span class="keyword">as</span> Hello &#125; <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line"><span class="undefined">  interface App extends Vue &#123;</span></span><br><span class="line"><span class="undefined">    $refs: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 对 helloComponent 进行声明，可以使用 helloComponent 上的方法和属性</span></span></span><br><span class="line"><span class="undefined">      helloComponent: helloInterface</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      sayHello() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Hello</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;App&gt;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，像 refs 这种动态的在运行时才能确定的东西，如果需要在 coding 过程中静态化，则需要在 interface 中对其进行声明，写的 code 稍微有点多，不过可以接受。</p><blockquote><p>注： App.vue 修改成 <code>lang=ts</code> 后，顶层的 main.js 需要换成 main.ts 并修改 webpack 入口点，否则发生 file not found 错误</p></blockquote><h1 id="vue-class-component"><a href="#vue-class-component" class="headerlink" title="vue-class-component"></a>vue-class-component</h1><p>官方的另一种推荐做法是 <code>vue-class-component</code>，不过 demo 和 readme 有点小问题，可把我这个 TypeScript 新手给难到啦，提了 pr 希望快快通过。</p><p>让我们看看使用 <code>vue-class-component</code> 之后的 Hello.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  @Component</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    msg: string = <span class="string">'Welcome to Your Vue.js App'</span></span></span><br><span class="line"><span class="undefined">    count: number = 0</span></span><br><span class="line"><span class="undefined">    sayHello(): number &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再让我们看看 App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  @Component(&#123;</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Hello</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">    $refs: &#123;</span></span><br><span class="line"><span class="undefined">      helloComponent: Hello</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    sayHello() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非常 Cool，非常精炼，暂时没有想到可能会发生的没法解决的因为 vue 或者 vue 组件 和 TypeScript 水土不服的编译错误，而且都有了类型和提示。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>尤大佬说在接下来的 Vue 2.5 还会加强一系列的 TypeScript 支持（<a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08" target="_blank" rel="noopener">链接</a>），不知道是怎样的支持呢。<br>另外，欢迎大家在评论区发表 Vue + TypeScript 的使用场景以及你遇到的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;适用 Vue.version &amp;lt; 2.5 &amp;amp;&amp;amp; Vue.version &amp;gt;= 2.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 Javascript，便爱上了这门语言。&lt;/p&gt;
&lt;p&gt;但现在的我稍稍又觉得这样的东西其实还行，只使用类型系统也并没有完全限制 Javascript 本身的灵活性，并且他帮助我不会犯一些低级错误，而且还能配合 Visual Studio Code 的提示，我觉得这个还是很不错的，最近忙起来的时候，甚至经常把两个输入框的 value 直接进行比较了，于是就想尝试一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue + TypeScript 早期体験</title>
    <link href="https://blog.xingoxu.com/ja/2017/10/vue-typescript-early/"/>
    <id>https://blog.xingoxu.com/ja/2017/10/vue-typescript-early/</id>
    <published>2017-10-10T09:33:23.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2　適用される</p></blockquote><h1 id="公式ドキュメントによるやり方"><a href="#公式ドキュメントによるやり方" class="headerlink" title="公式ドキュメントによるやり方"></a>公式ドキュメントによるやり方</h1><p>Vue 2.2 から、Vue にいろんな公式型宣言を提供しており、さっそく、単一ファイルコンポーネントに TypeScript を試してみましょう。</p><h2 id="webpack-rules-に-ts-loader-相関を添付しましょう"><a href="#webpack-rules-に-ts-loader-相関を添付しましょう" class="headerlink" title="webpack rules に ts-loader 相関を添付しましょう"></a>webpack rules に ts-loader 相関を添付しましょう</h2><blockquote><p>こっちは webpack2</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+     test: /\.ts$/,</span></span><br><span class="line"><span class="addition">+     exclude: /node_modules|vue\/src/,</span></span><br><span class="line"><span class="addition">+     loader: 'ts-loader',</span></span><br><span class="line"><span class="addition">+     options: &#123;</span></span><br><span class="line"><span class="addition">+       appendTsSuffixTo: [/\.vue$/]</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><a id="more"></a><p>.ts のファイルを ts-loader で読み込む<br><code>appendTsSuffixTo</code>は vue を module として tsc でプロセスして、module not found の問題を解決する（tsc は .vue ファイルが知らない）</p><h2 id="d-ts-ファイルを作成する"><a href="#d-ts-ファイルを作成する" class="headerlink" title=".d.ts ファイルを作成する"></a>.d.ts ファイルを作成する</h2><p>どんな名前もいい、どこでもいい、tsconfig.json の include PATH にいればいい、必ず .d.ts を名前の終わりします。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vscode の .ts ファイルに .vueファイルも知らせます。</p><h2 id="tsconfig-json-を作成する"><a href="#tsconfig-json-を作成する" class="headerlink" title="tsconfig.json を作成する"></a>tsconfig.json を作成する</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>allowSyntheticDefaultImports</code> は es6 の import を直接使えるの option</p><h2 id="準備万端、npm-run-dev-いきましょう！"><a href="#準備万端、npm-run-dev-いきましょう！" class="headerlink" title="準備万端、npm run dev いきましょう！"></a>準備万端、<code>npm run dev</code> いきましょう！</h2><p>こっちは vue-cli の webpack boilerplate を例として、Hello.vue を改造しましょう。</p><p>html template の msg の下に<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"><span class="addition">+ &lt;h2&gt;Say Hello Times: &#123;&#123; count &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line">  &lt;h2&gt;Essential Links&lt;/h2&gt;</span><br></pre></td></tr></table></figure></p><p>script の部分を<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Declare the component's type</span></span></span><br><span class="line"><span class="undefined">  interface HelloInterface extends Vue &#123;</span></span><br><span class="line"><span class="undefined">    msg: string,</span></span><br><span class="line"><span class="undefined">    count: number,</span></span><br><span class="line"><span class="undefined">    sayHello(): number</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="javascript">    HelloInterface <span class="keyword">as</span> interface</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line"><span class="undefined">        count: 0</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      sayHello() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// We need to explicitly annotate the exported options object</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// with the Hello type</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;HelloInterface&gt;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>こうして改造します</p><p>親としての App.vue を改造してみて</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id="app"&gt;</span><br><span class="line"><span class="deletion">-   &lt;img src="./assets/logo.png"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;img src="./assets/logo.png" @click="sayHello"&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="addition">+   &lt;hello ref="helloComponent"&gt;&lt;/hello&gt;</span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; interface <span class="keyword">as</span> helloInterface, <span class="keyword">default</span> <span class="keyword">as</span> Hello &#125; <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line"><span class="undefined">  interface App extends Vue &#123;</span></span><br><span class="line"><span class="undefined">    $refs: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// helloComponent を宣言する、helloComponent のメソッドとプロパティを使えようになるました</span></span></span><br><span class="line"><span class="undefined">      helloComponent: helloInterface</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      sayHello() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Hello</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;App&gt;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>refsといった動的なもの、interface に宣言して、typescript にオートコンプリートを使えます。</p><blockquote><p>App.vue の <code>script</code> を <code>lang=ts</code> 変更すると、main.js を main.ts に変更する必要があります、webpack の entry も忘れないでください，そうしないと file not found のエラーが発生する可能性がある。</p></blockquote><p>コードはちょっと多いね、公式サイトによるの <code>vue-class-component</code> を使ってみますか？</p><h1 id="vue-class-component"><a href="#vue-class-component" class="headerlink" title="vue-class-component"></a>vue-class-component</h1><p><code>vue-class-component</code>の demo と readme はちょっと問題がある、TypeScript の新入りの私が困った、pr を提出した、速くマージされて欲しい。</p><p><code>vue-class-component</code> を使っている Hello.vue の script 部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Hello <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  msg: <span class="built_in">string</span> = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  sayHello(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>で、App.vue</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> App <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  $refs: &#123;</span><br><span class="line">    helloComponent: Hello</span><br><span class="line">  &#125;</span><br><span class="line">　</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.helloComponent.count++;</span><br><span class="line">    <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随分清潔になりました、オートコンプリートもバッチリ！他の vue コンポーネントと TypeScript の不具合は一時的に考え出来ません。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Vue 2.5から TypeScript のサポートはどんどん増えますと<a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08" target="_blank" rel="noopener">言います</a>、どんなサポートですね〜</p><p>日本語まだ下手ですから、変なところいっぱいと思います、コメントエリアに指摘すれば幸いです。</p><p>最後まで閲覧いただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vue.version &amp;lt; 2.5 &amp;amp;&amp;amp; Vue.version &amp;gt;= 2.2　適用される&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;公式ドキュメントによるやり方&quot;&gt;&lt;a href=&quot;#公式ドキュメントによるやり方&quot; class=&quot;headerlink&quot; title=&quot;公式ドキュメントによるやり方&quot;&gt;&lt;/a&gt;公式ドキュメントによるやり方&lt;/h1&gt;&lt;p&gt;Vue 2.2 から、Vue にいろんな公式型宣言を提供しており、さっそく、単一ファイルコンポーネントに TypeScript を試してみましょう。&lt;/p&gt;
&lt;h2 id=&quot;webpack-rules-に-ts-loader-相関を添付しましょう&quot;&gt;&lt;a href=&quot;#webpack-rules-に-ts-loader-相関を添付しましょう&quot; class=&quot;headerlink&quot; title=&quot;webpack rules に ts-loader 相関を添付しましょう&quot;&gt;&lt;/a&gt;webpack rules に ts-loader 相関を添付しましょう&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;こっちは webpack2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rules: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+   &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     test: /\.ts$/,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     exclude: /node_modules|vue\/src/,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     loader: &#39;ts-loader&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     options: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+       appendTsSuffixTo: [/\.vue$/]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+   &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>いくつのユーザー状態の記録方法</title>
    <link href="https://blog.xingoxu.com/ja/2017/09/record-user-login-status-methods/"/>
    <id>https://blog.xingoxu.com/ja/2017/09/record-user-login-status-methods/</id>
    <published>2017-09-28T10:03:55.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>昔のやり方は、Cookie に直接保存する。サーバーストレージはまだそんな安いの状況下で、たくさんのウェブサイトはユーザーの登録そういうインフォメーションを変化してサインして Cookie に保存する。</p><p>変化やサインは、md5+salt、または secret を使って双方向の暗号化するとかの方法。</p><p>ウェブサイトに二回アクセスとしたら、Cookieに指定のkeyのvalueを検証する、それはただしかどうか。<br><a id="more"></a></p><p>こうやっていいところは：<br>サーバーストレージ占有なし、Cookie はユーザーの情報です</p><p>こうやって悪いところは：<br>ユーザー情報盗むはやすい、特にhttpsなし、中間者攻撃されたら、悪い人にログインされたことはできる。<br>また、別々に保存するのデータを改ざんされるはやすい。</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>計算力とストレージの速い発展、問題は次々に現れた。保存希望のユーザー情報はますます多くなる、Cookie のサイズ制限は少ない。</p><p>原理的には、Session は Cookie です。</p><p>サイトにアクセスとき、サーバーから唯一の Session ID を配ってCookie に保存する。ログインのとき、この Session ID による、サーバーに Session Object を作る、このオブジェクトにuser idとか、状態というユーザーの情報を保存している。</p><p>Session ID は Session Object を作るのときに配れも可能です、Session IDの作る方法は時間によるに限らない、sidの唯一を保証すればいい。</p><p>Session Object のストレージ場所も選べる。Sessionはとても大事ですと思われなら、mysql に保存するは可能です、そうではない場合は、redis に、メモリにも可能です。</p><p>だから、Sessionはとてもフレキシブル。</p><p>Session は過去の技術ではない、今はたくさんのウェブサイトに使われている。その原因は、httpしか問題いません。Internet Explorer &gt;= 10 の場合も CORS に Cookie の伝送が可能ですから、問題ない。</p><p>いいところ：<br>クライエントサイド sid しか見えない</p><p>悪いところ：<br>情報を取得する、一つ query 必要です。<br>盗むも可能ですが、Session / Cookie の問題ではない、http の問題です、httpで何も見える。</p><p>いいと悪いは時代に応じるです、Cookie に保存するときは、サーバーの計算力は低い、memcacheやredisもない、Sessionの時間はかかる、今はこれは決して悪いところじゃない。</p><p>Session と Cookie はフロントエンドにとって何をする必要はない、サーバーは Set-Cookie の http header で sid と Cookie の更新を完成することはできる。</p><h1 id="Token-Based"><a href="#Token-Based" class="headerlink" title="Token Based"></a>Token Based</h1><p>上記２つの方法は、２つの異なるアイデアを表しています。一つは情報をクライエントサイドに保存する、一つはサーバーにする。</p><p>フロントエンドとバックエンドを分けるときは、上記の２つアイデアも Cookie なしに進化する。</p><p>一つは<br>Session Token を取って、JSON、または 他のhttp header に伝送する</p><p>一つは<br>JWT（JSON Web Token） 情報をクライエントサイドに保存するというアイデアを表す。Cookie とちょっと似ているけど，情報を base64 に変化して、secretでサインして、一緒に token になる。</p><p>クライエントサイドに保存するのいいところは：<br>情報はクライエントに保存しているから、コードに直接処理はできる、ロードバランスとかの心配いらない。<br>また、Session の期限切れば、データベースに delete の必要がある。</p><p>悪いところは：<br>情報多くなるとき、Token は長くなる、http request は大きいになる、伝送の時間がかかる。</p><p>JWT の payload は base64 コーディングする、誰か標準に通じれば、内容を見られます。</p><p>Token Based 認証はフロントエンドに保存して、コーディングは必要です、一般はlocalStorageで。<br>だから、Token Based 認証は XSS に攻撃される可能性はある、Cookie Based 認証は CSRF に攻撃される可能性はある。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>いくつかの単語をすべての場合に要約することはできません、Token と Cookie また 情報をクライエントサイドに保存するとサーバーにするの場合を想像する、どんな方法を採用しようか、現業務を基にして、ちょっと長いのビジョンで選択を考える。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;p&gt;昔のやり方は、Cookie に直接保存する。サーバーストレージはまだそんな安いの状況下で、たくさんのウェブサイトはユーザーの登録そういうインフォメーションを変化してサインして Cookie に保存する。&lt;/p&gt;
&lt;p&gt;変化やサインは、md5+salt、または secret を使って双方向の暗号化するとかの方法。&lt;/p&gt;
&lt;p&gt;ウェブサイトに二回アクセスとしたら、Cookieに指定のkeyのvalueを検証する、それはただしかどうか。&lt;br&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>用户登录状态 验证权限的时代变迁</title>
    <link href="https://blog.xingoxu.com//2017/09/record-user-login-status-methods/"/>
    <id>https://blog.xingoxu.com//2017/09/record-user-login-status-methods/</id>
    <published>2017-09-28T09:57:15.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>直接在Cookie中存信息可谓是上古时代的操作了，在服务器还没有那么便宜的情况下，好多网站选择将用户的登录信息存在cookie中，他们把用户名或者用户id转换并签名之后，直接存入Cookie，如果有其他需要的信息，也是如此操作</p><p>转换或签名可以是加盐md5，也可以是使用secret的双向加密</p><p>用户第二次访问网站的时候，代码中对这段信息进行验证，看看是否是正确的签名的<br><a id="more"></a></p><p>这样做的好处是：<br>不会再占用服务器资源，直接就在cookie中读取数据，获得结果</p><p>坏处是：<br>登录凭据容易被窃取，尤其是那个年代还没有流行https，如果被中间人了，或者以另一种方式拿到了cookie，那就会被窃取登录，另外，每个数据还可能是分开存储的，因此容易被篡改</p><p>当然那时的互联网也并没有那么发达，cookie也就存存用户名什么的用于显示</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>后来网速变快了，web 应用高速发展，大家意识到了很多问题，cookie 大小不够啊，cookie 每个 key 都这么搞一下暴露太多了等等</p><p>从原理上来说，Session 就是 Cookie</p><p>客户端进入网站后，服务器分配一个 Session ID 给客户端种入 Cookie，用户登录时，在服务器查询 Session ID，在服务器写入 Session Object，这个对象里存了用户的登录数据，比如 id 啦，用户名啦，登录状态 / 角色等等</p><p>另外分配 Session ID 也可以是懒分配，也就是等到在服务器存 Session Object 的时候再分配也没有关系，Session ID 的分配可以是用 UserID 来进行加密分配，也可以用毫不相关的时间等信息进行加密分配，只需要保证这个 sid 唯一，不容易被伪造即可</p><p>Session 的存放也是可重可轻，如果觉得 Session 很重要，那么可以放入 mysql，如果觉得 Session 不怎么重要，甚至可以放入内存，重启丢失</p><p>Session 到至今还是非常非常多的网站在用，原因就是在于其实除了 https 以外的问题，并没有什么问题，IE &gt;= 10 之后，Cookie 也可以跨域，那么 Session 就没有什么问题</p><p>好处是：<br>在客户端除了 sid 以外，看不到任何信息，当然不太容易篡改</p><p>坏处是：<br>取 Session 的时候，是会需要再 query 一次的<br>也容易被窃取，当然这并不是 Session / Cookie 的锅，http 下，啥都是一清二楚的</p><p>另外，优缺点都是相对于时代来说的，存 Cookie 的时代服务器的性能不高，也没有 memcache 或者 redis 这种东西，存入 mysql 就需要再 query 一次，负载均衡当然不能同步 内存中的 Session，Cookie 成为了首选，那么现在呢，这点算力恐怕算不了什么，那么 Session 的那个坏处，就应该被划掉，Session 理所当然成为了流行的会话管理方式</p><p>Session 和 Cookie 都不需要前端介入，服务端通过 Set-Cookie http 头就可以完成 sid 和 Cookie 的更新</p><h1 id="Token-Based"><a href="#Token-Based" class="headerlink" title="Token Based"></a>Token Based</h1><p>上边两种方法代表了两种存登录凭据的思想，一种是把凭据存客户端，一种是把凭据存服务端</p><p>那么随着前后端分离的运动，上边两种的登录凭据的思想也发展出了两种不使用 Cookie 的方法</p><p>把凭据存服务端的 Session，把他的Token，单拿出来，在JSON中传递，或者在 http 头里传递或者其他方式传递</p><p>JWT（JSON Web Token） 代表了把凭据存客户端的思想，和当时的 Cookie 有点像，登录的时候把那些需要的信息 base64 编码作为一段，然后再对这些字段用 secret 进行签名，连起来这么一段 Token 去发给客户端作为凭据</p><p>凭据存在客户端的好处是：<br>因为登录状态都是跟着客户端跑的，时效信息都存在客户端，Session 如果过期了，要对 Session 数据库进行垃圾清理，那么凭据存在客户端就不需要，而且因为都是跟着客户端跑的，在服务器扩大搞集群，搞异地多活，就不需要考虑读数据库这种事情，因为都是客户端请求为 based ，随便哪个服务器来 handle 请求都没有问题</p><p>凭据存客户端坏处是：<br>当凭据内容越来越多，Token 也会越来越长，每一次请求都会携带这么大这么长的内容，显然不是非常合适</p><p>JWT 还有个问题就是中间那部分是 base64 编码的，如果熟悉标准的话，等于就是明文存储凭据了，虽然不能改，当然还是能看到</p><p>Token 类的鉴权需要前端参与并存储，存储一般会放在 localStorage等地方，因此其实是比较容易受到 XSS 的影响<br>Cookie 类的鉴权容易受到 CSRF 的影响</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实只言片语还是没法概括到所有的情况，只能大体的对Token 或者 Cookie 以及 凭据存服务端或者客户端的优缺点进行想象，究竟去使用哪一种鉴权方式，还是应该基于业务，对业务有非常深入的理解，以及稍带一些长远的思考</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;p&gt;直接在Cookie中存信息可谓是上古时代的操作了，在服务器还没有那么便宜的情况下，好多网站选择将用户的登录信息存在cookie中，他们把用户名或者用户id转换并签名之后，直接存入Cookie，如果有其他需要的信息，也是如此操作&lt;/p&gt;
&lt;p&gt;转换或签名可以是加盐md5，也可以是使用secret的双向加密&lt;/p&gt;
&lt;p&gt;用户第二次访问网站的时候，代码中对这段信息进行验证，看看是否是正确的签名的&lt;br&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>日本語ブログ始動</title>
    <link href="https://blog.xingoxu.com/ja/2017/08/hello-jp-world/"/>
    <id>https://blog.xingoxu.com/ja/2017/08/hello-jp-world/</id>
    <published>2017-08-26T08:55:10.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちわ、はじめまして、こちらは xingo さんの日本語ブログ！</p><p>日本語まだ下手です、どうぞ、お気軽いに指導します、よろしくお願いします！</p><p>さて、このブログですが、まずはどのようなものかご説明したいと思います。</p><ul><li>xingo さんの技術相関</li><li>xingo さんの作品</li><li>xingo さんの日常生活</li><li>xingo さんの旅行</li></ul><p>このような感じで本番までお付き合いいただけたら幸いです</p><p>では、また次回</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちわ、はじめまして、こちらは xingo さんの日本語ブログ！&lt;/p&gt;
&lt;p&gt;日本語まだ下手です、どうぞ、お気軽いに指導します、よろしくお願いします！&lt;/p&gt;
&lt;p&gt;さて、このブログですが、まずはどのようなものかご説明したいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xi
      
    
    </summary>
    
      <category term="uncategorized" scheme="https://blog.xingoxu.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 你的名字 东京 圣地巡礼</title>
    <link href="https://blog.xingoxu.com//2017/08/kiminonawa-tokyo-seichijunrei/"/>
    <id>https://blog.xingoxu.com//2017/08/kiminonawa-tokyo-seichijunrei/</id>
    <published>2017-08-26T05:02:06.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<p>BD 出了一个月，略忙再加上 VCB 也没有出 rip，前天 rip 刚出于是赶紧下载了来做整理啦</p><p>靠着仅有的印象和网上的一些经验攻略，把东京几乎所有的场景都拍到了吧（大概）</p><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwd2euzhtj21hc0u0b2h.jpg" alt="第一次交换身体瀧去学校查手机地图"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1sqchgj21kw23vb2b.jpg" alt="第一次交换身体瀧去学校查手机地图"></div><br><div class="clear-float img-caption">新宿站</div><p><br></p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1xbjrpj21hc0u0x6w.jpg" alt="瀧去学校路上"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwd1jphpxj21kw23vb2a.jpg" alt="瀧去学校路上"></div><br><div class="clear-float img-caption">新宿站前路</div><a id="more"></a><br><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwd2d2vh6j21hc0u0qvc.jpg" alt="瀧去学校路上（東京や！）"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwd23g4dij21kw16oe82.jpg" alt="瀧去学校路上（東京や！）"></div><br><div class="clear-float img-caption">新宿站前路</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwbmz0td8j21hc0u01l6.jpg" alt="瀧去学校路上后的镜头"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbm3fz0qj21kw16oqv6.jpg" alt="瀧去学校路上后的镜头"></div><br><div class="clear-float img-caption">新宿站全景（可在天桥上拍）</div><p><br></p><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fix34kkpjyj21hc0u0qvd.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://ws1.sinaimg.cn/large/6b8bbe7egy1fix34dnb9jj23402c04qr.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">西新宿 新宿警察署 夜晚</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwd2mqd8wj21hc0u01l6.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwd232dg3j21kw0uvhdt.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">西新宿 新宿警察署 白天</div><p>这里非常丢人的拍错了角度，因为完全没看图😂<br><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf1cckc9j21hc0u0kjt.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwf0r611qj21kw16ob2b.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">新宿站 南口与中央东口之间的铁路桥下 白天</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf1e349nj21hc0u0kjt.jpg" alt="一段时间的交换身体"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf18dalpj21kw23vx6r.jpg" alt="一段时间的交换身体"></div><br><div class="clear-float img-caption">新宿站 南口与中央东口之间的铁路桥下 夜晚</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg1rwwgkj21hc0u07wp.jpg" alt="三叶代替瀧和前辈发展关系"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg0ubhtbj21kw16o7wj.jpg" alt="三叶代替瀧和前辈发展关系"></div><br><div class="clear-float img-caption">涉谷站 东急电铁入口 TATSUYA</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwbo72i9mj21hc0u07wp.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbnf9sw0j21kw16o4qr.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站外</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf9dm2p8j21hc0u0qvc.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf8koc6oj21950nzaxk.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwesmfu6rj21hc0u01l5.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwesdqq9gj21kw23vhdu.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwbo03yauj21hc0u04qx.jpg" alt="瀧第一次和前辈约会"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbnkbx57j21kw23vb2b.jpg" alt="瀧第一次和前辈约会"></div><br><div class="clear-float img-caption">四谷站前广场</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg21vktbj21hc0u07wp.jpg" alt="前辈和瀧结束约会的地方 全剧也多次出现"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwg1rroymj21kw23vqv7.jpg" alt="前辈和瀧结束约会的地方 全剧也多次出现"></div><br><div class="clear-float img-caption">jr 信濃町站前天桥</div><p>桥上的这个路标牌实地并木有，但是却在六本木找到了一模一样的路牌，不是很清楚怎么回事</p><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwbm32i2aj21hc0u04qx.jpg" alt="瀧被前辈甩了单独在天桥"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwblheotsj21kw16onpe.jpg" alt="瀧被前辈甩了单独在天桥"></div><br><div class="clear-float img-caption">jr 信濃町站前天桥上</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf9nzwjsj21hc0u01l5.jpg" alt="被甩后的几处镜头 这个镜头全剧出现了两次"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwf99pw2bj20nl0ik481.jpg" alt="被甩后的几处镜头 这个镜头全剧出现了两次"></div><br><div class="clear-float img-caption">jr 信濃町站对面</div><p>全图是这样的：</p><div class="center-img img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf9he7b3j21kw23vkjm.jpg" alt="jr 信濃町站对面"></div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwg1ulinaj21hc0u0npl.jpg" alt="被甩后的几处镜头"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg1a803cj21kw16o1kz.jpg" alt="被甩后的几处镜头"></div><br><div class="clear-float img-caption">刚才天桥的后边</div><p>这里角度非常刁钻不是很好拍到，只能这样拍一下，全图如下：<br><br></p><div class="center-img img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg1g9v6qj21kw16oe83.jpg" alt="天桥的后边"></div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwesi9jegj21hc0u0e89.jpg" alt="瀧画系守镇风景那一段的镜头"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwersryagj21kw16ohdv.jpg" alt="瀧画系守镇风景那一段的镜头"></div><br><div class="clear-float img-caption">明治神宫前</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiweshteg1j21hc0u0e89.jpg" alt="三叶来东京找瀧"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwerz363lj21kw23vqv6.jpg" alt="三叶来东京找瀧"></div><br><div class="clear-float img-caption">jr 代々木站</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg5q68p6j21hc0u0he1.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg57dk0cj21kw23v7wj.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 至四谷站 路上</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwg68bzxuj21hc0u01l6.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg5sbgtmj21kw23vu0z.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 地铁出口</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiweslzvu6j21hc0u0he1.jpg" alt="八年后瀧和前辈见面"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwes8cxcuj21kw16o1kz.jpg" alt="八年后瀧和前辈见面"></div><br><div class="clear-float img-caption">赤坂見附駅 至四谷站 （靠近四谷） 野球场旁边小路</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwf9j4x23j21hc0u0e89.jpg" alt="八年后 与前辈约会结束后的镜头"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf9377mzj21kw16o1kz.jpg" alt="八年后 与前辈约会结束后的镜头"></div><br><div class="clear-float img-caption">涉谷站旁天桥</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwf9iwr8aj21hc0u0b2h.jpg" alt="八年后 与前辈约会结束后的镜头"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf8yt1tbj21kw23v7wk.jpg" alt="八年后 与前辈约会结束后的镜头"></div><br><div class="clear-float img-caption">新宿中央东口前过天桥 南口过天桥广场 星巴克门口</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf1etfa9j21hc0u07wp.jpg" alt="jr上发现对方后的镜头"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwf0qdlnyj21kw23vu0y.jpg" alt="jr上发现对方后的镜头"></div><br><div class="clear-float img-caption">四谷三丁目站 四谷站 中间的新宿通路 往须贺神社方向</div><p>这里标注一下三个标志在哪 😂 间隔非常远<br><br></p><div class="center-img img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf4tbu88j21kw23ux6p.jpg" alt="动画中的三个标志的位置"></div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg1tucs9j21hc0u0x6w.jpg" alt="jr上发现对方后的镜头"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg128dhwj21kw16okjn.jpg" alt="jr上发现对方后的镜头"></div><br><div class="clear-float img-caption">四谷四丁目 路口</div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg6f7rd1j21hc0u0u14.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg5pvutaj21kw23vkjm.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">jr新宿站 南口</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwf15din3j21hc0u04qx.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwf0g51fij21kw16o4qr.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">jr 信濃町站对面</div><p><br></p><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg6fhfhnj21hc0u0qvd.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg5vl7jxj21kw23vx6q.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">新宿通路 去 须贺神社 的小路</div><p><br></p><div class="pull-left img"><img src="https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwgaaomadj21hc0u0he1.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwg9jlbylj21kw23ve83.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">新宿通路 去 须贺神社 的小路</div><p><br></p><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwga6n8cxj21hc0u01l6.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwg9qqr04j21kw23vhdv.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwga2gnhnj21hc0u0u15.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg9ptj31j21kw23vkjn.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div><p><br></p><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwga9mg3dj21hc0u0u15.jpg" alt="最后互相寻找对方"></div><div class="pull-left img"><img src="https://wx2.sinaimg.cn/large/6b8bbe7egy1fiwg9pzc9qj21kw23v7wk.jpg" alt="最后互相寻找对方"></div><br><div class="clear-float img-caption">须贺神社前</div><p><br><br>完结~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BD 出了一个月，略忙再加上 VCB 也没有出 rip，前天 rip 刚出于是赶紧下载了来做整理啦&lt;/p&gt;
&lt;p&gt;靠着仅有的印象和网上的一些经验攻略，把东京几乎所有的场景都拍到了吧（大概）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/large/6b8bbe7egy1fiwd2euzhtj21hc0u0b2h.jpg&quot; alt=&quot;第一次交换身体瀧去学校查手机地图&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1sqchgj21kw23vb2b.jpg&quot; alt=&quot;第一次交换身体瀧去学校查手机地图&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;新宿站&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;

&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/large/6b8bbe7egy1fiwd1xbjrpj21hc0u0x6w.jpg&quot; alt=&quot;瀧去学校路上&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/6b8bbe7egy1fiwd1jphpxj21kw23vb2a.jpg&quot; alt=&quot;瀧去学校路上&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;新宿站前路&lt;/div&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>探索 Service Worker “生命周期”</title>
    <link href="https://blog.xingoxu.com//2017/08/explore-service-worker-working-lifetime/"/>
    <id>https://blog.xingoxu.com//2017/08/explore-service-worker-working-lifetime/</id>
    <published>2017-08-11T07:05:42.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>最近讨论 PWA 的好多啊，PWA 中有个非常重要的角色是 Service Worker 。刚写这篇文章的时候粗心一看，把现在发的 Working Draft 的发布时间以为就是 Service Worker 的发布时间，被棕神挑刺啦。spec 仓库的第一个 commit 是 2013 年 2 月 7 日，W3C 发第一个 Service Worker 的 public working draft 是 2014 年 5 月 8 日，第一个实现 Service Worker 的是 Chrome 40 （2015 年 1 月 21 日）</p><a id="more"></a><p>以下将Service Worker简称为SW</p><p>SW的功能略有耳闻，在MDN上它被描述为，“对资源缓存和自定义的网络请求进行控制的一个好的统筹机制”，同时他还具有“访问推送通知和后台同步API”</p><p>听起来很神奇，事实上看起来也很神奇，Twitter上个月更新了样式，大家都看到了推特变成了圆头像圆角，然而推特还使用了新的 SW，在允许推特使用Notification的情况下，推特可以在你Chrome开启的时候而没有打开网页的时候给你推送你所关注的内容（<a href="https://twitter.com/settings/web_notifications" target="_blank" rel="noopener">传送门</a>），有一种javascript在关闭网页后，甚至没有打开网页的情况下，就能在后台运行的感觉。</p><p>但事实上并非如此</p><h1 id="编写一个最简单的-SW"><a href="#编写一个最简单的-SW" class="headerlink" title="编写一个最简单的 SW"></a>编写一个最简单的 SW</h1><p>从零创建 Service Worker，只需四步</p><p><strong>第一步</strong>：我们需要一张 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My first Service Worker test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello, Service Worker!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步</strong>：我们需要一个 sw.js，他就是我们的service worker<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'When you see this, we have successfully registered the SW!'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>第三步</strong>：我们需要在刚才的网页上注册，我们可以在网页中的js引入注册，在这里我直接写在了index.html的script标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></span><br><span class="line"><span class="javascript">    navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123; <span class="attr">scope</span>: <span class="string">'/'</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">reg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// registration worked</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registration succeeded. Scope is '</span> + reg.scope);</span></span><br><span class="line"><span class="javascript">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// registration failed</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Registration failed with '</span> + error);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最后一步</strong>：将上边的两个文件放在一个文件夹里，从这个文件夹起个服务器</p><p>打开浏览器，访问localhost，让我们看看控制台</p><p><img src="https://i.loli.net/2017/08/11/598d457727c83.png" alt="一个最简单的 SW"></p><p>至此，我们的第一个 SW 就成功完成了</p><h1 id="SW-的-Debug"><a href="#SW-的-Debug" class="headerlink" title="SW 的 Debug"></a>SW 的 Debug</h1><p>在chrome中，我们可以通过 <a href="chrome://serviceworker-internals/" target="_blank" rel="noopener"><code>chrome://serviceworker-internals/</code></a> 查看浏览器注册的所有SW</p><p><img src="https://i.loli.net/2017/08/11/598d45b36a053.png" alt="chrome://serviceworker-internals/"></p><p>可以在 <a href="chrome://inspect/#service-workers" target="_blank" rel="noopener"><code>chrome://inspect/#service-workers</code></a> 查看到当前正在运行的所有 SW</p><p><img src="https://i.loli.net/2017/08/11/598d45ea6be64.png" alt="chrome://inspect/#service-workers"></p><p>点击inspect，可以在Console中看到SW在控制台中输出的内容，在Source中，对SW进行断点调试</p><p>如果你还保留着刚才的那个localhost，你可以发现，在inspect service-worker页面中，我们刚才的sw.js还一直在运行着</p><h1 id="Service-Worker-的“生命周期”"><a href="#Service-Worker-的“生命周期”" class="headerlink" title="Service Worker 的“生命周期”"></a>Service Worker 的“生命周期”</h1><p>SW 的生命周期与事件可以在MDN上找到，也不再重复贴出，SW的缓存与推送通知就是靠着他的生命周期所发出的这些<code>event</code>来驱动的。</p><p>我想说的是另一个生命周期，我刚才说到，如果我们第一次进入localhost，并一直保留在那个页面，在inspect service-worker还可以看到service worker还一直运行着</p><p>我们可以将 sw.js 改写成如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;, <span class="number">5</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>在 chrome://serviceworker-internals/ 取消注册 SW ，并强制刷新 localhost（ mac下 ⌘+shift+R，windows 下 ctrl+shift+R ），我们会发现控制台中，每五秒就打印了一次 test，这也正是说明，SW在第一次进入的时候没有关闭页面的时候，一直在运行，我们也可以在刚才的 chrome://serviceworker-internals/ 看到这个 SW 正在运行。</p><p><img src="https://i.loli.net/2017/08/11/598d4776cc312.png" alt="5秒打印console.log(&#39;test&#39;)"></p><p>然而当我们关闭localhost页面，稍等十几秒后，在两个调试页面上，sw.js都会消失/停止了运行</p><p><img src="https://i.loli.net/2017/08/11/598d45b36a053.png" alt="关闭localhost后 sw 停止了运行"></p><p>我们再直接打开localhost，打开控制台，发现只有<code>Registration succeeded.</code>，而没有了test，再看两个调试页面，发现sw.js依然没有运行</p><p><img src="https://i.loli.net/2017/08/11/598d498dc090f.png" alt="重新再次打开页面 sw 没有运行"></p><p>让我们关闭这个localhost，将 sw.js 改写如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Yet Another sw.js'</span>);</span><br></pre></td></tr></table></figure><p>保存后，打开localhost</p><p><img src="https://i.loli.net/2017/08/11/598d4b2ce1e1e.png" alt="第一次改写sw.js"></p><p>我们刚才对 SW 完成了一次更新，发现他注册 handler 只会注册一次，接下来我们对 SW 的生命周期与运行周期进行探索，看看他在打开网页时，会不会触发生命周期。</p><p>然后我们再对 sw.js 进行重写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'install'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'activate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关闭localhost，等待sw停止运行或者deactivate它后再打开localhost，控制台显示出了<code>install</code>和<code>activate</code></p><p><img src="https://i.loli.net/2017/08/11/598d4b85023f5.png" alt="改写sw.js 加入生命周期"></p><p>再次关闭 localhost ，等待 sw 停止运行再打开 localhost ，控制台上只有 registration succeeded</p><p><img src="https://i.loli.net/2017/08/11/598d498dc090f.png" alt="重新再次打开页面 sw 没有运行"></p><p>很明显，SW 的生命周期的事件也只会触发一次，只是相对于他第一次下载后。</p><p>更新SW的机制可以在MDN上的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#恢复失败的请求" target="_blank" rel="noopener">#更新你的Service Worker</a> 这章看到，但这仅仅几行文字，而且比较绕口，我认为这其实是SW自身的工作周期，或者说是运行机制</p><p>于是在W3C Working Draft找到了Service Worker的<a href="https://www.w3.org/TR/service-workers-1/#service-worker-lifetime" target="_blank" rel="noopener">Lifetime定义</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The lifetime of a service worker is tied to the execution lifetime of events and not references held by service worker clients to the ServiceWorker object.</span><br><span class="line"></span><br><span class="line">A user agent may terminate service workers at any time it:</span><br><span class="line"></span><br><span class="line">- Has no event to handle.</span><br><span class="line">- Detects abnormal operation: such as infinite loops and tasks exceeding imposed time limits (if any) while handling the events.</span><br></pre></td></tr></table></figure><p>于是我觉得SW的工作周期结合上边的表现可以由下边的图来表示</p><p><img src="https://i.loli.net/2017/08/11/598d4e045ebfe.png" alt="SW 工作周期"></p><p>其实图里有一点不对的是，sw 的第一次运行并不一定是网页关闭才结束的，根据标准来的话，只要 sw 没有 event 需要 handle ，sw 的工作进程都可以结束，只是 Chrome 下是如此运行的。</p><p>另外需要一提的是因为工作线程结束了，因此在外边的变量不一定还保持着之前结束前的状态，所以不要写出如下的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可能为1，也可能是2</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>SW 是一个事件驱动型Worker，本质上，它是个Worker，工作在 worker context，所以没有访问 DOM 的权限</p><p>如果他要和window进行一些操作的话，与web worker类似，需要使用postMessage这样的方法来传递信息，在window里才能进行DOM操作</p><p>SW 是个Event bus，他的几个运行周期的事件，是专门为缓存与推送量身打造的（install事件和push事件），因此他的扩展性也非常好，以后如果有更多需求只需添加事件即可（比如chrome实现了sync事件是为了弥补离线时从本地到服务器post的不好体验），它将我们对资源拉的需求（对服务器的请求资源，对服务器的轮询），隐形转换为了推（本地缓存资源代码控制缓存，统一服务器推送）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近讨论 PWA 的好多啊，PWA 中有个非常重要的角色是 Service Worker 。刚写这篇文章的时候粗心一看，把现在发的 Working Draft 的发布时间以为就是 Service Worker 的发布时间，被棕神挑刺啦。spec 仓库的第一个 commit 是 2013 年 2 月 7 日，W3C 发第一个 Service Worker 的 public working draft 是 2014 年 5 月 8 日，第一个实现 Service Worker 的是 Chrome 40 （2015 年 1 月 21 日）&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>交叉编译原版某不可描述程序为梅林某停更插件续命</title>
    <link href="https://blog.xingoxu.com//2017/08/cross-compile-55-libev/"/>
    <id>https://blog.xingoxu.com//2017/08/cross-compile-55-libev/</id>
    <published>2017-08-07T06:41:43.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Forked from <a href="http://telegra.ph/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%8E%9F%E7%89%88shadowsocks%E4%B8%BAkoolshare%E6%A2%85%E6%9E%97ss%E6%8F%92%E4%BB%B6%E7%BB%AD%E5%91%BD-08-07" target="_blank" rel="noopener">原文 and 非自审查版</a></p></blockquote><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol><li>ubuntu 16.04</li><li><a href="https://github.com/RMerl/asuswrt-merlin" target="_blank" rel="noopener">原版梅林源码</a></li><li>55-libev 源码</li></ol><a id="more"></a><h1 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h1><p>解包梅林 55 插件发现，基本都是脚本，核心都是调用 55-redir ，因此猜测 55-redir 为原版 55 ，只需要更新原版 55 ，并在前端进行相应修改，便能对其续命</p><h2 id="ubuntu-16-04"><a href="#ubuntu-16-04" class="headerlink" title="ubuntu 16.04"></a>ubuntu 16.04</h2><p>不是很了解 linux，但是应该只要能够运行 arm-linux-gcc 的 linux 发行版都可以，但我在 ubuntu 16.04 下实验成功，因此这里写 ubuntu 16.04，当然 docker 是可以的（因为我就是在 macos 下用的 docker）</p><h2 id="原版梅林源码"><a href="#原版梅林源码" class="headerlink" title="原版梅林源码"></a>原版梅林源码</h2><p>虽然是 koolshare 改版固件，但其还是合并了梅林的代码，因此可以使用梅林的交叉编译工具链</p><p>下载时，注意对应相对的梅林版本号，可以看一下固件发布时的说明</p><p>梅林的交叉编译工具链在梅林源码 <code>release/src-rt-6.x.4708/toolchains/hndtools-arm-linux-2.6.36-uclibc-4.5.3</code>，release 下应该是固件版本的不同，但几个固件版本下的 toolchains 均指向这个文件夹，应该是 toolchains 没有改变过</p><h2 id="55-libev-源码"><a href="#55-libev-源码" class="headerlink" title="55-libev 源码"></a>55-libev 源码</h2><p>不解释</p><h1 id="炼丹编译"><a href="#炼丹编译" class="headerlink" title="炼丹编译"></a>炼丹编译</h1><h2 id="镜像准备与-arm-linux-gcc"><a href="#镜像准备与-arm-linux-gcc" class="headerlink" title="镜像准备与 arm-linux-gcc"></a>镜像准备与 arm-linux-gcc</h2><p>ubuntu 首先需要安装一些编译工具，如果对系统有洁癖的，推荐使用docker，我使用了别人写好的 DockerFile 的镜像</p><blockquote><p><a href="https://github.com/mritd/dockerfile/tree/master/asuswrt-merlin-build" target="_blank" rel="noopener">Asuswrt Merlin 固件交叉编译环境</a></p></blockquote><p>启动并挂载源码，运行 <code>docker exec -it container-name zsh</code></p><p>进入容器后尝试运行 <code>arm-linux-gcc</code></p><p>如果出现 <code>arm-linux-gcc: no input files</code> 说明正常，进行下一步</p><p>如果出现 其他，请检查路径，权限，否则等下编译出来的可能是 ubuntu 的 55 （我之前编译时，解压后arm-linux-gcc没有运行权限，于是没法编译，给了权限就可以了）</p><h2 id="编译-55-依赖与-55"><a href="#编译-55-依赖与-55" class="headerlink" title="编译 55 依赖与 55"></a>编译 55 依赖与 55</h2><p>编译 55 还有一些依赖需要安装，以下过程参阅</p><blockquote><p><a href="https://haoutil.com/topic/cross-compile-shadowsocks-libev" target="_blank" rel="noopener">交叉编译55-libev</a></p></blockquote><p>需要编译 <code>mbedTLS</code>、<code>pcre</code>、<code>libsodium</code>、<code>libev</code>、<code>libudns</code></p><p>按照原博文的编译后，最后编译 55 时死活没有检测到编译了libudns，怕是编译后文件夹没有添加到 <code>PATH</code> 中，当然刚才的博文里还提供了一键编译脚本，但那个一键编译脚本中判断参数的部分在ubuntu里报错，于是我就去了，直接写死环境 <code>arm-linux</code> 即可</p><p>fork了一下  </p><script src="https://gist.github.com/xingoxu/a9dc40df528c57c792ee72f1409a6ebb.js"></script><p>编译过程大约需要持续 5-10 分钟</p><p><img src="https://i.loli.net/2017/08/07/5987eac266528.png" alt="编译开始"></p><p><img src="https://i.loli.net/2017/08/07/5987f6bf102a1.png" alt="编译成功"></p><p>使用一键脚本编译的话，在 <code>dists/55-libev/bin</code> 中拿到 <code>ss-redir</code>，将他scp到路由器上，执行 <code>ss-redir -v</code></p><p><img src="https://i.loli.net/2017/08/07/5987e533d41aa.jpg" alt="编译成功后运行ss-redir -v"></p><p>出现以上则为成功</p><h1 id="替换原插件并自行打包"><a href="#替换原插件并自行打包" class="headerlink" title="替换原插件并自行打包"></a>替换原插件并自行打包</h1><p>Fork原插件repo</p><p><code>base=shadowsocks</code></p><p><code>./ss/ssconfig.sh</code> 中将地址更换成自己的repo可以使用自动更新</p><p><code>./version</code> 第一行是版本号  第二行是 tar.gz 的 hash值</p><p><code>./bin</code> 55 的各种二进制执行文件，可以将刚才编译出来的东西都覆盖进来</p><p><code>./webs/Main_Ss_Content.asp</code> 前端界面，加加密方式都在这里添加</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Forked from &lt;a href=&quot;http://telegra.ph/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%8E%9F%E7%89%88shadowsocks%E4%B8%BAkoolshare%E6%A2%85%E6%9E%97ss%E6%8F%92%E4%BB%B6%E7%BB%AD%E5%91%BD-08-07&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文 and 非自审查版&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;ubuntu 16.04&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RMerl/asuswrt-merlin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原版梅林源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;55-libev 源码&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 野良神圣地巡礼</title>
    <link href="https://blog.xingoxu.com//2017/06/noragami-seichijunrei/"/>
    <id>https://blog.xingoxu.com//2017/06/noragami-seichijunrei/</id>
    <published>2017-06-04T05:28:41.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<p>上个月人生的第一次出国以及第一次赴日去了东京，巡了君名和野良神还有一些四月的圣地，回来后一直在<del>忙</del>（忙着玩塞尔达和p5），当然工作也是挺多的挺烦的，于是今天稍稍有那么点空闲时间整理一下</p><p>时间还算比较充裕，就把第一季和ARAGOTO那些印象比较深的巡了，另外野良神和其他几个动画搞了个圣地巡礼的app，大多数地点在那个上边也有标注，app的名字叫「舞台めぐり」<br><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/59339ee10d3e0.jpg" alt="ARAGOTO EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/59339ee32e9ad.jpg" alt="ARAGOTO EP07"></div><br><div class="clear-float img-caption">西新宿</div><p>这边正好在修路，没法搞到很好的角度</p><link rel="stylesheet" type="text/css" href="/css/seichi.css"><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a3f92feb9.jpg" alt="ARAGOTO EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a3ff26b98.jpg" alt="ARAGOTO EP07"></div><br><div class="clear-float img-caption">刚才那张的对面</div><a id="more"></a><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a6f83ad8c.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a6fa247b8.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">新宿駅南改札口后边的通道</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a7ebb1901.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a7ed97a44.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">湯島天満宮</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a91bbabdf.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933a91d66d0c.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">東京メトロ湯島駅</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa0149fc8.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa02a5912.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">湯島天満宮入口</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa3de6da4.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aa3f9776c.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">湯島天満宮入口 近距离</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ab1c37646.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ab1e204ef.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">上野公园科技馆门口</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aaf4d4ec3.jpg" alt="无印 EP10"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933aaf683a6a.jpg" alt="无印 EP10"></div><br><div class="clear-float img-caption">上野公园</div>至此，东京市中心结束<br><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933acd05887f.jpg" alt="无印 EP02"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933acd1ef0bf.jpg" alt="无印 EP02"></div><br><div class="clear-float img-caption">大泉学園駅</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ad61024a7.jpg" alt="无印 EP01"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933ad61e63c8.jpg" alt="无印 EP01"></div><br><div class="clear-float img-caption">大泉学園駅</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af4346583.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af455f606.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">大泉学園駅ホーム</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af51ea015.jpg" alt="无印 EP03"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933af53b0456.jpg" alt="无印 EP03"></div><br><div class="clear-float img-caption">大泉学園駅ホーム</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0cd9e364.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0cfc86ed.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">練馬 梨の花公園 附近的通路</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0f56bf05.jpg" alt="无印 EP05"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b0f7ece2c.jpg" alt="无印 EP05"></div><br><div class="clear-float img-caption">練馬 梨の花公園 附近的通路</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b15a367e6.jpg" alt="无印 EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b15bb00e7.jpg" alt="无印 EP07"></div><br><div class="clear-float img-caption">練馬 梨の花公園</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b1ab4d835.jpg" alt="无印 EP07"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b1ac8c0c3.jpg" alt="无印 EP07"></div><br><div class="clear-float img-caption">練馬 梨の花公園</div><p><br></p><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b33ea643d.jpg" alt="无印 EP04"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34072305.jpg" alt="无印 EP04"></div><br><div class="clear-float img-caption">石神井公園内的一家店 小福家的店</div>因为这家店不让拍照，只能远远拍一张表示来过了<br><br><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34dcc77c.jpg" alt="无印 EP02"></div><div class="pull-left img"><img src="https://ooo.0o0.ooo/2017/06/04/5933b34ff1170.jpg" alt="无印 EP02"></div><br><div class="clear-float img-caption">石神井公園去駅的散步小路</div><p>还有君名的，等七月bd发售了再截图整理吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月人生的第一次出国以及第一次赴日去了东京，巡了君名和野良神还有一些四月的圣地，回来后一直在&lt;del&gt;忙&lt;/del&gt;（忙着玩塞尔达和p5），当然工作也是挺多的挺烦的，于是今天稍稍有那么点空闲时间整理一下&lt;/p&gt;
&lt;p&gt;时间还算比较充裕，就把第一季和ARAGOTO那些印象比较深的巡了，另外野良神和其他几个动画搞了个圣地巡礼的app，大多数地点在那个上边也有标注，app的名字叫「舞台めぐり」&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/59339ee10d3e0.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/59339ee32e9ad.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;西新宿&lt;/div&gt;

&lt;p&gt;这边正好在修路，没法搞到很好的角度&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/5933a3f92feb9.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/04/5933a3ff26b98.jpg&quot; alt=&quot;ARAGOTO EP07&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;clear-float img-caption&quot;&gt;刚才那张的对面&lt;/div&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>寿屋 李小狼 1/7</title>
    <link href="https://blog.xingoxu.com//2017/04/kotobukiya-syaoran/"/>
    <id>https://blog.xingoxu.com//2017/04/kotobukiya-syaoran/</id>
    <published>2017-04-16T06:57:56.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://bgm.tv/character/6527" target="_blank" rel="noopener">bgm 人物介绍</a></p><p><a href="http://myfigurecollection.net/item/236142" target="_blank" rel="noopener">MyFigureCollection.net</a></p><p><a href="https://www.amazon.co.jp/dp/B00QUQ431K" target="_blank" rel="noopener">Amazon.co.jp</a></p></blockquote><p>コトブキヤ ARTFX J カードキャプターさくら 李小狼 1/7 スケール PVC 製 塗装済み完成品フィギュア</p><p>壽屋</p><a id="more"></a><p>「見つけた。『クロウカード』の気配だ。」</p><p>壽屋『カードキャプターさくら』フィギュアシリーズ第二弾!<br>今でも絶大な人気を誇る名作『カードキャプターさくら』より、「李小狼」が ARTFX J シリーズで登場!</p><p>男性、女性共に幅広い支持を持つ人気キャラクター「李小狼」を立体化。<br>CLAMP のイラストを元に、戦闘用の装束を身にまとった姿を再現致しました。<br>凛々しさの中に年相応のあどけなさが垣間見える表情や、装束を翻した大胆なポージングに加え、小狼の羅針盤をモチーフにしたベースが作品の世界観をより一層引き立てます。</p><p>コトブキヤ ARTFX J「カードキャプターさくら」シリーズ第二弾。<br>圧倒的なクオリティを是非お手に取ってお確かめください。</p><p>售价： ¥11,000</p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f301d5e00f7.jpg" alt="与盒对比"></p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30ddac0986.jpg" alt="总览1"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e257c5c8.jpg" alt="总览2"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e27b49cf.jpg" alt="总览3"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f30e32c9af8.jpg" alt="总览4"></p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107cec352.jpg" alt="正脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107c747a6.jpg" alt="侧脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107be0a0a.jpg" alt="左侧脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107b9413b.jpg" alt="右侧脸"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107c6dad5.jpg" alt="半侧脸-脖子"></p><p>最喜欢的是脖子下方的白色里边的衣服，也是做得非常的精细</p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f3107b567f2.jpg" alt="剑"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>非常精致的手办，很棒</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bgm.tv/character/6527&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bgm 人物介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myfigurecollection.net/item/236142&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyFigureCollection.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B00QUQ431K&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コトブキヤ ARTFX J カードキャプターさくら 李小狼 1/7 スケール PVC 製 塗装済み完成品フィギュア&lt;/p&gt;
&lt;p&gt;壽屋&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
  <entry>
    <title>UC 厂 百夜优一郎</title>
    <link href="https://blog.xingoxu.com//2017/04/uc-hyakuya-yuichiro/"/>
    <id>https://blog.xingoxu.com//2017/04/uc-hyakuya-yuichiro/</id>
    <published>2017-04-15T16:03:42.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://bgm.tv/character/28623" target="_blank" rel="noopener">bgm 人物介绍</a></p><p><a href="http://myfigurecollection.net/item/286361" target="_blank" rel="noopener">MyFigureCollection.net</a></p><p><a href="https://www.amazon.co.jp/dp/B017AT19HQ" target="_blank" rel="noopener">Amazon.co.jp</a></p></blockquote><p>mensHdge technical statue No.21 終わりのセラフ 百夜優一郎 ノンスケール ATBC-PVC 製 塗装済みフィギュア</p><p>ユニオンクリエイティブ</p><a id="more"></a><p>「その人間の醜さに怯えながら死ね 吸血鬼」</p><p>『終わりのセラフ』より百夜優一郎が立体化! ・マントは着脱可能!</p><p>[セット内容] ・本体 ・台座</p><p>附赠一张与手办姿势一致的相卡</p><p>售价 ¥9,074</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2374f069b2.jpg" alt="与盒对比"></p><p>三角底座</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://ooo.0o0.ooo/2017/04/15/58f239fe0be6b.jpg" alt="总览1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23a55beba4.jpg" alt="总览2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ac6ce866.jpg" alt="总览3"></p><p>披风可脱</p><p>脱下披风</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ba8ebf06.jpg" alt="脱下披风1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c179335b.jpg" alt="脱下披风2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c369b509.jpg" alt="脱下披风3"></p><h1 id="细节展示"><a href="#细节展示" class="headerlink" title="细节展示"></a>细节展示</h1><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24015f0a78.jpg" alt="腿1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f240bd21aec.jpg" alt="腿2"></p><p><img src="https://ooo.0o0.ooo/2017/04/16/58f24387309b9.jpg" alt="腿3"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23ab70c206.jpg" alt="腿4"></p><p>小优的腿非常细长，还原的特别棒</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2410eebc55.jpg" alt="剑"></p><p>剑的颜色很棒，细节还是比较到位的</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24198865cf.jpg" alt="正脸1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f242ec38660.jpg" alt="正脸2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2432996026.jpg" alt="正脸3"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2418710169.jpg" alt="侧脸1"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f2437a5df8c.jpg" alt="侧脸2"></p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f24202c7096.jpg" alt="侧脸3"></p><p>脸的还原度还是比较高的，也不错，虽然头发在有些角度看上去有些奇怪，总体还是不错</p><p><img src="https://ooo.0o0.ooo/2017/04/15/58f23c9853de4.jpg" alt="缺点"></p><p>身上，衣服上的细节均或多或少有所变形 有一种崩坏的感觉，最明显的比如腰带，但每个细节还是有做，勉强过得去吧</p><p>腰带下方的衣服颜色有很奇怪的痕迹</p><p>披风的固定不牢固，容易松动，图上就是松动了的披风</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还是一个可以入的手办，只是这个性价比略低，史老师做工感觉要比小优好很多，只比小优贵1000</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bgm.tv/character/28623&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bgm 人物介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myfigurecollection.net/item/286361&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyFigureCollection.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/B017AT19HQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Amazon.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mensHdge technical statue No.21 終わりのセラフ 百夜優一郎 ノンスケール ATBC-PVC 製 塗装済みフィギュア&lt;/p&gt;
&lt;p&gt;ユニオンクリエイティブ&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="figures" scheme="https://blog.xingoxu.com/categories/ACG/figures/"/>
    
    
  </entry>
  
  <entry>
    <title>谈一谈 surface pro 4 和 macbook pro 2016</title>
    <link href="https://blog.xingoxu.com//2017/04/macbook-and-surface/"/>
    <id>https://blog.xingoxu.com//2017/04/macbook-and-surface/</id>
    <published>2017-04-13T09:11:22.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<p>前年12月入手的surface pro 4，去年11月入手的mbp，都是第一时间下单的，所以其实很早就想做一个对比，或者说在拿到sp4之后就想写一个感受，只是一直没有时间去想这些事情</p><p>此文结论先写在前面：</p><blockquote><p>web开发，请选择 macOS与macbook pro</p></blockquote><a id="more"></a><h1 id="上两张购买图"><a href="#上两张购买图" class="headerlink" title="上两张购买图"></a>上两张购买图</h1><p><img src="https://ooo.0o0.ooo/2017/04/11/58ec53869fecd.png" alt="apple订单"></p><p><img src="https://ooo.0o0.ooo/2017/04/11/58ec5386c1a70.png" alt="微软订单"></p><h1 id="谈一谈sp4的感受"><a href="#谈一谈sp4的感受" class="headerlink" title="谈一谈sp4的感受"></a>谈一谈sp4的感受</h1><blockquote><p>性能不错，总体比普通笔记本好一点</p></blockquote><p>下面细讲</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><ol><li>很潮</li><li>很好看</li><li>很薄</li><li>很轻便</li></ol><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ol><li>六代低压i7很快，个人感觉比我的三代i5快很多</li><li>屏幕颜色很棒</li><li>炉石可以在小屏幕上直接玩，非常少的时候会掉帧，其他60帧运行</li><li>ow试过，低画质1920*1080 30-40帧左右</li><li>windows hello 识别进系统很好用！</li></ol><p>我觉得他并不是一台游戏机，所以我没有看中它的显卡，所以3 4我只是非常偶然的用过一次，就不再用了，还是不要指望显卡太多比较好</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="背后支架-键盘盖"><a href="#背后支架-键盘盖" class="headerlink" title="背后支架 键盘盖"></a>背后支架 键盘盖</h3><p>听说这是拿过专利的，<strong>但是</strong>当你把它当普通笔记本想在地铁上，公交车上，想在腿上写点什么，sp4就嘲笑你的大腿短，我是要保持一个如何的姿势才能看到屏幕</p><p><img src="https://ooo.0o0.ooo/2017/04/11/58ec58709c7b5.png" alt="背后支架示意图1"></p><p>还有</p><p>我想在桌上用sp4画画，然后非常尴尬，sp4最大角度听说是150度左右，但是在桌上画画，你想要的角度正好是150-180度之间，于是你就怎么都觉得手很不爽，还不如wacom，后边带翅膀的键盘🙄</p><p><img src="https://ooo.0o0.ooo/2017/04/11/58ec59e30ce82.png" alt="背后支架示意图1"></p><h3 id="笔"><a href="#笔" class="headerlink" title="笔"></a>笔</h3><ol><li>延迟很大</li><li>在玻璃上写字不准</li></ol><p>延迟很大，我用onenote都有感觉慢，用ps就更明显了，下笔经常停顿，用画图则没有这种感觉，当然也没有了笔压</p><p>不准，因为我从来没写过这么丑的字，要写好字花很长时间，没有真笔写得好，再加上延迟，科科</p><p>还有一些老生常谈的问题，大家都知道</p><ol><li>散热</li><li>续航 </li><li>系统 </li><li>休眠</li></ol><h3 id="散热"><a href="#散热" class="headerlink" title="散热"></a>散热</h3><p>不要说使用很激烈了，莫名其妙的转风扇，莫名其妙的又不转风扇，不是很懂，开个音乐开个ps就转了，热倒也就算了，就是太吵了</p><h3 id="续航"><a href="#续航" class="headerlink" title="续航"></a>续航</h3><p>最多4小时，别听微软xjb吹了</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>win10小问题非常多，且不说开发环境的问题，开机键盘完全不能用，要等实足两分钟，有时莫名其妙卡住（冻住），得等一会又突然好了</p><p>高分屏支持又很差，很多软件外接显示器的字体大小和你单独在surface上看的大小又不一样，每次得设置，又或者是根本没法设置</p><p>没有键盘盖基本不能打字，什么屏幕键盘啊，难用的一笔</p><h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><p>有问题 非常大的问题，几次说修好了，几次触发了我内心的阴影，合盖风扇不停转最后电池用光了，正确的休眠方式，把键盘盖拿掉按电源键休眠，基本没有问题</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以综上所述我觉得他比普通笔记本来说并没有提升什么太多，而且屏幕也不怎么大够用，微软画的饼还没有实现，so what，不如把这点钱拿去炒股（笑）</p><p>也千万别想着什么边走边画，这种场景，不存在的，你可能需要的，就只是一台笔记本</p><h1 id="谈一谈mbp的感受"><a href="#谈一谈mbp的感受" class="headerlink" title="谈一谈mbp的感受"></a>谈一谈mbp的感受</h1><blockquote><p>开发很棒</p></blockquote><p>下面细讲</p><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><h3 id="外观-1"><a href="#外观-1" class="headerlink" title="外观"></a>外观</h3><p>手感很好，包括键盘，触摸板是广受好评，老生常谈，非常棒<br>新的几个特性touchbar 指纹解锁什么的，虽说touchbar用的不多，但是也还算中规中矩，不差</p><h3 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h3><ol><li>其实也算是低压i5，但也没有慢到哪里去，总之开发很棒</li><li>屏幕很好</li></ol><h3 id="系统-1"><a href="#系统-1" class="headerlink" title="系统"></a>系统</h3><p>我觉得mbp最好的就是macOS在搭建开发环境上的便利，brew，命令行什么的，在windows下你要在各种窗口里切换，怎么地，打开一个bash最快也要右键点git bash，都是模拟环境，macOS上就是自己设定了快捷键之后一按就可以敲命令了</p><p>安装环境也是非常的快，基本不会看到windows的那种莫名其妙的错误提示，出错了，看着提示就能知道发生了什么，一般也就是sudo 的事情</p><p>更可贵的是，我在macOS下成功make了，我在centos里从来就没有make成功过东西</p><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ol><li>很多好用的软件都要买，虽然可以用破解，但是不提倡，而且可能会有病毒</li><li>外接显示器是灾难，需要设置一番，会有一些不便利（我这里插拔显示器需要重新关闭打开一次显示器）</li><li>系统还是有一些小问题的，但无伤大雅，没有微软那么严重，碰到过几次五国，碰到过花屏，但都是茶余饭后的消遣罢了，真的，比较少看见</li></ol><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>没有对比就没有伤害</p><h2 id="续航-1"><a href="#续航-1" class="headerlink" title="续航"></a>续航</h2><p>sp4 4小时<br>mbp 5小时 吧 </p><h2 id="重量"><a href="#重量" class="headerlink" title="重量"></a>重量</h2><p>sp4更轻  如果mbp有sp4的重量就好了，mbp两块铁皮实在是重（也没有那么重，就是对比起来那个轻的比较多）</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>sp4 一个usb 一个dp 一个磁吸口<br>mbp 四个type-c</p><p>很多人喷mbp的接口都是type-c的，太激进</p><p>事实上mbp 除非单输出外接显示器，否则你是不需要鼠标的，然后现在基本也不用u盘传文件了，那么基本来说，这些口其实对你来说根本没有什么关系</p><p>于是我现在四个口都在干嘛呢</p><p>一个接显示器，usb-c to dp，一定记住买显示器千万不要买hdmi的，很坑，当然我既然已经用了surface过了，当然就不会再用hdmi显示器了</p><p>一个接外置网卡和3个usb的hub，有时会连手机充电，主要是网卡，内网传文件会比较快（家里有NAS），正常来说用5Ghz的无线就非常足够了</p><p>一个接电源</p><p>在这个接口问题上，每个人都有每个人的想法用途，我就罗列一下自己的需求</p><h2 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h2><p>最后一个综合对比就是网上大家经常说的生产力</p><p>一个是office，office在mac上也有，现在也是office 365，mac上也是更新很快，touchbar一出微软也跟进，设计上和win也是基本同一，要说不方便，可能刚上手会有一些问题，但是就一个码农的角度来说，我用的office的功能区别不大，稍微熟悉一下还是马上就能get到的</p><p>另一个是QQ问题，QQ虽然没有win上功能那么多，基本功能也都满足了，还没有win的那么臃肿，特别是包括5.4.1版本之前 都没有撤回功能哦，个人觉得并不烂</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>从我个人的需求来说，感觉mbp要比surface好用很多，我觉得系统上的便利比surface那些硬件上的便利要好很多很多很多，而且surface非常不稳定</p><p>最后上一张图表示一下自己的工作环境</p><p><img src="https://ooo.0o0.ooo/2017/04/13/58ef41b98caec.jpg" alt="工作环境"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前年12月入手的surface pro 4，去年11月入手的mbp，都是第一时间下单的，所以其实很早就想做一个对比，或者说在拿到sp4之后就想写一个感受，只是一直没有时间去想这些事情&lt;/p&gt;
&lt;p&gt;此文结论先写在前面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;web开发，请选择 macOS与macbook pro&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>探究/使用webpack的AMD</title>
    <link href="https://blog.xingoxu.com//2017/01/webpack-amd/"/>
    <id>https://blog.xingoxu.com//2017/01/webpack-amd/</id>
    <published>2017-01-22T09:13:19.000Z</published>
    <updated>2018-06-17T11:49:12.894Z</updated>
    
    <content type="html"><![CDATA[<p>什么？webpack出2了？</p><p>刚用了小半年的webpack就又要重头学过了？</p><p><img src="https://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_thumb.png" alt="摊手"></p><p>那么试试吧？先试试改造一下blog？</p><p>我擦？怎么用requirejs？</p><a id="more"></a><h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>也不算熟悉webpack吧，1的时候用vue-cli bootstrap了萌购的几个手机页面，虽说其实完全不用关心构建这一块，只需要改改路径就可以了，但闲下来的时候好奇心也是会驱动自己看看别人是怎么写的构建文件的，不过看别人写的构建文件，又稍微看了点其他网站的webpack的有关教程，自己倒也是没有想到AMD这件事情，也对webpack并不怎么熟悉，而且1的文档也实在是狗屎的可以，就停留在会用，会模仿着套路写</p><p>前两天2出了，看看这新的文档站，手边又正好不怎么忙，那么看看</p><p>官方风格不错，也有很好的introduction和concept的解释，重新学习了一下官方对loaders的定义，不过2刚出，文档站里也有很多问题，比如loaders现在叫rules但文档里还是loaders等这样的小问题</p><p>不过这些字眼看多了，小困难轻松克服，再看看migrate，貌似并没有什么大改动，想给公司项目试试，不过看vue-cli官方生成的构建文件里的loaders是动态生成的，于是先暂时放一放。那先试试自己的blog，改造一下，打开主题的main.js，马上反应过来一个问题，靠，我以前用AMD写的</p><h1 id="import-requirejs-from-‘requirejs’"><a href="#import-requirejs-from-‘requirejs’" class="headerlink" title="import requirejs from ‘requirejs’;"></a>import requirejs from ‘requirejs’;</h1><p>前情提要结束，回到正题，webpack里怎么用上AMD？</p><p>直觉告诉我，import requirejs from ‘requirejs’;</p><p>好吧，在写下这行代码前，我去requirejs的官网看了<a href="http://requirejs.org/docs/node.html#3" target="_blank" rel="noopener">文档</a><br>看了，也没讲到构建工具，但就写法来说，都是一样的，那么试试</p><p>哦对了，忘记贴我的构建文件了，不过也没东西，就指定了入口和出口</p><script src="https://gist.github.com/xingoxu/9c73872db5fce038b939ce0cce1e7c01.js"></script><p>然后 <code>npm install webpack --save-dev &amp;&amp; npm install requirejs --save</code> </p><p>然后入口点app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requirejs <span class="keyword">from</span> <span class="string">'requirejs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</span><br><span class="line"></span><br><span class="line">requirejs([<span class="string">'./async.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">asyncModule</span>) </span>&#123;</span><br><span class="line">  asyncModule.init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>async.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define([],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    init()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"I'm in async.js"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/01/22/58849f426e077.png" alt="import requirejs"></p><p>好的，无情报错，unexpected character，打开看了一下这个r.js，第一行显示是注释，但在webpack却报错了，看来是姿势不对</p><h1 id="搜索一下"><a href="#搜索一下" class="headerlink" title="搜索一下"></a>搜索一下</h1><p>那么在webpack中怎么用上AMD呢，搜了webpack 1的<a href="http://webpack.github.io/docs/api-in-modules.html#require-amd" target="_blank" rel="noopener">文档</a></p><p>哦？原来直接就能写？<br>试试，去掉import，直接require看看？async.js不变，app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'./async.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">asyncModule</span>) </span>&#123;</span><br><span class="line">  asyncModule.init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时出现<br><img src="https://ooo.0o0.ooo/2017/01/22/5884a3812a1e9.png" alt="直接require并传函数进去"></p><p>发现我们的async被打包成了0.bundle.js</p><p>让我们打开浏览器看看<br><img src="https://ooo.0o0.ooo/2017/01/22/5884a3e560cd8.png" alt="浏览器成功运行1"></p><p>看Network和源文件，的确是异步</p><p><img src="https://ooo.0o0.ooo/2017/01/22/5884a41a3dfa0.png" alt="Network 1"><br><img src="https://ooo.0o0.ooo/2017/01/22/5884a43180145.png" alt="Source 1"></p><h1 id="require-ensure"><a href="#require-ensure" class="headerlink" title="require.ensure"></a>require.ensure</h1><p>在2的文档中，并没有找到这个require的异步用法，倒是找到了migrating from v1的require.ensure，通过这个 找到了2的一个文档，疑似发现了webpack的AMD<a href="https://webpack.js.org/guides/code-splitting-require/#require-ensure-" target="_blank" rel="noopener">文档</a></p><p>webpack 2把这个api单独拿出来讲了一整页是有它的道理<br>一个是，webpack2把这个现在这样的引用 也看成引用一个chunk，只不过是异步引用<br>另一个是，没有了以前1的require AMD用法，可能将来会弃用？</p><p>从文档上也得知了，用这样的api，可以对chunkname进行指定，那我们来试试，app.js改成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./async.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> asyncModule = <span class="built_in">require</span>(<span class="string">'./async.js'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(asyncModule); <span class="comment">//等下再说</span></span><br><span class="line">  asyncModule.init();</span><br><span class="line">&#125;,<span class="string">'async'</span>);</span><br></pre></td></tr></table></figure><p>浏览器控制台还是正常输出了</p><p>但我们输出的文件还是0.bundle.js啊</p><p><img src="https://ooo.0o0.ooo/2017/01/22/5884a7e1b5563.png" alt="使用require.ensure bash中 1"></p><p>眉头一紧，觉得事情有蹊跷</p><p>赶紧搜索一下2的文档，<a href="https://webpack.js.org/configuration/output/#output-filename" target="_blank" rel="noopener">找到filename</a></p><blockquote><p>Note this options does not affect output files for on-demand-loaded chunks. For these files the <strong>output.chunkFilename</strong> option is used. It also doesn’t affect files created by loaders. For these files see loader options.</p></blockquote><p>好的，去看<a href="https://webpack.js.org/configuration/output/#output-chunkfilename" target="_blank" rel="noopener">chunkFileName</a></p><p>原来如此，给config加上这么一条<code>chunkFilename: &#39;[name].js&#39;</code></p><p>现在再构建一次试试</p><p><img src="https://ooo.0o0.ooo/2017/01/22/5884aab1c137b.png" alt="使用require.ensure bash中 2"></p><h1 id="AMD模块的写法"><a href="#AMD模块的写法" class="headerlink" title="AMD模块的写法"></a>AMD模块的写法</h1><h2 id="es6的exports写法"><a href="#es6的exports写法" class="headerlink" title="es6的exports写法"></a>es6的exports写法</h2><p>让我们改变一下AMD模块的写法，之前我们是用标准的AMD define，那么ES6的exports写法会怎么样呢？</p><p>app.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'passed'</span>, <span class="string">"I'm in app.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./async.src.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> asyncModule = <span class="built_in">require</span>(<span class="string">'./async.js'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(asyncModule);</span><br><span class="line">  asyncModule.init();</span><br><span class="line">&#125;,<span class="string">'async'</span>);</span><br></pre></td></tr></table></figure><p>async.src.js （刚才不当心取名async覆盖掉了原来的async.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm in async.js"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器报错<br><img src="https://ooo.0o0.ooo/2017/01/22/5884ada8243fb.png" alt="浏览器报错"></p><p>这个问题webpack没有给我们答案，不过我在 stackoverflow 的解释中看到了<a href="http://stackoverflow.com/questions/33704714/cant-require-default-export-value-in-babel-6-x" target="_blank" rel="noopener">答案</a></p><h2 id="自动检测的写法"><a href="#自动检测的写法" class="headerlink" title="自动检测的写法"></a>自动检测的写法</h2><p>有很多插件是这种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define([<span class="string">'jquery'</span>], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        factory(root[<span class="string">'jQuery'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log($);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm in async.js !"</span>);</span><br><span class="line">    <span class="comment">//$.fn.anything = funciton()&#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>ok，webpack也能帮你amd使用amd，cmd使用cmd，不过cmd也不会走下面那条factory的路哦</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用require.ensure进行AMD获取模块<br>对于AMD模块，最好使用AMD模块标准编写，因为还能在define时写好前置模块，让webpack自动帮我们处理打包</p><p><del>2的文档写的仍然非常有水准</del> 黑科技满满</p><h1 id="Why-AMD？"><a href="#Why-AMD？" class="headerlink" title="Why AMD？"></a>Why AMD？</h1><p>有同学说 用了webpack，就不需要用AMD了啊，确实，一个页面只有一个css，一个js，依赖由webpack处理了，script要炸也是一起炸，不存在一个模块加载了另一个模块没有加载的情况，也不存在AMD的应用场景了啊</p><p>确实，在处理模块之间的关系，webpack已经全部处理了，那么业务呢？</p><p>业务总有扭曲的时候，老大如果今天跟你说：“前端同学们，我们手机和电脑要做两套逻辑”，那么我们现在，除了让 nginx/后端语言 根据userAgent返回两套网页，有了新的选择</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么？webpack出2了？&lt;/p&gt;
&lt;p&gt;刚用了小半年的webpack就又要重头学过了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_thumb.png&quot; alt=&quot;摊手&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么试试吧？先试试改造一下blog？&lt;/p&gt;
&lt;p&gt;我擦？怎么用requirejs？&lt;/p&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 いやほい</title>
    <link href="https://blog.xingoxu.com//2017/01/2017-iyahoi/"/>
    <id>https://blog.xingoxu.com//2017/01/2017-iyahoi/</id>
    <published>2017-01-03T11:55:45.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<p>时间匆匆流逝，告别2016年，回看2015年，这一年也算是小有成就感</p><a id="more"></a><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>狂点技术点的一年</p><p>年初还在学习Android的我，抵不住朋友的 誘う ，决定学习一下JavaScript，把红书看完之后觉得找到了真爱语言，非常喜欢JavaScript的开放与灵活，于是放弃Android转前端</p><p>2月~3月决定对blog现有主题进行修改来上手对HTML/CSS/JS的学习</p><p>3月底~6月初 帮助学校完成简单的学生管理与成绩抓取</p><p>6月底 开始萌购实习</p><p>7月 协助完成<a href="http://rennigou.jp" target="_blank" rel="noopener">萌购任你购</a>前台页面</p><p>8月上 完成简单活动页面<a href="http://www.030buy.net/special/2016.8.9.hh/" target="_blank" rel="noopener">螺旋警戒线</a></p><p>8月下 完成<a href="http://works.xingoxu.com/buy-calc/" target="_blank" rel="noopener">日系剁手网站价格综合对比工具</a> <a href="http://weibo.com/1804320382/E51AYqS9e?type=like" target="_blank" rel="noopener">微博</a>获得9333转发，2446个赞，阅读量273.3万</p><p>9月 完成单页面活动页面<a href="http://www.030buy.net/special/2016.9.6.qwqxs/" target="_blank" rel="noopener">轻文轻小说</a></p><p>10月~12月 独立完成萌购App内所有内嵌网页</p><p>12月上 为<a href="https://user.030buy.net/login" target="_blank" rel="noopener">登录页</a>添加Canvas2D动画</p><p>从技术上，感觉自己是进步非常大，然而技术日新月异，长远的看，可能也只是从0到1的过程，并没有到100，所以还要接着加油！</p><h1 id="娱乐上"><a href="#娱乐上" class="headerlink" title="娱乐上"></a>娱乐上</h1><p>5月帝都玩 <a href="https://goo.gl/photos/QebSkK5bAivkywjL7" target="_blank" rel="noopener">Google Photos</a></p><p>6月陪肉排玩了一天</p><p>7月和监督一起去了独立游戏大会</p><p>12月和监督一起cp19 <a href="https://goo.gl/photos/hrwJoTuMnZd7cXgD7" target="_blank" rel="noopener">Google Photos</a></p><p><a href="https://bgm.tv/award/2016/xingo" target="_blank" rel="noopener">bangumi 2016</a></p><h1 id="新的一年"><a href="#新的一年" class="headerlink" title="新的一年"></a>新的一年</h1><p>顺利完成4月底的旅行</p><p>顺利毕业</p><p>至少考出N3，希望能考出N2</p><p>希望在技术上能有新的进步 rxJs，后端也好，可视化前端也好，游戏开发也好</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间匆匆流逝，告别2016年，回看2015年，这一年也算是小有成就感&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>改进多说</title>
    <link href="https://blog.xingoxu.com//2016/12/improve-duoshuo/"/>
    <id>https://blog.xingoxu.com//2016/12/improve-duoshuo/</id>
    <published>2016-12-27T07:34:24.000Z</published>
    <updated>2018-06-17T11:49:12.890Z</updated>
    
    <content type="html"><![CDATA[<ul><li>增加用户尾巴</li><li>头像/表情转换成https</li></ul><a id="more"></a><h1 id="多说现有问题"><a href="#多说现有问题" class="headerlink" title="多说现有问题"></a>多说现有问题</h1><ol><li>稳定版不能切换表情</li><li>dev版不能收起表情框</li><li>新浪头像/QQ头像/新浪表情 国内已经支持https了，多说没有及时跟进</li></ol><p>另外多说记录了ua，在用户返回的数据里也给到了发评论的ua，想利用这个ua，展现我们睾贵的操作系统/浏览器/硬件等</p><p>相比不能切换表情，不能收起表情框稍微好那么一点，于是我决定将多说替换成开发版，而且对标准版增加UA以及https的教程网上也有很多，我也进行了参考，我自修改的<a href="https://github.com/xingoxu/improve-duoshuo/blob/b3985130b8fe565e5d47185edcc12c5efc4022ac/embed.js" target="_blank" rel="noopener">0.32版improve-duoshuo</a>就是使用标准版的多说进行了显示UA，只是没有替换https，如果你需要对标准版进行动手术，欢迎你参考我的这份，也欢迎你参考本篇blog的Reference</p><p><strong>以下内容使用多说dev版进行</strong></p><p>首先格式化多说，使其稍微好看一点</p><h1 id="添加https"><a href="#添加https" class="headerlink" title="添加https"></a>添加https</h1><h2 id="用户头像https"><a href="#用户头像https" class="headerlink" title="用户头像https"></a>用户头像https</h2><p>参考<a href="https://blog.nofile.cc/posts/2016/11/26/note-duoshuo-https.html" target="_blank" rel="noopener">多说插件支持站点 https</a>，在<a href="https://github.com/xingoxu/improve-duoshuo/commit/0c4a3456784e98f5a47ef0a46f5a5f4e3165f66a" target="_blank" rel="noopener">第2634行</a>替换a字符串</p><h2 id="替换表情https"><a href="#替换表情https" class="headerlink" title="替换表情https"></a>替换表情https</h2><p>点击表情后，Network中出现</p><p><img src="https://ooo.0o0.ooo/2016/12/27/586228e6c8f9e.png" alt="点击表情后，DevTools-Network"></p><p>格式化后发现</p><p><img src="https://ooo.0o0.ooo/2016/12/27/586229a1c0dae.png" alt="格式化jsonp"></p><p>证明前缀写死在js中，搜索一下<code>http://</code>，发现和新浪有关的只有<a href="https://github.com/xingoxu/improve-duoshuo/commit/0c4a3456784e98f5a47ef0a46f5a5f4e3165f66a" target="_blank" rel="noopener">第3333行</a>，修改成https后，问题解决</p><h1 id="增加ua"><a href="#增加ua" class="headerlink" title="增加ua"></a>增加ua</h1><p>dev版多说格式化后找到<code>ds-comment-header</code> <code>ds-user-name</code> 附近，发现全部改成了react风格的绑定</p><p>尝试旧逻辑不变，直接插入<code>{ userTail.showAdmin(author) }</code>和 <code>{ userTail.showUA(comment) }</code> </p><blockquote><p>userTail是之前0.32的全局helper</p></blockquote><p>发现逻辑正常，证明模板可以读取全局变量，但输出字符被escape了</p><p>那就只能老老实实的改成模板形式了</p><p>代码参见<a href="https://github.com/xingoxu/improve-duoshuo/commit/81106ba23d110f0e866e627799fc95d6bec6bc76" target="_blank" rel="noopener">旧2869行/新2847行</a>，没啥技术含量</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://blog.nofile.cc/posts/2016/11/26/note-duoshuo-https.html" target="_blank" rel="noopener">多说插件支持站点 https</a></p></blockquote><blockquote><p><a href="http://ssk.91txh.com/209" target="_blank" rel="noopener">多说回复后显示浏览器及操作系统信息（Useragent）</a></p></blockquote><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>多说这几个礼拜天天炸，时不时500，看来是要跑路啊，赶紧趁跑路前上一波https装个逼（雾</p><p>也欢迎对我的<a href="https://github.com/xingoxu/improve-duoshuo" target="_blank" rel="noopener">improve-duoshuo</a>提issue提pr</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;增加用户尾巴&lt;/li&gt;
&lt;li&gt;头像/表情转换成https&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
</feed>
