<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xingo&#39;s private plot</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xingoxu.com/"/>
  <updated>2020-07-09T04:27:52.519Z</updated>
  <id>https://blog.xingoxu.com/</id>
  
  <author>
    <name>xingo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js 路径大小写的坑</title>
    <link href="https://blog.xingoxu.com/2020/07/macos-node-require-path-case-insensitive/"/>
    <id>https://blog.xingoxu.com/2020/07/macos-node-require-path-case-insensitive/</id>
    <published>2020-07-01T10:59:40.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>大多数前端开发同学都用的是 macOS ，然而 macOS 上文件名不区分大小写，因此你不能在同一个文件夹下同时创建 <code>package.json</code> 和 <code>packagE.json</code>。</p><p>这个细节很小，因为大家不是英语母语，现在又越来越依靠 intelliSense 补全文件路径，在这个事情上翻跟头会比较少，就算翻了跟头也很容易忘记。</p><a id="more"></a><p>大多数情况下你在这个上边会跌进的一个坑是</p><h1 id="Linux-下部署时找不到-Module"><a href="#Linux-下部署时找不到-Module" class="headerlink" title="Linux 下部署时找不到 Module"></a>Linux 下部署时找不到 Module</h1><p>也许是之前哪位高人用记事本写的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">require</span>(<span class="string">'./List'</span>);</span><br></pre></td></tr></table></figure><p>然鹅现实生活中你的 List 的文件名是<code>list.js</code></p><p>完了，你就得在你的代码库里把 List 统统改成 list</p><p>所以这其实是个很小的问题也很容易解决就是浪费了一点时间。</p><p>但我碰到一个浪费了我一个下午的问题，也促使我写了这篇其实没有什么技术含量的笔记</p><h1 id="require-39-a-js-39-require-39-A-js-39"><a href="#require-39-a-js-39-require-39-A-js-39" class="headerlink" title="require(&#39;./a.js&#39;) !== require(&#39;./A.js&#39;)"></a><code>require(&#39;./a.js&#39;) !== require(&#39;./A.js&#39;)</code></h1><p>前因后果：</p><p>在用 TypeORM 写增删改查的时候，新引进了一张表，于是挂上去调试。发现一直报找不到表的错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeORM EntityMetadataNotFound: No metadata for &quot;***&quot; was found</span><br></pre></td></tr></table></figure><p>就是这个错。</p><p>反反复复确认了表已经挂到了 option 下边。</p><p>怎么办，只能进 node_modules 下边直接改源码调试了（</p><p>进去 <code>console.log</code> 三下五除二，发现表确实挂载了，然而</p><p><a href="https://github.com/typeorm/typeorm/blob/master/src/connection/Connection.ts" target="_blank" rel="noopener">https://github.com/typeorm/typeorm/blob/master/src/connection/Connection.ts</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets entity metadata for the given entity class or schema name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getMetadata(target: <span class="built_in">Function</span>|EntitySchema&lt;<span class="built_in">any</span>&gt;|<span class="built_in">string</span>): EntityMetadata &#123;</span><br><span class="line">    <span class="keyword">const</span> metadata = <span class="keyword">this</span>.findMetadata(target);</span><br><span class="line">    <span class="keyword">if</span> (!metadata)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EntityMetadataNotFoundError(target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds exist entity metadata by the given entity class, target name or table name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> findMetadata(target: <span class="built_in">Function</span>|EntitySchema&lt;<span class="built_in">any</span>&gt;|<span class="built_in">string</span>): EntityMetadata|<span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.entityMetadatas.find(<span class="function"><span class="params">metadata</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(metadata.target, target, metadata.target === target) <span class="comment">// ←ここ</span></span><br><span class="line">        <span class="keyword">if</span> (metadata.target === target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> EntitySchema) &#123;</span><br><span class="line">            <span class="keyword">return</span> metadata.name === target.options.name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"string"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.indexOf(<span class="string">"."</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> metadata.tablePath === target;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> metadata.name === target || metadata.tableName === target;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左边右边都是 Function xxx，但是却不完全相等。</p><p>于是我开始疯狂比较两边 import 的代码，最后才发现，import 的时候因为 Class 名和文件名一样，所以一个用的是 intelliSense 自动补全，一个是我复制粘贴的 Class 名，但是 Class 名是首字母大写的，但文件名不是。</p><p>那么为什么同样的文件，引用的时候文件名不同，引用会不同呢？</p><p><a href="https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L936" target="_blank" rel="noopener">https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L936</a></p><p>我们都知道 Node.js 的 require 只会引用一次，究其原因是因为 Node.js 会把模块缓存到内存里，以便快速重复调用。<br>我们在上边的源代码可以看到，Node.js 会使用 filename 进行缓存，而这里的 filename 是你 require 的文件名 + 绝对路径。</p><p>因此 Node.js 会认为这是两个模块，就会重复 require 两次，但是如果是在 windows 下，filename 会被 path.resolve 给 toLowerCase 成一个模块，在 Linux 下，又会因为大小写敏感而找不到模块，也就是只会在 macOS 上出现的一个问题。</p><p>所幸不是到部署才发现的问题，也所幸这个只会在调试的时候出现问题。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数前端开发同学都用的是 macOS ，然而 macOS 上文件名不区分大小写，因此你不能在同一个文件夹下同时创建 &lt;code&gt;package.json&lt;/code&gt; 和 &lt;code&gt;packagE.json&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个细节很小，因为大家不是英语母语，现在又越来越依靠 intelliSense 补全文件路径，在这个事情上翻跟头会比较少，就算翻了跟头也很容易忘记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js 依存モジュールのファイルはケースセンシティブの件</title>
    <link href="https://blog.xingoxu.com/ja/2020/07/macos-node-require-path-case-insensitive/"/>
    <id>https://blog.xingoxu.com/ja/2020/07/macos-node-require-path-case-insensitive/</id>
    <published>2020-07-01T10:59:40.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>皆さん開発の時ほとんど macOS を使ってるんでしょうか、だが macOS のファイル名はケースインセンシティブ（大小文字は区別しない）。つまり同じフォルダ下に <code>package.json</code> と <code>packagE.json</code> は一緒にいられない。</p><p>ほとんどの人は知ってるかにもかかわらず、あまりこれに注意を払ってないのではないかなと思って、だってみんなの母語は英語ではないし、インポートの際は intelliSense も結構賢く補足してもらってるので、あんまりここに転んだことはないと思います。転んでもすぐ忘れるんだろう。</p><a id="more"></a><p>よく会った問題はこれです👇</p><h1 id="Linux-でデプロイ時にモジュールは見つからない"><a href="#Linux-でデプロイ時にモジュールは見つからない" class="headerlink" title="Linux でデプロイ時にモジュールは見つからない"></a>Linux でデプロイ時にモジュールは見つからない</h1><p>多分誰がメモ帳で書いたコード</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">require</span>(<span class="string">'./List'</span>);</span><br></pre></td></tr></table></figure><p>でも List のファイル名は<code>list.js</code>、</p><p>そしたらすべての List を list に変えなきゃいけない。</p><p>細かい点で解決には難しくないが、時間ちょっと無駄しましたね。</p><p>でも今日話したいのは僕の午後をまるごと無駄しましてこの技術的な内容あまりない記事を書くことになったこれです👇</p><h1 id="require-39-a-js-39-require-39-A-js-39"><a href="#require-39-a-js-39-require-39-A-js-39" class="headerlink" title="require(&#39;./a.js&#39;) !== require(&#39;./A.js&#39;)"></a><code>require(&#39;./a.js&#39;) !== require(&#39;./A.js&#39;)</code></h1><p>TypeORM を使ってる時新しいスキーマ（テーブル）を入れたが、デバッグの時ずーとそのスキーマが見つからないエラーに怒られて</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeORM EntityMetadataNotFound: No metadata for &quot;***&quot; was found</span><br></pre></td></tr></table></figure><p>option に何度も確認しまして確かにスキーマは入ってるが。</p><p>どうしようと思って、 node_modules に入って直接ソースコードを改ざんしてデバッグすることになった。</p><p><code>console.log</code> でスキーマはたしかに入ってますが、</p><p><a href="https://github.com/typeorm/typeorm/blob/master/src/connection/Connection.ts" target="_blank" rel="noopener">https://github.com/typeorm/typeorm/blob/master/src/connection/Connection.ts</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets entity metadata for the given entity class or schema name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getMetadata(target: <span class="built_in">Function</span>|EntitySchema&lt;<span class="built_in">any</span>&gt;|<span class="built_in">string</span>): EntityMetadata &#123;</span><br><span class="line">    <span class="keyword">const</span> metadata = <span class="keyword">this</span>.findMetadata(target);</span><br><span class="line">    <span class="keyword">if</span> (!metadata)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EntityMetadataNotFoundError(target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds exist entity metadata by the given entity class, target name or table name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> findMetadata(target: <span class="built_in">Function</span>|EntitySchema&lt;<span class="built_in">any</span>&gt;|<span class="built_in">string</span>): EntityMetadata|<span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.entityMetadatas.find(<span class="function"><span class="params">metadata</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(metadata.target, target, metadata.target === target) <span class="comment">// ←ここ</span></span><br><span class="line">        <span class="keyword">if</span> (metadata.target === target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> EntitySchema) &#123;</span><br><span class="line">            <span class="keyword">return</span> metadata.name === target.options.name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"string"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.indexOf(<span class="string">"."</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> metadata.tablePath === target;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> metadata.name === target || metadata.tableName === target;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左と右は同じく <code>Function xxx</code> がリファレンスは同じではない。</p><p>これは事件ですね。んでファイル両方の import を一行一行で確認して、最終的に import のパスに問題を見つかった。<br>自分がインポートした際に、一つは Class 名をそのままコピペしたが、もう一つはファイル名でしたが、Class 名は PascalCase が、ファイル名は camelCase でした。</p><p>そしたらなぜ同じファイルで使う時ファイル名が違ったらリファレンスは違うになりますか？</p><p>Node.js のソースコードに見てきました。<br><a href="https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L936" target="_blank" rel="noopener">https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L936</a></p><p>Node.js の require は一回しか実行しない、その原因は Node.js はモジュールをメモリに保存して、その後コードの中で require したらすぐ使えるという意図で設計されました。<br>ソースコードからも見えて、Node.js はファイル名でキャッシュしますが、ここの filename は require のファイル名 + 絶対パス。</p><p>なので Node.js は２つモジュールとみなすが、windows だと、 filename は path.resolve で toLowerCase で同じファイル名にするが、Linux だとケースセンシティブでモジュール見つからないで弾かれますが、この問題は macOS しか出ませんね。</p><p>ま、デプロイまで問題出るよりラッキーですね。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;皆さん開発の時ほとんど macOS を使ってるんでしょうか、だが macOS のファイル名はケースインセンシティブ（大小文字は区別しない）。つまり同じフォルダ下に &lt;code&gt;package.json&lt;/code&gt; と &lt;code&gt;packagE.json&lt;/code&gt; は一緒にいられない。&lt;/p&gt;
&lt;p&gt;ほとんどの人は知ってるかにもかかわらず、あまりこれに注意を払ってないのではないかなと思って、だってみんなの母語は英語ではないし、インポートの際は intelliSense も結構賢く補足してもらってるので、あんまりここに転んだことはないと思います。転んでもすぐ忘れるんだろう。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是 CLS？在浏览器和 Node.js 中实现 CLS</title>
    <link href="https://blog.xingoxu.com/2020/06/cls/"/>
    <id>https://blog.xingoxu.com/2020/06/cls/</id>
    <published>2020-06-29T11:48:05.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>在写 Flutter 和 Serverless 查资料的时候，在某个博客里看到了 CLS 的相关内容，感觉其实是个很不错的软件工程的解耦想法，于是保存了下来。今天回过头来仔细研究了一下并决定给自己留下一些记录。</p><a id="more"></a><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>无论是在浏览器，还是在服务端 Node.js，我们经常会碰到打点上报，追踪错误这样的需求，即使不对特定用户进行追踪，我们也会给某个 session 分配唯一 ID 以在 log / analytics 界面能够看到用户的完整行为，对于产品分析与错误再现是十分重要的。</p><p>假设我们需要写一个 error handling ，这个 error handling 会 hold 住所有的请求的异常，我们如何分辨哪个错误是哪个请求造成的呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.error(<span class="string">"Error occured"</span>, req);</span><br></pre></td></tr></table></figure><p>那么这个 error handling 就跟 req 耦合了</p><p>假设我们需要追踪某个错误，是哪个 user 产生的，又或者是哪个错误，user 干了什么导致的？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">"User has done xxx"</span>, user);</span><br><span class="line">log.error(<span class="string">"Error occured by"</span>, user);</span><br></pre></td></tr></table></figure><p>于是跟 user 也深深的耦合了。</p><p>单单这样的例子好像没有什么大问题，不过多两个参数嘛。但写过大型应用的同学，后期不断增加功能的时候，你一定写过那种长长的参数列表的函数，又或者是好几百行的一个函数，实在是太不优雅，重构起来也太难。</p><h1 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h1><p>函数如果是同步的，那么我们可以直接挂到全局变量（某个对象）下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> global = &#123;&#125;;</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  global.event = event;</span><br><span class="line">  log(<span class="string">"button clicked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global.event, ...args); <span class="comment">// &#123; x: xxx, y: xxx, target: xxx &#125; 'button clicked'</span></span><br><span class="line">  <span class="comment">// other logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然这在异步中行不通</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> global = &#123;&#125;;</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  global.event = event;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    log(<span class="string">"button clicked"</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global.event, ...args);</span><br><span class="line">  <span class="comment">// other logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现打印的 global.event 全变成了同一个对象</p><p>我们需要能够从始至终在同一个异步调用链中一个持续化的存储，<br>又或者是我们需要能够辨识当前的异步函数他的唯一辨识符，以和同样内容的异步函数但并不是本身的运行的这个作区分。</p><h1 id="CLS-登场"><a href="#CLS-登场" class="headerlink" title="CLS 登场"></a>CLS 登场</h1><p>在其他语言中，有一个叫做 <a href="https://en.wikipedia.org/wiki/Thread-local_storage" target="_blank" rel="noopener">Thread-local storage</a> 的东西，然而在 Javascript 中，并不存在多线程这种概念（相对而言，Web Worker 等与主进程并不冲突），于是 CLS ，Continuation-local Storage，一个类似于 TLS，得名于函数式编程中的 Continuation-passing style，旨在链式函数调用过程中维护一个持久的数据。</p><h2 id="浏览器的解决方案-Zone-js"><a href="#浏览器的解决方案-Zone-js" class="headerlink" title="浏览器的解决方案 Zone.js"></a>浏览器的解决方案 Zone.js</h2><p>先看看是怎么解决的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  Zone.current.fork(&#123;</span><br><span class="line">    name: <span class="string">'clickZone'</span>,</span><br><span class="line">    properties: &#123;</span><br><span class="line">      event</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).run(</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      log(<span class="string">'button clicked'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global.event, ...args);</span><br><span class="line">  <span class="comment">// other logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/angular/angular/tree/master/packages/zone.js" target="_blank" rel="noopener"><code>Zone.js</code></a> 是 Angular 2.0 引入的，当然它的功能不只是提供 CLS，他还有其他相关 API。</p><h3 id="一个并不完美的解决方案"><a href="#一个并不完美的解决方案" class="headerlink" title="一个并不完美的解决方案"></a>一个并不完美的解决方案</h3><p>我们试着思考一下， <code>Zone.js</code> 是如何做到这些的。如果浏览器没有提供异步函数运行环境的唯一标识，那么只剩下唯一的一条路，改写所有会产生异步的函数，包装了一层后也就能加入hook了。</p><p>我尝试自己写了一下</p><!-- https://gist.github.com/xingoxu/58f8f7faa83732ec922fcd38299f3283 --><script src="https://gist.github.com/xingoxu/58f8f7faa83732ec922fcd38299f3283.js"></script><p>看似好像没什么问题，不过</p><p><a href="https://github.com/angular/angular/issues/31730" target="_blank" rel="noopener">angular with tsconfig target ES2017 async/await will not work with zone.js</a></p><h4 id="浏览器中现在并没有完美的解决方案"><a href="#浏览器中现在并没有完美的解决方案" class="headerlink" title="浏览器中现在并没有完美的解决方案"></a>浏览器中现在并没有完美的解决方案</h4><p>我们可以做个实验，在 console 里敲下如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _promise = <span class="built_in">Promise</span>;</span><br><span class="line"><span class="built_in">Promise</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'rewrite by ourselves'</span>) &#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// rewrite by ourselves</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">test() <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">test() <span class="keyword">instanceof</span> _promise</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>() &#125;</span><br><span class="line"></span><br><span class="line">test() <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// rewrite by ourselves</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">test() <span class="keyword">instanceof</span> _promise</span><br><span class="line"><span class="comment">// rewrite by ourselves</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>也就是说浏览器会把 async 函数的返回值用原生 Promise 包装一层，因为是原生语法，也就无法 hook async 函数。<br>当然我们可以用 transpiler 把 async 函数改写成 generator 或者 Promise，不过这并不代表是完美的。</p><h2 id="Node-js-的解决方案-async-hooks"><a href="#Node-js-的解决方案-async-hooks" class="headerlink" title="Node.js 的解决方案 async_hooks"></a>Node.js 的解决方案 async_hooks</h2><p>Node.js 8后出现的 <code>async_hook</code> 模块，到了版本14仍然没有移去他身上的 <code>Experimental</code> 状态。以及在刚出现的时候是有性能问题的讨论（3年后的今天虽然不知道性能怎么样，不过既然没有移去 <code>Experimental</code> 的标签，如果追求高性能的话还是应该保持观望）</p><blockquote><p>虽然没有移去 Experimental 的状态，但是稳定性应该没有什么太大问题，大量的 Node.js 的追踪库 / APM 依赖着 async_hooks 模块，如果有重大问题，应该会及时上报并修复</p></blockquote><p>对于性能问题，不展开篇幅讨论，取决于你是否愿意花一点点的性能下降来换取代码的低耦合。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>async_hooks 提供了一个 createHook 的函数，他可以帮助你监听异步函数的运行时创建以及退出等状态，并且附带了这个运行时的唯一辨识id，我们可以简单地用它来创建一个 CLS。</p><!-- https://gist.github.com/xingoxu/590e7f99658ea160b1f77cdb4e956637 --><script src="https://gist.github.com/xingoxu/590e7f99658ea160b1f77cdb4e956637.js"></script><h3 id="Node-js-13-后的官方实现"><a href="#Node-js-13-后的官方实现" class="headerlink" title="Node.js 13 后的官方实现"></a>Node.js 13 后的官方实现</h3><p>在社区中已经有了那么多优秀实现的前提下，Node.js 13.10 后新增了一个 <code>AsyncLocalStorage</code> 的 API</p><p><a href="https://nodejs.org/api/async_hooks.html#async_hooks_class_asynclocalstorage" target="_blank" rel="noopener">https://nodejs.org/api/async_hooks.html#async_hooks_class_asynclocalstorage</a></p><p>实际上他已经是开箱可用的 CLS 了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  AsyncLocalStorage,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"async_hooks"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> session = <span class="keyword">new</span> AsyncLocalStorage();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">_req, _res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> userId = <span class="built_in">Math</span>.random() * <span class="number">1000</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(userId);</span><br><span class="line">  session.enterWith(&#123; userId &#125;);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;, userId);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">_req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userId &#125; = session.getStore();</span><br><span class="line">  res.json(&#123; userId &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Listen 3000"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="number">0</span>).forEach(<span class="function">(<span class="params">_, i</span>) =&gt;</span> fetch(<span class="string">'http://localhost:3000/test'</span>, &#123;</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="built_in">console</span>.log))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Listen 3000</span></span><br><span class="line"><span class="comment">// 355.9573987560112</span></span><br><span class="line"><span class="comment">// 548.3773445851497</span></span><br><span class="line"><span class="comment">// 716.2437886469793</span></span><br><span class="line"><span class="comment">// 109.84756385607896</span></span><br><span class="line"><span class="comment">// 907.6261832949347</span></span><br><span class="line"><span class="comment">// 308.34659685842513</span></span><br><span class="line"><span class="comment">// 407.0145853469649</span></span><br><span class="line"><span class="comment">// 525.820449114568</span></span><br><span class="line"><span class="comment">// 76.91502437038133</span></span><br><span class="line"><span class="comment">// 997.8611964598299</span></span><br><span class="line"><span class="comment">// &#123; userId: 76.91502437038133 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 109.84756385607896 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 308.34659685842513 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 355.9573987560112 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 407.0145853469649 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 525.820449114568 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 548.3773445851497 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 716.2437886469793 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 907.6261832949347 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 997.8611964598299 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://juejin.im/post/5e23f89f6fb9a02fcf18e24a" target="_blank" rel="noopener">Javascript与CLS（Continuation-local Storage）</a></li><li><a href="https://zhuanlan.zhihu.com/p/50835920" target="_blank" rel="noopener">翻阅源码后，我终于理解了Zone.js</a></li><li><a href="https://shanyue.tech/node/cls.html#async-hooks" target="_blank" rel="noopener">使用 async_hooks 监听异步资源的生命周期</a></li><li><a href="https://blog.xizhibei.me/2018/04/07/distributed-tracing/" target="_blank" rel="noopener">分布式追踪</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写 Flutter 和 Serverless 查资料的时候，在某个博客里看到了 CLS 的相关内容，感觉其实是个很不错的软件工程的解耦想法，于是保存了下来。今天回过头来仔细研究了一下并决定给自己留下一些记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>CLS とは？ブラウザとNode.jsで CLS を実装してみます</title>
    <link href="https://blog.xingoxu.com/ja/2020/06/cls/"/>
    <id>https://blog.xingoxu.com/ja/2020/06/cls/</id>
    <published>2020-06-29T11:48:05.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>資料を調べる際に、CLS の存在を知りました。エンジニアリングで結構いいデカップリングのやり方と感じまして、シェアしたいと思います。</p><a id="more"></a><h1 id="シチュエーション"><a href="#シチュエーション" class="headerlink" title="シチュエーション"></a>シチュエーション</h1><p>ブラウザか、サーバーのNode.jsか、どっちでもエラーハンドリング、ユーザートラッキングのニーズは日常茶飯事。例えユーザーを特定しなくても、id をつけて、ユーザーの行為を追跡して、エラーの再現にも重要し、プロダクトの改善にも役たちます。</p><p>仮に今エラーハンドリングを書こうと思って、このエラーハンドリングはすべてのエラーを処理しますが、どのリクエストから生み出したエラーを知りたいと</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.error(<span class="string">"Error occured"</span>, req);</span><br></pre></td></tr></table></figure><p>このハンドリングは req と結合しちゃった</p><p>仮に今このエラーどのユーザーから出たエラー、ユーザーが何をやったかを知りたいと</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">"User has done xxx"</span>, user);</span><br><span class="line">log.error(<span class="string">"Error occured by"</span>, user);</span><br></pre></td></tr></table></figure><p>ユーザーとも結合しちゃった</p><p>この２つの例は一見するとそんなに大きいな問題ではなさそう、ただ２つのパラメータが増えただけじゃ。<br>だけど、大型サービスを作る時、どんどん増えた機能に対して、関数の引数と関数の長さと共にどんどん伸びちゃって気持ち悪くてリファクタリングしようとしょうもないこと、少なくありませんでしょうか？</p><h1 id="解決してみよう"><a href="#解決してみよう" class="headerlink" title="解決してみよう"></a>解決してみよう</h1><p>関数が同期のであれば、グローバルで変数につけたらいいじゃんー</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> global = &#123;&#125;;</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  global.event = event;</span><br><span class="line">  log(<span class="string">"button clicked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global.event, ...args); <span class="comment">// &#123; x: xxx, y: xxx, target: xxx &#125; 'button clicked'</span></span><br><span class="line">  <span class="comment">// other logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>だが、非同期関数のであれば</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> global = &#123;&#125;;</span><br><span class="line">$(<span class="string">"button"</span>).click(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  global.event = event;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    log(<span class="string">"button clicked"</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global.event, ...args);</span><br><span class="line">  <span class="comment">// other logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すべての global.event は同じイベントになちゃった(´；ω；｀)！それはだめですね。</p><p>我々必要なのは非同期呼び出しチェーンに最初から最後まで持続的なストレージ、<br>もしくは今走ってる非同期関数の呼び出しの唯一の識別子。</p><h1 id="CLS-が登場"><a href="#CLS-が登場" class="headerlink" title="CLS が登場"></a>CLS が登場</h1><p>他の言語では、<a href="https://en.wikipedia.org/wiki/Thread-local_storage" target="_blank" rel="noopener">Thread-local storage</a>と呼ばれるものがあります。が JavaScript はマルチスレッドはありません（Web Workerなどはメインと関係ないし、自分でもマルチスレッドしない）。CLS という名前は TLS みたいに関数型プログラミングからの Continuation-passing style 名前をもらって、Continuation-local Storage、そのチェインの呼び出しの中で持続的データストレージをメンテナンスする。</p><h2 id="ブラウザの解決-Zone-js"><a href="#ブラウザの解決-Zone-js" class="headerlink" title="ブラウザの解決 Zone.js"></a>ブラウザの解決 Zone.js</h2><p>どうのように解決したかちょっと見てみましょう</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  Zone.current.fork(&#123;</span><br><span class="line">    name: <span class="string">'clickZone'</span>,</span><br><span class="line">    properties: &#123;</span><br><span class="line">      event</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).run(</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      log(<span class="string">'button clicked'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global.event, ...args);</span><br><span class="line">  <span class="comment">// other logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/angular/angular/tree/master/packages/zone.js" target="_blank" rel="noopener"><code>Zone.js</code></a> は Angular 2.0 から誕生したもので、もちろん他の機能も持ってる。</p><h3 id="この方法は残念なところがあります"><a href="#この方法は残念なところがあります" class="headerlink" title="この方法は残念なところがあります"></a>この方法は残念なところがあります</h3><p>考えてみましょう、 <code>Zone.js</code> はどうやってこれを実現しました。ブラウザは呼び出しに対して唯一の識別子を提供するAPIがなければ、すべての非同期関数をリライトしかできなく、そうすれば非同期が入る時と出る時 hook できて、この効果が実装できますね。</p><p>自分も書いてみました。</p><!-- https://gist.github.com/xingoxu/58f8f7faa83732ec922fcd38299f3283 --><script src="https://gist.github.com/xingoxu/58f8f7faa83732ec922fcd38299f3283.js"></script><p>また問題なさそうだけど、</p><p><a href="https://github.com/angular/angular/issues/31730" target="_blank" rel="noopener">angular with tsconfig target ES2017 async/await will not work with zone.js</a></p><h4 id="ブラウザ今では完璧の解決方法はありません"><a href="#ブラウザ今では完璧の解決方法はありません" class="headerlink" title="ブラウザ今では完璧の解決方法はありません"></a>ブラウザ今では完璧の解決方法はありません</h4><p>実験をやってみましょう、console で下のコードを打ったら、</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _promise = <span class="built_in">Promise</span>;</span><br><span class="line"><span class="built_in">Promise</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'rewrite by ourselves'</span>) &#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// rewrite by ourselves</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">test() <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">test() <span class="keyword">instanceof</span> _promise</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>() &#125;</span><br><span class="line"></span><br><span class="line">test() <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// rewrite by ourselves</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">test() <span class="keyword">instanceof</span> _promise</span><br><span class="line"><span class="comment">// rewrite by ourselves</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>ブラウザは、async 関数のリターンをネイティブの Promise で再ラッピングします。ネイティブ文法なので、async 関数はリライトできない。<br>もちろん transpiler で async 関数を generator もしくは Promise にすることは可能ですが、完璧とは言わないでしょう。</p><h2 id="Node-js-の解決-async-hooks"><a href="#Node-js-の解決-async-hooks" class="headerlink" title="Node.js の解決 async_hooks"></a>Node.js の解決 <code>async_hooks</code></h2><p>Node.js バージョン 8 以降出た <code>async_hook</code> モジュール、バージョン 14 の今でも <code>Experimental</code> ステータスから脱却してない。出たごろ性能に関しての議論もあったが、今はどうなってるかまだわからない状態ですが</p><blockquote><p>Experimental ステータスにしても安定性としては問題なさそう、大量な Node.js のトラッキング / APM が依存していて、問題があったら issue が立てられるはずです。</p></blockquote><p>性能に関する問題はここは展開しない、コードの低結合と少しパフォーマンスの低下を交換するかしないかによりますね。</p><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p><code>async_hooks</code> は <code>createHook</code> という関数を提供した、これが非同期関数のライフサイクルに hook できます、しかも唯一識別子も提供してくれますので、CLS を簡単に作れます。</p><!-- https://gist.github.com/xingoxu/590e7f99658ea160b1f77cdb4e956637 --><script src="https://gist.github.com/xingoxu/590e7f99658ea160b1f77cdb4e956637.js"></script><h3 id="Node-js-バージョン-13-からオフィシャルの実装も"><a href="#Node-js-バージョン-13-からオフィシャルの実装も" class="headerlink" title="Node.js バージョン 13 からオフィシャルの実装も"></a>Node.js バージョン 13 からオフィシャルの実装も</h3><p>コミュニティの中でたくさんの CLS ライブラリーがあった上に、Node.js 13.10 から <code>AsyncLocalStorage</code> の API がありました。</p><p><a href="https://nodejs.org/api/async_hooks.html#async_hooks_class_asynclocalstorage" target="_blank" rel="noopener">https://nodejs.org/api/async_hooks.html#async_hooks_class_asynclocalstorage</a></p><p>実はこれはすでにすぐに使える CLS です。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  AsyncLocalStorage,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"async_hooks"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> session = <span class="keyword">new</span> AsyncLocalStorage();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">_req, _res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> userId = <span class="built_in">Math</span>.random() * <span class="number">1000</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(userId);</span><br><span class="line">  session.enterWith(&#123; userId &#125;);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;, userId);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">_req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userId &#125; = session.getStore();</span><br><span class="line">  res.json(&#123; userId &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Listen 3000"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="number">0</span>).forEach(<span class="function">(<span class="params">_, i</span>) =&gt;</span> fetch(<span class="string">'http://localhost:3000/test'</span>, &#123;</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="built_in">console</span>.log))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Listen 3000</span></span><br><span class="line"><span class="comment">// 355.9573987560112</span></span><br><span class="line"><span class="comment">// 548.3773445851497</span></span><br><span class="line"><span class="comment">// 716.2437886469793</span></span><br><span class="line"><span class="comment">// 109.84756385607896</span></span><br><span class="line"><span class="comment">// 907.6261832949347</span></span><br><span class="line"><span class="comment">// 308.34659685842513</span></span><br><span class="line"><span class="comment">// 407.0145853469649</span></span><br><span class="line"><span class="comment">// 525.820449114568</span></span><br><span class="line"><span class="comment">// 76.91502437038133</span></span><br><span class="line"><span class="comment">// 997.8611964598299</span></span><br><span class="line"><span class="comment">// &#123; userId: 76.91502437038133 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 109.84756385607896 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 308.34659685842513 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 355.9573987560112 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 407.0145853469649 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 525.820449114568 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 548.3773445851497 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 716.2437886469793 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 907.6261832949347 &#125;</span></span><br><span class="line"><span class="comment">// &#123; userId: 997.8611964598299 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h1><ul><li><a href="https://juejin.im/post/5e23f89f6fb9a02fcf18e24a" target="_blank" rel="noopener">Javascript与CLS（Continuation-local Storage）</a></li><li><a href="https://zhuanlan.zhihu.com/p/50835920" target="_blank" rel="noopener">翻阅源码后，我终于理解了Zone.js</a></li><li><a href="https://shanyue.tech/node/cls.html#async-hooks" target="_blank" rel="noopener">使用 async_hooks 监听异步资源的生命周期</a></li><li><a href="https://blog.xizhibei.me/2018/04/07/distributed-tracing/" target="_blank" rel="noopener">分布式追踪</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;資料を調べる際に、CLS の存在を知りました。エンジニアリングで結構いいデカップリングのやり方と感じまして、シェアしたいと思います。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>用最热的Serverless，以最快的速度，写最野的JavaScript</title>
    <link href="https://blog.xingoxu.com/2020/06/try-serverless/"/>
    <id>https://blog.xingoxu.com/2020/06/try-serverless/</id>
    <published>2020-06-21T07:52:35.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>Serverless，云原生，年初到现在，我关注的好几个前端公众号和资讯号都在疯狂推这些东西，去年年底就早有耳闻，原来以为是各种活动大会组织联合云厂商在对 devops 卖票整的新技术，但热度越来越强，于是我也跃跃欲试蹭个热度</p><a id="more"></a><h1 id="Serverless-到底是什么¿"><a href="#Serverless-到底是什么¿" class="headerlink" title="Serverless 到底是什么¿"></a>Serverless 到底是什么¿</h1><p>一句话概括就是 Cloud Function + Object Storage + Cloud Database + API Gateway and more by Cloud Service Provider. 简单来说就是有个叫 serverless 的开源框架把云厂商提供的这些服务整合成了一个配置文件，后端运维统统都不要了。好处显而易见，服务弹性伸缩，价格按量收费，大多数的运维问题，你的云服务提供商统统帮你兜了，小学生也能写网站。</p><p>这么牛逼，前端可得好好学学，让后端和运维统统下岗咯？</p><h1 id="Serverless、启动！"><a href="#Serverless、启动！" class="headerlink" title="Serverless、启动！"></a>Serverless、启动！</h1><p>既然 Serverless 图的就是快，那我们自然是不能自己手动一个一个的去到云服务商那里去手动设置的咯。<br>当然你也可以这么做，只不过我的服务今天就上线，你的服务可能就要等到后天了。</p><p>Github 星星 3万个，1000万下载的 serverless npm package，<code>npm install -g serverless</code>，下载！启动！</p><p>任意位置，terminal 输入 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ serverless</span><br></pre></td></tr></table></figure><p>友好向导一步一步带你迈向 serverless 美好<del>大坑</del></p><p>进入你刚创建的项目，敲下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sls deploy</span><br></pre></td></tr></table></figure><p>点击屏幕给出的连接！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>牛逼！我们的后端服务器已经搭好了！太简单了吧！</p><blockquote><p>国内用户 serverless 自动使用腾讯云<br>以上内容其实在 <a href="https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/node/" target="_blank" rel="noopener">https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/node/</a> 都有</p></blockquote><h1 id="套个模板，快上加快"><a href="#套个模板，快上加快" class="headerlink" title="套个模板，快上加快"></a>套个模板，快上加快</h1><blockquote><p>以下内容使用 aws 进行操作</p></blockquote><p>今天我打算做一个信用卡外汇比价工具，三步搞定：</p><ol><li>抓取汇率</li><li>保存当天汇率（云函数没有状态）</li><li>前端计算比价</li></ol><p>非常适合 serverless 的初学应用</p><p>代码已经开源并上线，欢迎大家边看边 review</p><p>成品地址：<a href="https://whichcard.xingoxu.com/" target="_blank" rel="noopener">https://whichcard.xingoxu.com/</a><br>代码地址：<a href="https://github.com/xingoxu/whichcard-abroad" target="_blank" rel="noopener">https://github.com/xingoxu/whichcard-abroad</a></p><p>serverless 这个框架，还能使用 template 来创建项目，既然图的就是快，找一个现成的模板套进去，填一填就上线是不是更美滋滋</p><p>技术栈，就选 nuxt.js，开启 SSR，再加上可编程使用，妙啊</p><p>搜一搜</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverless create --template-url https://github.com/tonyfromundefined/nuxt-serverless -n whichcard-abroad</span><br></pre></td></tr></table></figure><p>创建项目后，我们编辑一下 <code>serverless.yml</code>，加上非关系型数据库相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">Resources:</span></span><br><span class="line">    <span class="attr">CurrencyTable:</span></span><br><span class="line">      <span class="attr">Type:</span> <span class="string">AWS::DynamoDB::Table</span></span><br><span class="line">      <span class="attr">Properties:</span></span><br><span class="line">        <span class="attr">TableName:</span> <span class="string">$&#123;env:DYANMODB_TABLE&#125;</span></span><br><span class="line">        <span class="attr">AttributeDefinitions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">$&#123;env:DYANMODB_PRIMARY_KEY&#125;</span></span><br><span class="line">            <span class="attr">AttributeType:</span> <span class="string">S</span></span><br><span class="line">        <span class="attr">KeySchema:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">$&#123;env:DYANMODB_PRIMARY_KEY&#125;</span></span><br><span class="line">            <span class="attr">KeyType:</span> <span class="string">HASH</span></span><br><span class="line">        <span class="attr">ProvisionedThroughput:</span></span><br><span class="line">          <span class="attr">ReadCapacityUnits:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">WriteCapacityUnits:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>数据库需要配置权限，要给运行 lambda function 的用户，也就是第一次使用 serverless 的时候让你发行的那个key所代表的用户，给他权限，那，同样在 <code>serverless.yml</code> 下加入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">provider:</span></span><br><span class="line">  <span class="attr">iamRoleStatements:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">      <span class="attr">Action:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:Query</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:Scan</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:GetItem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:PutItem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:UpdateItem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:DeleteItem</span></span><br><span class="line">      <span class="attr">Resource:</span> <span class="string">"arn:aws:dynamodb:$&#123;self:provider.region&#125;:*:table/$&#123;env:DYANMODB_TABLE&#125;"</span></span><br></pre></td></tr></table></figure><p>好了，我们服务器已经配置完了，开始编写后端</p><p>刚才用的这个模板，大多数已经搭建好了，只不过后端这里没有 typescript 支持</p><p><a href="https://github.com/xingoxu/whichcard-abroad/blob/master/tsconfig.json" target="_blank" rel="noopener"><code>tsconfig.json</code></a> 复制一份，重命名 <a href="https://github.com/xingoxu/whichcard-abroad/blob/master/tsconfig-server.json" target="_blank" rel="noopener"><code>tsconfig-server.json</code></a></p><p>配置我就不粘过来了，大家可以自己参考上边连接。</p><p>用了 typescript 之后，我得把他变成 js 后才能被 lambda function 给读取，在 <a href="https://github.com/xingoxu/whichcard-abroad/blob/master/webpack.config.js" target="_blank" rel="noopener"><code>webpack.config.js</code></a>加上 <code>ts-loader</code>。</p><h2 id="抓取汇率"><a href="#抓取汇率" class="headerlink" title="抓取汇率"></a>抓取汇率</h2><p>我们以 <a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/api/functions/visa.ts" target="_blank" rel="noopener">VISA</a> 为例，他的汇率当天公布在 <a href="https://usa.visa.com/support/consumer/travel-support/exchange-rate-calculator.html" target="_blank" rel="noopener">这个网页</a> 上</p><p>我们导入 <code>axios</code>，导入<code>cheerio</code>，三下五除二，jQuery一把梭，轻松加愉快，摸出了他的汇率</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">'cheerio'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'date-fns'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getVisaCurrency = <span class="keyword">async</span> (&#123;</span><br><span class="line">  transCurr = <span class="string">"USD"</span>,</span><br><span class="line">  billCurr = <span class="string">"JPY"</span>,</span><br><span class="line">  date</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data: htmlBody &#125; = <span class="keyword">await</span> axios.get&lt;</span><br><span class="line">    <span class="built_in">string</span></span><br><span class="line">  &gt;(</span><br><span class="line">    <span class="string">`https://usa.visa.com/support/consumer/travel-support/exchange-rate-calculator.html`</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      params: &#123;</span><br><span class="line">        amount: <span class="number">1</span>,</span><br><span class="line">        fee: <span class="string">'0.0'</span>,</span><br><span class="line">        utcConvertedDate: <span class="string">''</span>,</span><br><span class="line">        exchangedate: format(</span><br><span class="line">          date,</span><br><span class="line">          <span class="string">'MM/dd/yyyy'</span></span><br><span class="line">        ),</span><br><span class="line">        fromCurr: billCurr,</span><br><span class="line">        toCurr: transCurr,</span><br><span class="line">        submitButton:</span><br><span class="line">          <span class="string">'Calculate exchange rate'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(htmlBody);</span><br><span class="line">  <span class="keyword">const</span> $targetDOM = $(</span><br><span class="line">    <span class="string">'.converted-amount-value'</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> result = $targetDOM</span><br><span class="line">    .eq($targetDOM.length - <span class="number">2</span>)</span><br><span class="line">    .text()</span><br><span class="line">    .match(<span class="regexp">/^\d+\.\d+/</span>)![<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; getVisaCurrency &#125;;</span><br></pre></td></tr></table></figure><p>40行的代码我们就解决了战斗</p><h2 id="保存当天汇率"><a href="#保存当天汇率" class="headerlink" title="保存当天汇率"></a>保存当天汇率</h2><p>既然按需付费，那么空闲的时候云厂商势必不可能给你资源，因此云函数是无状态这点其实还是比较 make sense 的</p><p>虽然我们可以对每个请求都实时抓取一次汇率，但是这显然也太影响打开速度、用户体验了吧。</p><p>而且如果被上游发现，对方直接把 aws 一整段 ip 给封了的事情也不是没有</p><p>即使是抓取公开数据这种事情，还是静悄悄搞比较好。</p><p>直接导入 <code>aws-sdk</code>，草草几行代码就能写好保存工具函数和查询工具函数</p><p><a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/api/utils/database.ts" target="_blank" rel="noopener">源代码</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DynamoDB &#125; <span class="keyword">from</span> <span class="string">'aws-sdk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'date-fns'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DATE_FORMAT = <span class="string">'yyyy-MM-dd'</span>;</span><br><span class="line"><span class="keyword">const</span> DYANMODB_TABLE: <span class="built_in">string</span> = <span class="string">"currencyTable"</span>;</span><br><span class="line"><span class="keyword">const</span> DYANMODB_PRIMARY_KEY: <span class="built_in">string</span> = <span class="string">"currency"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamoDBClient = <span class="keyword">new</span> DynamoDB(&#123;</span><br><span class="line">  region: process.env.DYANMODB_REGION</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryFromCache = <span class="keyword">async</span> (</span><br><span class="line">  date: <span class="built_in">Date</span></span><br><span class="line">): <span class="built_in">Promise</span>&lt;DBCurrencyObject | <span class="literal">undefined</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    Count,</span><br><span class="line">    Items</span><br><span class="line">  &#125; = <span class="keyword">await</span> dynamoDBClient</span><br><span class="line">    .query(&#123;</span><br><span class="line">      TableName: DYANMODB_TABLE,</span><br><span class="line">      KeyConditionExpression: <span class="string">`#key=:dt`</span>,</span><br><span class="line">      ExpressionAttributeNames: &#123;</span><br><span class="line">        <span class="string">'#key'</span>: DYANMODB_PRIMARY_KEY</span><br><span class="line">      &#125;,</span><br><span class="line">      ExpressionAttributeValues: &#123;</span><br><span class="line">        <span class="string">':dt'</span>: &#123;</span><br><span class="line">          S: format(date, DATE_FORMAT)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .promise();</span><br><span class="line">  <span class="keyword">if</span> (Count &amp;&amp; Count == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> DyanmodbResultAdapter(</span><br><span class="line">      Items![<span class="number">0</span>]</span><br><span class="line">    ) <span class="keyword">as</span> DBCurrencyObject;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storeResult = <span class="keyword">async</span> (&#123;</span><br><span class="line">  date,</span><br><span class="line">  result,</span><br><span class="line">  billCurr,</span><br><span class="line">  transCurr,</span><br><span class="line">  brand</span><br><span class="line">&#125;): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> cacheResult = <span class="keyword">await</span> queryFromCache(</span><br><span class="line">    date</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (!cacheResult)</span><br><span class="line">    cacheResult = &#123;</span><br><span class="line">      date: format(date, DATE_FORMAT)</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!cacheResult[brand])</span><br><span class="line">    cacheResult[brand] = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!cacheResult[brand]![transCurr])</span><br><span class="line">    cacheResult[brand]![transCurr] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  cacheResult[brand]![transCurr]![</span><br><span class="line">    billCurr</span><br><span class="line">  ] = result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> dynamoDBClient</span><br><span class="line">    .updateItem(&#123;</span><br><span class="line">      Key: &#123;</span><br><span class="line">        [DYANMODB_PRIMARY_KEY]: &#123;</span><br><span class="line">          S: format(date, DATE_FORMAT)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      TableName: DYANMODB_TABLE,</span><br><span class="line">      UpdateExpression: <span class="string">`set <span class="subst">$&#123;brand&#125;</span>=:<span class="subst">$&#123;brand&#125;</span>`</span>,</span><br><span class="line">      ExpressionAttributeValues: &#123;</span><br><span class="line">        [<span class="string">`:<span class="subst">$&#123;brand&#125;</span>`</span>]: &#123;</span><br><span class="line">          M: DyanmodbRequestAdapter(</span><br><span class="line">            cacheResult[brand]!</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .promise();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; queryFromCache, storeResult &#125;;</span><br></pre></td></tr></table></figure><p><code>DyanmodbRequestAdapter</code>和<code>DyanmodbResultAdapter</code>是为了解决 dyanmodb 存储的时候符合他的sdk的递归的key（加上类型），另外在这里篇幅过长略去了一些类型定义，大家可以在源代码里查看</p><p>同时，我们不要忘记，数据在抓取/存储的过程中都有可能发生新请求，因此我们再写一个工具类把刚才的抓取函数包装一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncOnce</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">T</span> <span class="title">extends</span> (<span class="params">...args: <span class="built_in">any</span></span>) =&gt; <span class="title">Promise</span>&lt;<span class="title">any</span>&gt;</span></span><br><span class="line"><span class="function">&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  func: (</span></span></span><br><span class="line"><span class="function"><span class="params">    ...args: Parameters&lt;T&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  ) =&gt; ReturnType&lt;T&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> running: ReturnType&lt;</span><br><span class="line">    <span class="keyword">typeof</span> func</span><br><span class="line">  &gt; | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...args: Parameters&lt;<span class="keyword">typeof</span> func&gt;</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (running === <span class="literal">null</span>) &#123;</span><br><span class="line">      running = func(...args);</span><br><span class="line">      running.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        running = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> running;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端计算比价"><a href="#前端计算比价" class="headerlink" title="前端计算比价"></a>前端计算比价</h2><p>其实我们这个网站，如果没有关于帮助页面的话，就是只有一个页面的网站了。因此其实没有必要暴露 API，不过我这次为了尝试一下Nuxt.js的Programming Usage，那前端和后端就可以非常巧妙的结合在一起</p><p>我们直接在 SFC 中 import 进我们刚才写好的抓取函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; response &#125; <span class="keyword">from</span> <span class="string">'@/api/functions/currency'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> asyncData(context) &#123;</span><br><span class="line">    <span class="keyword">let</span> currencyData;</span><br><span class="line">    <span class="keyword">if</span> (process.server &amp;&amp; context) &#123;</span><br><span class="line">      currencyData = <span class="keyword">await</span> response(</span><br><span class="line">        context.req</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> axios.$<span class="keyword">get</span>(</span><br><span class="line">        '/currency',</span><br><span class="line">        &#123;</span><br><span class="line">          params: &#123; ...someParams &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      currencyData = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; currencyData &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，就算是 SSR，也不需要自己向自己发送一个 <code>/currency</code> 的请求。</p><p>如果我们没有其他页面，那么 <code>/currency</code> 的API也不用暴露，相当于把 Nuxt.js 当成了模板引擎！</p><p>写过 Express.js 等的小伙伴很清楚，一般是先生成数据，然后渲染模板，但是在这里，我们的重点是先写好前端后，导入 server 的函数，把请求丢过去拿数据。</p><p>是不是很野！（此处应该有惊叹声（哇哦好野））</p><p>剩下的写界面啊，写排序啊什么的就略过。</p><h1 id="解决一些小问题"><a href="#解决一些小问题" class="headerlink" title="解决一些小问题"></a>解决一些小问题</h1><h2 id="记得开启-extractCSS"><a href="#记得开启-extractCSS" class="headerlink" title="记得开启 extractCSS"></a>记得开启 extractCSS</h2><p>Nuxt.js 默认不开启 <code>extractCSS</code>，如果你像我一样引了一个 UI 库，还对这个 UI 库自定义了的话，那你的 HTML 可能会长到令人发指。记得在 <code>nuxt.config.js</code> 中启用哦</p><h2 id="Nuxt-js-把-aws-sdk-打包进了前端"><a href="#Nuxt-js-把-aws-sdk-打包进了前端" class="headerlink" title="Nuxt.js 把 aws-sdk 打包进了前端"></a>Nuxt.js 把 aws-sdk 打包进了前端</h2><p>我暂时还没有深入去看是 Nuxt.js 的 webpack 的问题，还是可能是 <code>vue-loader</code> 的问题（毕竟我们的宗旨是要快）</p><p>不过这个问题可以用 nuxt plugin 的方式去回避。</p><p>在 <code>plguins</code> 文件夹下创建 <a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/plugins/getData.server.ts" target="_blank" rel="noopener"><code>getData.server.ts</code></a>，</p><p>把跟 server 有关的写成一个 handler，然后挂载到 <code>Vue</code> 上也可以，<code>context</code> 上也可以，都可以，只要是个在 SFC 中可以访问到的全局方法就可以了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; response &#125; <span class="keyword">from</span> <span class="string">'@/api/functions/currency'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Context &#125; <span class="keyword">from</span> <span class="string">'@nuxt/types'</span>;</span><br><span class="line"></span><br><span class="line">Vue.$serverGetCurrency = <span class="function">(<span class="params">context: Context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> response(context.req);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后到 SFC 里把刚才 Server 的方法改成这个全局方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.server &amp;&amp; context) &#123;</span><br><span class="line">  currencyData = <span class="keyword">await</span> Vue.$serverGetCurrency(</span><br><span class="line">    context</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外 ts 定义的问题，在函数的旁边 declare 一下就没有问题了（<a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/plugins/getData.server.ts" target="_blank" rel="noopener">源代码</a>）</p><blockquote><p>记得参考 <a href="https://nuxtjs.org/guide/plugins/" target="_blank" rel="noopener">Nuxt.js Plugins</a> &amp; <a href="https://vuejs.org/v2/guide/typescript.html#Augmenting-Types-for-Use-with-Plugins" target="_blank" rel="noopener">Vue.js Augumenting Types for Use With Plugins</a></p></blockquote><h1 id="这么香？我读书少，你不要骗我"><a href="#这么香？我读书少，你不要骗我" class="headerlink" title="这么香？我读书少，你不要骗我"></a>这么香？我读书少，你不要骗我</h1><p>Serverless 本身其实并不是什么新鲜东西，云函数运行环境、对象存储、云数据库哪个都不是2019年或者2020年才出现的新东西，但他的想法解决了小微服务的上线速度问题，对刚起步的成长型企业，没有基础设施的小公司，或者是我有一个想法就差一个程序员的公司来说，是一个非常省时间省事情节约人力物力成本的选择。</p><p>不过…</p><h2 id="本地开发，云端调试¿"><a href="#本地开发，云端调试¿" class="headerlink" title="本地开发，云端调试¿"></a>本地开发，云端调试¿</h2><p>就问你怕不怕本地跑得好好的，放到云厂商那边炸了，然后调试无门！<br>为什么会这样呢，我们以 aws 为例，你有没有想过云原生是怎么处理 node_modules 这样的问题的？</p><blockquote><p><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/nodejs-package.html" target="_blank" rel="noopener">Node.js 中的 AWS Lambda 部署程序包</a></p></blockquote><p>答案是，和你的源代码一起上传！</p><p>🐂🍺了我的 aws，也就是说如果你的 node_modules 里边有依赖 native 能力的话，传上去必爆炸，而且你本地还检测不出任何问题。</p><blockquote><p>比如 <a href="https://stackoverflow.com/questions/36079438/npm-install-with-aws-lambda" target="_blank" rel="noopener">npm install with AWS Lambda - Stack Overflow</a></p></blockquote><h2 id="成本问题"><a href="#成本问题" class="headerlink" title="成本问题"></a>成本问题</h2><p>云服务商又当基础服务提供商，又帮你干了运维 Scaling 的事情，还提供了友好的 Interface ，这么多这么好的事情，当然不可能是免费的，一年免费与看起来低价的 lambda 的背后，是高额的捆绑消费以及对价格不敏感群体的整体割韭菜</p><p>我没有办法直接对比使用 Serverless 的开销与传统服务器的开销，但是 以AWS 为例，Serverless 使用的 API Gateway 每百万次 $3.5 请求对于一个正常企业来说，应该是不小的开销，甚至如果遭受一次 DDNS 攻击的话，确实是有点害怕你的房子明天是不是还在了。。。</p><p>而相比之下只需要多花几刀钱买一个不错的云服务器，独享内存，相对稳定的CPU，以及几乎无限流量（Fair Use），显而易见应该是一个更省钱的选择。</p><h2 id="但还是香"><a href="#但还是香" class="headerlink" title="但还是香"></a>但还是香</h2><p>在大公司里有着自己的基础设置，运营着自己的云原生，那么适当的下放一些简单的增删改查需求给前端，效率提升应该是毋庸置疑的。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上，希望本文的整体思想，又或者是代码片段，能够给你带来一些灵感或者启发。</p><p>本文有任何问题欢迎指出，也欢迎你对我写的这个小学生网站提出任何意见。</p><p>欢迎给本文打赏（在线要饭）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Serverless，云原生，年初到现在，我关注的好几个前端公众号和资讯号都在疯狂推这些东西，去年年底就早有耳闻，原来以为是各种活动大会组织联合云厂商在对 devops 卖票整的新技术，但热度越来越强，于是我也跃跃欲试蹭个热度&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Serverless から見えてきた一体化設計</title>
    <link href="https://blog.xingoxu.com/ja/2020/06/try-serverless/"/>
    <id>https://blog.xingoxu.com/ja/2020/06/try-serverless/</id>
    <published>2020-06-21T07:52:35.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>最近 Serverless を触ってみましてあるサイトを作ってみました、ってすごく便利で爆速でウェブを作れて、一番なのはNuxt.jsと相性良くてサーバーとフロントエンドが纏まって管理めっちゃ安くなったので紹介したいと思います。</p><a id="more"></a><h1 id="Serverless-なにそれ？"><a href="#Serverless-なにそれ？" class="headerlink" title="Serverless なにそれ？"></a>Serverless なにそれ？</h1><p>一言いうと Cloud Function + Object Storage + Cloud Database + API Gateway and more by Cloud Service Provider. 簡単にいうと Serverless というとある OSS フレームワークが AWS/Azure/GCP などクラウドサービスを一つの設定ファイルにまとめて、バックエンドもいらずサーバーを立てる。</p><p>メリットとしては：</p><ul><li>サービスの弾性スケーリング</li><li>従量制料金</li><li>インフラもクラウドサービス業者がやってくれる</li></ul><p>肝心のロジックだけ集中する必要なので小学生でもサービスを爆速で作れる時代に入ったかも？</p><p>そんなにすごいならみんな覚えたらサーバーエンジニアの職がなくなったんじゃ！</p><h1 id="Serverless、やってやろう"><a href="#Serverless、やってやろう" class="headerlink" title="Serverless、やってやろう"></a>Serverless、やってやろう</h1><blockquote><p>以下、AWS を例として使います</p></blockquote><p>爆速を言いまくったので、AWS で一つ一つ設定するわけがない。もちろんそうやっても問題ありませんが、今日俺のサービスを作って発表しますが、君のサービスは後日まで待たなきゃよ。</p><p>Github Star 3万個、一千万ダウンロード数の serverless npm package、<code>npm i -g serverless</code>でインストール、そして、ターミナルでこれを打つだけ</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ serverless</span><br></pre></td></tr></table></figure><p>チュートリアルが出てきてお手軽に環境構築を手助けしますね。</p><p>そして、作ったプロジェクトのフォルダーに入って、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sls deploy</span><br></pre></td></tr></table></figure><p>出てきたリンクをクリックして、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>すっげぇじゃん、もうサーバー立てましたじゃん！</p><h1 id="Serverless-と-Nuxt-js-相性すごくいい"><a href="#Serverless-と-Nuxt-js-相性すごくいい" class="headerlink" title="Serverless と Nuxt.js 相性すごくいい"></a>Serverless と Nuxt.js 相性すごくいい</h1><p>今日僕は <a href="https://whichcard.xingoxu.com/" target="_blank" rel="noopener">https://whichcard.xingoxu.com/</a> このサイトを作ります。</p><p>何かというと、海外カードを使う時ポイント+手数料がどのカードが一番お得なのがわかんないので、ランキングがあるとわかりやすくと思って作ったわけ。</p><p>そして、これを作るために、たった三つのステップ。</p><ol><li>為替を取ってきて</li><li>当日の為替を保存する（Cloud Functionは無ステータスのため）</li><li>フロントエンドで計算してランキングを出します</li></ol><p>Serverless の実践としては最適と思いますね。</p><p>ソースコードはアップロードしましたので、そちらを見ながらレビューしていただけると大歓迎です。</p><h2 id="ってなぜ-Nuxt-js"><a href="#ってなぜ-Nuxt-js" class="headerlink" title="ってなぜ Nuxt.js"></a>ってなぜ Nuxt.js</h2><ul><li>こんなに小さいもので環境構築したくない（爆速したい）</li><li>Vue に一番詳しいのでなるべく Vue 使いたい（爆速わけ）</li><li>SSR がほしい（←重要）</li><li>Programmatically で使える（←超重要）</li></ul><h2 id="Serverless-テンプレートと設定"><a href="#Serverless-テンプレートと設定" class="headerlink" title="Serverless テンプレートと設定"></a>Serverless テンプレートと設定</h2><p>んで、検索したら意外と Serverless のテンプレートに Nuxt.js もありますね！<br>テンプレートを使ったら更に開発スピードを加速しよう、いいっすね～</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverless create --template-url https://github.com/tonyfromundefined/nuxt-serverless -n whichcard-abroad</span><br></pre></td></tr></table></figure><p>作ったら、<code>serverless.yml</code>を編集します。Non-relation Database周りの設定をします。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">Resources:</span></span><br><span class="line">    <span class="attr">CurrencyTable:</span></span><br><span class="line">      <span class="attr">Type:</span> <span class="string">AWS::DynamoDB::Table</span></span><br><span class="line">      <span class="attr">Properties:</span></span><br><span class="line">        <span class="attr">TableName:</span> <span class="string">$&#123;env:DYANMODB_TABLE&#125;</span></span><br><span class="line">        <span class="attr">AttributeDefinitions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">$&#123;env:DYANMODB_PRIMARY_KEY&#125;</span></span><br><span class="line">            <span class="attr">AttributeType:</span> <span class="string">S</span></span><br><span class="line">        <span class="attr">KeySchema:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">AttributeName:</span> <span class="string">$&#123;env:DYANMODB_PRIMARY_KEY&#125;</span></span><br><span class="line">            <span class="attr">KeyType:</span> <span class="string">HASH</span></span><br><span class="line">        <span class="attr">ProvisionedThroughput:</span></span><br><span class="line">          <span class="attr">ReadCapacityUnits:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">WriteCapacityUnits:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>データベースに権限を与えないとはいけないので、lambda function を走ってるユーザー、すなわち serverless を叩くときに key を発行されたユーザーに権限を与えますので、<code>serverless.yml</code> の中にこれを加えよう</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">provider:</span></span><br><span class="line">  <span class="attr">iamRoleStatements:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">      <span class="attr">Action:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:Query</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:Scan</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:GetItem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:PutItem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:UpdateItem</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">dynamodb:DeleteItem</span></span><br><span class="line">      <span class="attr">Resource:</span> <span class="string">"arn:aws:dynamodb:$&#123;self:provider.region&#125;:*:table/$&#123;env:DYANMODB_TABLE&#125;"</span></span><br></pre></td></tr></table></figure><p>はいサーバー設定終了🙌おめでとう</p><p>次は、バックエンドのTypeScriptを追加します</p><p>このテンプレートはバックエンド全部設定してくれましたが、バックエンドのTypeScriptは追加してないので、</p><p><a href="https://github.com/xingoxu/whichcard-abroad/blob/master/tsconfig.json" target="_blank" rel="noopener"><code>tsconfig.json</code></a> をコピーして、<a href="https://github.com/xingoxu/whichcard-abroad/blob/master/tsconfig-server.json" target="_blank" rel="noopener"><code>tsconfig-server.json</code></a>に変更します。</p><p>内容もちょっと変わりましたが、ここに貼らなく上のリンクに見に行っていただけると🙏。</p><p>TypeScript追加したら js にコンパイルしなきゃ node.js の lambda function には使えないので <a href="https://github.com/xingoxu/whichcard-abroad/blob/master/webpack.config.js" target="_blank" rel="noopener"><code>webpack.config.js</code></a>に<code>ts-loader</code>の追加をお忘れなく。</p><h2 id="為替を取ってきて"><a href="#為替を取ってきて" class="headerlink" title="為替を取ってきて"></a>為替を取ってきて</h2><p><a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/api/functions/visa.ts" target="_blank" rel="noopener">VISA</a> カードを例として、為替は<a href="https://usa.visa.com/support/consumer/travel-support/exchange-rate-calculator.html" target="_blank" rel="noopener">ここで</a> 公表されます。</p><p><code>axios</code>と<code>cheerio</code>を導入して、jQuery感で40行のコードで楽に為替を取ってきました</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">'cheerio'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'date-fns'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getVisaCurrency = <span class="keyword">async</span> (&#123;</span><br><span class="line">  transCurr = <span class="string">"USD"</span>,</span><br><span class="line">  billCurr = <span class="string">"JPY"</span>,</span><br><span class="line">  date</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data: htmlBody &#125; = <span class="keyword">await</span> axios.get&lt;</span><br><span class="line">    <span class="built_in">string</span></span><br><span class="line">  &gt;(</span><br><span class="line">    <span class="string">`https://usa.visa.com/support/consumer/travel-support/exchange-rate-calculator.html`</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      params: &#123;</span><br><span class="line">        amount: <span class="number">1</span>,</span><br><span class="line">        fee: <span class="string">'0.0'</span>,</span><br><span class="line">        utcConvertedDate: <span class="string">''</span>,</span><br><span class="line">        exchangedate: format(</span><br><span class="line">          date,</span><br><span class="line">          <span class="string">'MM/dd/yyyy'</span></span><br><span class="line">        ),</span><br><span class="line">        fromCurr: billCurr,</span><br><span class="line">        toCurr: transCurr,</span><br><span class="line">        submitButton:</span><br><span class="line">          <span class="string">'Calculate exchange rate'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(htmlBody);</span><br><span class="line">  <span class="keyword">const</span> $targetDOM = $(</span><br><span class="line">    <span class="string">'.converted-amount-value'</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> result = $targetDOM</span><br><span class="line">    .eq($targetDOM.length - <span class="number">2</span>)</span><br><span class="line">    .text()</span><br><span class="line">    .match(<span class="regexp">/^\d+\.\d+/</span>)![<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; getVisaCurrency &#125;;</span><br></pre></td></tr></table></figure><h2 id="当日の為替を保存する"><a href="#当日の為替を保存する" class="headerlink" title="当日の為替を保存する"></a>当日の為替を保存する</h2><p>従量制課金なので、空いている時はリソースは配られるわけがない、なのでCloud Functionは無ステータスは筋が通っている。</p><p>一つのリクエストに対して、為替を取ってくるのは問題ないが、ユーザーエクスペリエンスとしては最低でした…</p><p>しかも、データが取られたサイトに見つかられたら、AWSのIP全部ブロックすると一番やばい。パブリックデータとしても、少しモラルがある方法で取るほうがいい。</p><p><code>aws-sdk</code> をインポートして、TypeScriptではちょっと転換面では面倒（型定義では少しコード増やさなきゃ）だけど、基本的には時間かかってないと気がする。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DynamoDB &#125; <span class="keyword">from</span> <span class="string">'aws-sdk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'date-fns'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DATE_FORMAT = <span class="string">'yyyy-MM-dd'</span>;</span><br><span class="line"><span class="keyword">const</span> DYANMODB_TABLE: <span class="built_in">string</span> = <span class="string">"currencyTable"</span>;</span><br><span class="line"><span class="keyword">const</span> DYANMODB_PRIMARY_KEY: <span class="built_in">string</span> = <span class="string">"currency"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamoDBClient = <span class="keyword">new</span> DynamoDB(&#123;</span><br><span class="line">  region: process.env.DYANMODB_REGION</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryFromCache = <span class="keyword">async</span> (</span><br><span class="line">  date: <span class="built_in">Date</span></span><br><span class="line">): <span class="built_in">Promise</span>&lt;DBCurrencyObject | <span class="literal">undefined</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    Count,</span><br><span class="line">    Items</span><br><span class="line">  &#125; = <span class="keyword">await</span> dynamoDBClient</span><br><span class="line">    .query(&#123;</span><br><span class="line">      TableName: DYANMODB_TABLE,</span><br><span class="line">      KeyConditionExpression: <span class="string">`#key=:dt`</span>,</span><br><span class="line">      ExpressionAttributeNames: &#123;</span><br><span class="line">        <span class="string">'#key'</span>: DYANMODB_PRIMARY_KEY</span><br><span class="line">      &#125;,</span><br><span class="line">      ExpressionAttributeValues: &#123;</span><br><span class="line">        <span class="string">':dt'</span>: &#123;</span><br><span class="line">          S: format(date, DATE_FORMAT)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .promise();</span><br><span class="line">  <span class="keyword">if</span> (Count &amp;&amp; Count == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> DyanmodbResultAdapter(</span><br><span class="line">      Items![<span class="number">0</span>]</span><br><span class="line">    ) <span class="keyword">as</span> DBCurrencyObject;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storeResult = <span class="keyword">async</span> (&#123;</span><br><span class="line">  date,</span><br><span class="line">  result,</span><br><span class="line">  billCurr,</span><br><span class="line">  transCurr,</span><br><span class="line">  brand</span><br><span class="line">&#125;): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> cacheResult = <span class="keyword">await</span> queryFromCache(</span><br><span class="line">    date</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (!cacheResult)</span><br><span class="line">    cacheResult = &#123;</span><br><span class="line">      date: format(date, DATE_FORMAT)</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!cacheResult[brand])</span><br><span class="line">    cacheResult[brand] = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!cacheResult[brand]![transCurr])</span><br><span class="line">    cacheResult[brand]![transCurr] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  cacheResult[brand]![transCurr]![</span><br><span class="line">    billCurr</span><br><span class="line">  ] = result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> dynamoDBClient</span><br><span class="line">    .updateItem(&#123;</span><br><span class="line">      Key: &#123;</span><br><span class="line">        [DYANMODB_PRIMARY_KEY]: &#123;</span><br><span class="line">          S: format(date, DATE_FORMAT)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      TableName: DYANMODB_TABLE,</span><br><span class="line">      UpdateExpression: <span class="string">`set <span class="subst">$&#123;brand&#125;</span>=:<span class="subst">$&#123;brand&#125;</span>`</span>,</span><br><span class="line">      ExpressionAttributeValues: &#123;</span><br><span class="line">        [<span class="string">`:<span class="subst">$&#123;brand&#125;</span>`</span>]: &#123;</span><br><span class="line">          M: DyanmodbRequestAdapter(</span><br><span class="line">            cacheResult[brand]!</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .promise();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; queryFromCache, storeResult &#125;;</span><br></pre></td></tr></table></figure><p><code>DyanmodbRequestAdapter</code>と<code>DyanmodbResultAdapter</code>は aws-sdk を使うためにデータの転換関数。長いのでここで貼らなく、ソースコード見ていただけると思います。</p><p>データを取る時と保存する時リクエストが来る可能性もありますので、<code>asyncOnce</code>の関数を書いて入り口をラッピングして一回だけ実行させることを保証しましょう。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncOnce</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">T</span> <span class="title">extends</span> (<span class="params">...args: <span class="built_in">any</span></span>) =&gt; <span class="title">Promise</span>&lt;<span class="title">any</span>&gt;</span></span><br><span class="line"><span class="function">&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  func: (</span></span></span><br><span class="line"><span class="function"><span class="params">    ...args: Parameters&lt;T&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">  ) =&gt; ReturnType&lt;T&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> running: ReturnType&lt;</span><br><span class="line">    <span class="keyword">typeof</span> func</span><br><span class="line">  &gt; | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...args: Parameters&lt;<span class="keyword">typeof</span> func&gt;</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (running === <span class="literal">null</span>) &#123;</span><br><span class="line">      running = func(...args);</span><br><span class="line">      running.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        running = <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> running;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="フロントエンドでランキングを計算します"><a href="#フロントエンドでランキングを計算します" class="headerlink" title="フロントエンドでランキングを計算します"></a>フロントエンドでランキングを計算します</h2><p>さっきも言ったけど、Nuxt.js の Programmatically で使えるのは重要。なぜ重要というと、Cloud Function の入り口は一つで、リクエスト来る時フロントエンドのレンダリングとAPIのサービングは両方立たなきゃ。</p><p>従来のやり方としては、<code>Express.js</code> などでRouterを追加して、静的HTMLをレンダリングする、いわゆるサーバーレンダリング。</p><p>それだとフロントエンドエンジニアにとってはちょっと不便、でもこれを使ったら、サーバーとフロントが賢く纏まった。</p><p>ちょっと見てみましょう</p><p>SFC でさっき書いたサーバー関数を import します</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; response &#125; <span class="keyword">from</span> <span class="string">'@/api/functions/currency'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> asyncData(context) &#123;</span><br><span class="line">    <span class="keyword">let</span> currencyData;</span><br><span class="line">    <span class="keyword">if</span> (process.server &amp;&amp; context) &#123;</span><br><span class="line">      currencyData = <span class="keyword">await</span> response(</span><br><span class="line">        context.req</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> axios.$<span class="keyword">get</span>(</span><br><span class="line">        '/currency',</span><br><span class="line">        &#123;</span><br><span class="line">          params: &#123; ...someParams &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      currencyData = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; currencyData &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そしたら、SSR の場合はサーバー自身が自身の <code>/currency</code> にリクエストすることはなくなりました。</p><p>また、この設計のいいところは、もしほかのページがなければ、<code>/currency</code> の API も外に出さなくてもいいです、Nuxt.js をテンプレートエンジンとして使った。</p><p>Node.js をサーバーとして使った方はわかると思います、普通のサーバーレンダリングはデータ生成してからレンダリングするが、ここではフロントエンドを先に書いちゃって、その後サーバーの関数をインポートして、データを取る。</p><p>書き心地もわかりやすい。</p><p>すごくない？</p><p>残りはインターフェイスなどは、ここでは略します。</p><h1 id="問題を解決"><a href="#問題を解決" class="headerlink" title="問題を解決"></a>問題を解決</h1><h2 id="extractCSS-をつける"><a href="#extractCSS-をつける" class="headerlink" title="extractCSS をつける"></a>extractCSS をつける</h2><p>Nuxt.js はデフォルトとしては <code>extractCSS</code> を閉じてます、UI Frameworkを使った方はもしかしてHTMLはとんでもない長さにされました。<code>nuxt.config.js</code> にての起用をお忘れなく。</p><h2 id="Nuxt-js-が-aws-sdk-をフロントエンドのJavaScriptにバンドルしまった"><a href="#Nuxt-js-が-aws-sdk-をフロントエンドのJavaScriptにバンドルしまった" class="headerlink" title="Nuxt.js が aws-sdk をフロントエンドのJavaScriptにバンドルしまった"></a>Nuxt.js が aws-sdk をフロントエンドのJavaScriptにバンドルしまった</h2><p>Nuxt.js の webpackか、<code>vue-loader</code>かどっちの問題まだ深く見てないが（爆速で作るわけ）、nuxt plugin で迂回することはできる。</p><p><code>plguins</code> フォルダ下に <a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/plugins/getData.server.ts" target="_blank" rel="noopener"><code>getData.server.ts</code></a>を作ります、</p><p>サーバー関数をhandlerにして、<code>Vue</code> でもいいし、<code>context</code> でもいいし SFC でアクセスできるグローバル関数であればOK。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; response &#125; <span class="keyword">from</span> <span class="string">'@/api/functions/currency'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Context &#125; <span class="keyword">from</span> <span class="string">'@nuxt/types'</span>;</span><br><span class="line"></span><br><span class="line">Vue.$serverGetCurrency = <span class="function">(<span class="params">context: Context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> response(context.req);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>SFCでさっきのところでこの関数を使う</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.server &amp;&amp; context) &#123;</span><br><span class="line">  currencyData = <span class="keyword">await</span> Vue.$serverGetCurrency(</span><br><span class="line">    context</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScriptの型定義なら、その関数の隣で declare すればどこでも問題ないはずです（<a href="https://github.com/xingoxu/whichcard-abroad/blob/master/src/plugins/getData.server.ts" target="_blank" rel="noopener">ソースコード</a>）</p><blockquote><p>レファレンス <a href="https://nuxtjs.org/guide/plugins/" target="_blank" rel="noopener">Nuxt.js Plugins</a> &amp; <a href="https://vuejs.org/v2/guide/typescript.html#Augmenting-Types-for-Use-with-Plugins" target="_blank" rel="noopener">Vue.js Augumenting Types for Use With Plugins</a></p></blockquote><h1 id="めっちゃ便利、落とし穴ないの？"><a href="#めっちゃ便利、落とし穴ないの？" class="headerlink" title="めっちゃ便利、落とし穴ないの？"></a>めっちゃ便利、落とし穴ないの？</h1><p>Serverless は新しいものではない、Cloud Function、Object Storage、Cloud Database どっちでも2020年から出たものではない。ただそのコンセプトはスタートアップ企業のサービスのラウンチスピードをすごく手助けしました。彼達にとって、サーバーさえもないし、エンジニアもわずか数人もしくは一人だけかもしれませんが、そんな状況の企業にはとてもふさわしいも過言ではない。時間とコスト両方省けられる選択です。</p><p>でもね…</p><h2 id="ローカルで開発、そらでデバッグ"><a href="#ローカルで開発、そらでデバッグ" class="headerlink" title="ローカルで開発、そらでデバッグ"></a>ローカルで開発、そらでデバッグ</h2><p>「あら、ローカルでちゃんと動いてるのに、アップロードしたらエラーが出ちゃった！」<br>それはなぜですか？AWS を例としてCloud Native はどう node_modules を処理してるのは見てみましょう。</p><blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/nodejs-package.html" target="_blank" rel="noopener">Node.js の AWS Lambda デプロイパッケージ</a></p></blockquote><p>その答えは、コードと一緒にアップロードします。</p><p>つまり、node_modulesにnode-gypなど native を依存してるかつ aws のハードウェア適してない場合は必ずエラーが出るのではないか、しかもローカルでは検知できない。</p><blockquote><p>ほら <a href="https://stackoverflow.com/questions/36079438/npm-install-with-aws-lambda" target="_blank" rel="noopener">npm install with AWS Lambda - Stack Overflow</a></p></blockquote><h2 id="コスト"><a href="#コスト" class="headerlink" title="コスト"></a>コスト</h2><p>さっきまだコストを省けると言ったのに、それなぜまた問題と視されますか？</p><p>クラウドサービスプラットフォーム、ベーシックサービスを提供しながら、インフラ、自動スケーリング、フレンドリーインターフェイスも提供し、そんなにいいこと無料のわけがない。最初に一年無料、従量制課金の後ろは、他のサービスを同梱して一緒に課金しちゃうと、価格に対して敏感ではない人を「騙す」</p><p>Serverless と従来のサーバーを直接で比較することはできない、ただ、AWS の API Gateway 百万回 $3.5の料金は高くない？DDNSを受けたら、お家飛んできそうよ。</p><p>$5では vultr 買えます、しかも無限トラフィック、安定してるリソース、サービスがでかくなったらコスト的には絶対勝つと思います。</p><h2 id="クラウドサービスプラットフォームに対しての依存性"><a href="#クラウドサービスプラットフォームに対しての依存性" class="headerlink" title="クラウドサービスプラットフォームに対しての依存性"></a>クラウドサービスプラットフォームに対しての依存性</h2><p>AWS でサービスを立ったが、後日 AWS と揉めたら、また Amazon と利益上で対立して他のクラウドサービスに行きたい、もしくは自分のサーバーがありまして自分のサーバーに移行しようとすると、コードをもう一度書かなきゃし、設定とか見直さないとも行けないし…</p><h2 id="でもそのいいところを忘れないで"><a href="#でもそのいいところを忘れないで" class="headerlink" title="でもそのいいところを忘れないで"></a>でもそのいいところを忘れないで</h2><p>もしでかい会社のであれば、自分がそのインフラ持ってて、Serverless みたいのものを作ったら、適当に簡単なものをフロントエンド側に任せたら効率的にはすごく早いのではないかと考えられますね。</p><h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1><p>ご閲覧ありがとうございました、この記事の考え、コード、あなたにアイデアまたはインスピレーションをもたらしたら嬉しいです。</p><p>記事について質問、またはこの小学生も作れるウェブサイトについて意見があれば大歓迎です。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近 Serverless を触ってみましてあるサイトを作ってみました、ってすごく便利で爆速でウェブを作れて、一番なのはNuxt.jsと相性良くてサーバーとフロントエンドが纏まって管理めっちゃ安くなったので紹介したいと思います。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Google I/O 2019 Web 前端内容总结</title>
    <link href="https://blog.xingoxu.com/2019/05/2019-05-17-google-io-tech/"/>
    <id>https://blog.xingoxu.com/2019/05/2019-05-17-google-io-tech/</id>
    <published>2019-05-17T08:55:59.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-新产品-新技术"><a href="#Web-新产品-新技术" class="headerlink" title="Web 新产品 / 新技术"></a>Web 新产品 / 新技术</h1><ul><li>web.dev<ul><li><a href="https://web.dev" target="_blank" rel="noopener">https://web.dev</a></li><li>一个可以用来学习框架、性能、各种 Web 技术的地方</li><li>还有实战 Codelab</li><li>正在进行多国翻译</li></ul></li><li>Lighthouse Performance Budgets<ul><li><a href="https://developers.google.com/web/tools/lighthouse/audits/budgets" target="_blank" rel="noopener">https://developers.google.com/web/tools/lighthouse/audits/budgets</a></li><li>在Lighthouse中设定性能预算，让Lighthouse在测试性能时使用并打分</li></ul></li><li>PWA Desktop<ul><li>PWA现在可以各大桌面平台系统中安装了</li></ul></li><li>Trusted Web Activity<ul><li><a href="https://developers.google.com/web/updates/2019/02/using-twa" target="_blank" rel="noopener">https://developers.google.com/web/updates/2019/02/using-twa</a></li><li>Chrome Custom Tab 的升级版，不再显示标题栏</li><li>一个常见的使用场景是在已有的App中去使用PWA来打包家族应用并打造原生体验</li><li>在网页中可以使用schema url来与App通信</li><li>App可以在网址后附上参数给网页发送数据</li></ul></li><li>Perception Toolkit<ul><li><a href="https://web.dev/perception-toolkit" target="_blank" rel="noopener">https://web.dev/perception-toolkit</a></li><li>一个工具包使用Shape Detection API去扫描条码或者获取实物信息</li><li>从网站的 meta 信息展示相关卡片</li><li>提供了WebAssembly版以向下兼容</li></ul></li><li>Puppeteer with Firefox<ul><li>可以使用Firefox进行自动化了</li><li><code>npm i puppeteer-firefox</code></li></ul></li></ul><a id="more"></a><h1 id="Web-将来可以使用的新功能-新Web-API-新-JavaScript-API-等"><a href="#Web-将来可以使用的新功能-新Web-API-新-JavaScript-API-等" class="headerlink" title="Web 将来可以使用的新功能 / 新Web API / 新 JavaScript API 等"></a>Web 将来可以使用的新功能 / 新Web API / 新 JavaScript API 等</h1><h2 id="Chrome-Only-目前为止，没有写入w3c标准"><a href="#Chrome-Only-目前为止，没有写入w3c标准" class="headerlink" title="Chrome Only (目前为止，没有写入w3c标准)"></a>Chrome Only (目前为止，没有写入w3c标准)</h2><ul><li>Lazy loading<ul><li>在图片和iframe中添加 loading=”lazy” 属性来让浏览器自动懒加载</li><li>Chrome 75 启用</li></ul></li><li>Portals<ul><li><a href="https://web.dev/hands-on-portals" target="_blank" rel="noopener">https://web.dev/hands-on-portals</a></li><li>一个新tag，类似iframe，以提供转到网页中嵌入内容的无缝体验</li><li>可以在Chrome Canary体验</li></ul></li><li>Web Packaging<ul><li><a href="https://github.com/WICG/webpackage" target="_blank" rel="noopener">https://github.com/WICG/webpackage</a></li><li>对网页进行签名打包，在不同服务器上部署，使得浏览器可以不仅在源服务器上获取内容（p2p的感觉）</li><li>暂时没有任何 demo</li></ul></li><li>Paint Holding<ul><li>同一网站切换页面时将保持之前的绘制不会白屏一次</li><li>Chrome Canary 可预览</li></ul></li><li>Cookie Changes upcoming in Chrome 76<ul><li><a href="https://web.dev/samesite-cookies-explained" target="_blank" rel="noopener">https://web.dev/samesite-cookies-explained</a></li><li>没有添加Same-Site的Cookie将会自动适用<code>Same-Site=LAX</code></li></ul></li></ul><p>Chrome 正在开发的</p><ul><li><a href="https://github.com/WICG/native-file-system" target="_blank" rel="noopener">原生文件系统</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=897276" target="_blank" rel="noopener">无需提前申请即可存储文件在本地</a></li><li><a href="https://github.com/sso-google/sms-otp-retrieval" target="_blank" rel="noopener">基于短信的验证</a></li></ul><blockquote><p>关联Session： What’s New with Chrome and the Web (Google I/O ’19)</p></blockquote><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><ul><li><p>开发中</p><ul><li>分享 -&gt; Web Share API (Shipped) -&gt; Web Share Target (v2) (Working)</li><li>media control on System level -&gt; mediaSession API (Shipped)</li><li>检测条码与形状 -&gt; Shape Detection API (FaceDetect / BarcodeDetect both shipped in Chrome Canary) </li><li>App Badging (App上的数字) -&gt; window.Badge / window.ExperimentalBadge (Origin Trial 78)</li><li>唤醒锁 -&gt; (Screen wake lock / System wake lock) -&gt; Wake Lock (In Development)</li><li>文件操作 -&gt; File Picker -&gt; chooseFileSystemEntries (propse stage / In Development)</li><li>访问串口设备（例如打印机） -&gt; Serial API (Proposed API)</li><li>HID 设备访问 -&gt; WebHID (Proposed API / In Development)</li><li>访问通讯录 -&gt; Contacts Picker (Proposed API / Experimenting)</li><li>访问安装字体列表 -&gt; Proposed / In Development</li></ul></li><li><p>很快实装</p><ul><li>剪贴板复制与粘贴图片 Clipboard API</li><li><a href="https://bit.ly/sms-verification-explainer" target="_blank" rel="noopener">基于短信的手机号验证流程</a></li><li>基于时间的推送通知API Notification Triggers API</li></ul></li></ul><blockquote><p>以上内容年内实装</p></blockquote><blockquote><p>在 Chrome 中可参与试用并参与反馈<br><a href="https://developers.chrome.com/origintrials" target="_blank" rel="noopener">https://developers.chrome.com/origintrials</a></p></blockquote><blockquote><p>Web API 可在 Project hugu 参阅进度 <a href="https://bugs.chromium.org/p/chromium/issues/list?can=2&q=proj-fugu&sort=m&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified" target="_blank" rel="noopener">Project hugu</a></p></blockquote><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356dbrkpgj21rs0xs4qp.jpg" alt="Web API 预定"></p><blockquote><p>相关Session： Unlocking New Capabilities for the Web (Google I/O ’19)</p></blockquote><h2 id="JavaScript-API-Syntax"><a href="#JavaScript-API-Syntax" class="headerlink" title="JavaScript API / Syntax"></a>JavaScript API / Syntax</h2><ul><li>类的私有字段 (已实装) - working on privatter method and getters and setters</li><li>String.prototype.matchAll (已实装)</li><li>数字分隔 (Chrome 75)</li><li>BigInt (Chrome 74 与 Firefox nightly 与 node 实装 &amp; transpiler available)</li><li>Array.prototype.flat (in chrome firefox safari node)</li><li>从 Entries 反转化为 Object  (in chrome firefox safari node )</li><li>globalThis (in chrome firefox safari node )</li><li>正在将数字排序的稳定性写入标准</li><li>多国语言相关<ul><li>Intl.RelativeTimeFormat -&gt; today yesterday tomorrow (in chrome firefox node)</li><li>Intl.ListFormat -&gt; ex. A, B or C  (in chrome node)</li><li>Intl.DateTimeFormat -&gt; ex. May, 5  (in chrome)</li><li>Intl.Locale -&gt; Internal Translation (in chrome node)</li></ul></li><li>Promise.allSettled (in chrome 76 nightly) / Promise.any</li><li>WeakRef and finalizers (in chrome with flags) &amp; 写入标准</li></ul><blockquote><p>关联Session： What’s new in JavaScript (Google I/O ’19)</p></blockquote><h1 id="经验分享与性能提升"><a href="#经验分享与性能提升" class="headerlink" title="经验分享与性能提升"></a>经验分享与性能提升</h1><p>Chrome 想为各个框架提供一些API这样他们在连续执行分块任务时同时相应用户输入</p><ul><li>Scheduling API<ul><li><a href="https://github.com/WICG/main-thread-scheduling" target="_blank" rel="noopener">https://github.com/WICG/main-thread-scheduling</a></li><li><a href="https://github.com/WICG/is-input-pending" target="_blank" rel="noopener">https://github.com/WICG/is-input-pending</a></li><li><a href="https://github.com/WICG/display-locking" target="_blank" rel="noopener">https://github.com/WICG/display-locking</a></li></ul></li></ul><p>Google 分享了他们在性能上的一些做法和建议</p><ul><li>阶段式SSR</li><li>捕获JS完全加载前的用户点击</li><li>保持初始大小的JS</li><li>交互驱动懒加载组件</li><li>建立依赖关系图，声明性加载功能，同时获取数据</li></ul><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356nnvqhfj21ra0z2e81.jpg" alt="Google Important Piece"></p><p>Google 的性能建议</p><ol><li>懒加载</li><li>响应式图片（根据设备像素密度等加载不同分辨率图片）</li><li>图片CDN</li><li>延迟第三方JS</li><li>移除代价巨大的库</li><li>分离代码</li><li>避免Web Font字体闪烁</li><li>Prefetch</li><li>Preconnect</li><li>Preload</li><li>首屏关键CSS</li><li>gzip -&gt; Brotli </li><li>响应式加载JS（适应不同浏览器分别加载不同JS）</li></ol><p>以及使用Lighthouse 与设定性能预算 LightWallet</p><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g358gekpplj21430l4k2y.jpg" alt="Performance Suggestion"></p><blockquote><p>相关Session：<br>Elevating the Web Platform with the JavaScript Framework Community (Google I/O ’19)<br>Speed at Scale: Web Performance Tips and Tricks from the Trenches (Google I/O ’19)</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>更多性能其他案例、How to、以及Web内容可参照<br><a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i</a></p><!-- Google 的架构建议1. 为不断发展的Web API而设计程序2. 避免惩罚新浏览器（polyfill等）3. 持续服务器缓存，保持高CDN命中率4. 避免重大修改并增强现有工具 -->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-新产品-新技术&quot;&gt;&lt;a href=&quot;#Web-新产品-新技术&quot; class=&quot;headerlink&quot; title=&quot;Web 新产品 / 新技术&quot;&gt;&lt;/a&gt;Web 新产品 / 新技术&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;web.dev&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个可以用来学习框架、性能、各种 Web 技术的地方&lt;/li&gt;
&lt;li&gt;还有实战 Codelab&lt;/li&gt;
&lt;li&gt;正在进行多国翻译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lighthouse Performance Budgets&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/budgets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/tools/lighthouse/audits/budgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Lighthouse中设定性能预算，让Lighthouse在测试性能时使用并打分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PWA Desktop&lt;ul&gt;
&lt;li&gt;PWA现在可以各大桌面平台系统中安装了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trusted Web Activity&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/using-twa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/updates/2019/02/using-twa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome Custom Tab 的升级版，不再显示标题栏&lt;/li&gt;
&lt;li&gt;一个常见的使用场景是在已有的App中去使用PWA来打包家族应用并打造原生体验&lt;/li&gt;
&lt;li&gt;在网页中可以使用schema url来与App通信&lt;/li&gt;
&lt;li&gt;App可以在网址后附上参数给网页发送数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perception Toolkit&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/perception-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev/perception-toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个工具包使用Shape Detection API去扫描条码或者获取实物信息&lt;/li&gt;
&lt;li&gt;从网站的 meta 信息展示相关卡片&lt;/li&gt;
&lt;li&gt;提供了WebAssembly版以向下兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Puppeteer with Firefox&lt;ul&gt;
&lt;li&gt;可以使用Firefox进行自动化了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i puppeteer-firefox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Google I/O 2019 フロントエンドまとめ</title>
    <link href="https://blog.xingoxu.com/ja/2019/05/2019-05-17-google-io-tech/"/>
    <id>https://blog.xingoxu.com/ja/2019/05/2019-05-17-google-io-tech/</id>
    <published>2019-05-17T08:55:59.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-新プロダクト-新技術"><a href="#Web-新プロダクト-新技術" class="headerlink" title="Web 新プロダクト / 新技術"></a>Web 新プロダクト / 新技術</h1><ul><li>web.dev というサイト<ul><li><a href="https://web.dev" target="_blank" rel="noopener">https://web.dev</a></li><li>フレームワーク、パフォーマンス、Web各種技術など載っているグーグルが作ったまとめサイト</li><li>全部無料で学べる</li><li>今フレームワークはReact.jsだけけど、今後追加予定</li><li>実践 Codelab、その場で試すことはできます</li><li>翻訳は今進行中らしい</li></ul></li><li>Lighthouse Performance Budgets<ul><li><a href="https://developers.google.com/web/tools/lighthouse/audits/budgets" target="_blank" rel="noopener">https://developers.google.com/web/tools/lighthouse/audits/budgets</a></li><li>Lighthouseにパフォーマンス時間 / ファイル大きさ予算を設定し、Lighthouseが測ってくれる</li></ul></li><li>PWA Desktop<ul><li>PWA 今デスクトップOSにインストールできます</li></ul></li><li>Trusted Web Activity<ul><li><a href="https://developers.google.com/web/updates/2019/02/using-twa" target="_blank" rel="noopener">https://developers.google.com/web/updates/2019/02/using-twa</a></li><li>Chrome Custom Tab のアップグレード版、タイトルバーがない</li><li>よく見られるユースケースは、現存のアプリの中で、ファミリーアプリのウェブ版を入れて、ネイテイブ感を作る</li><li>ウェブページにはschema urlでアプリにメッセージ送れます</li><li>アプリは URL の後ろにパラメータ付けるならウェブページにメッセージ送れます</li></ul></li><li>Perception Toolkit<ul><li><a href="https://web.dev/perception-toolkit" target="_blank" rel="noopener">https://web.dev/perception-toolkit</a></li><li>Shape Detection APIを使ってるツールキット</li><li>バーコード、実物、画像を取得してウェブサイトのmetaから取った情報と比較して、関連カードを出す</li><li>APIまだ使えないブラウザにWeb Assemblyを使う、互換性を保つ</li></ul></li><li>Puppeteer with Firefox<ul><li>Firefoxが使えるようになりました</li><li><code>npm i puppeteer-firefox</code></li></ul></li></ul><a id="more"></a><h1 id="Web-にもうすぐ使えるもの-新Web-API-新-JavaScript-API-など"><a href="#Web-にもうすぐ使えるもの-新Web-API-新-JavaScript-API-など" class="headerlink" title="Web にもうすぐ使えるもの / 新Web API / 新 JavaScript API など"></a>Web にもうすぐ使えるもの / 新Web API / 新 JavaScript API など</h1><h2 id="Chrome-Only-w3cにまだ書いてない"><a href="#Chrome-Only-w3cにまだ書いてない" class="headerlink" title="Chrome Only (w3cにまだ書いてない)"></a>Chrome Only (w3cにまだ書いてない)</h2><ul><li>Lazy loading<ul><li>画像とiframeの中 loading=”lazy” のアトリビュートを追加すると遅延ロードくれます</li><li>Chrome 75 から</li></ul></li><li>Portals<ul><li><a href="https://web.dev/hands-on-portals" target="_blank" rel="noopener">https://web.dev/hands-on-portals</a></li><li>新たな要素、iframeみたい、埋め込む内容に切り替えるスムーズ体験を提供する</li><li>Chrome Canary 使える</li></ul></li><li>Web Packaging<ul><li><a href="https://github.com/WICG/webpackage" target="_blank" rel="noopener">https://github.com/WICG/webpackage</a></li><li>ウェブサイトをサインしてパッケージして、どこでもデプロイして、ブラウザはどこでも同じサイトとみなす（p2pの感じ）</li><li>例はまだない</li></ul></li><li>Paint Holding<ul><li>同じサイト画面遷移時白い画面は出ない</li><li>Chrome Canary 見れる</li></ul></li><li>Cookie は Chrome 76 からちょっと変わる<ul><li><a href="https://web.dev/samesite-cookies-explained" target="_blank" rel="noopener">https://web.dev/samesite-cookies-explained</a></li><li>Same-Site使っていないCookieは<code>Same-Site=LAX</code>を適用する</li></ul></li></ul><p>Chrome今開発中もの</p><ul><li><a href="https://github.com/WICG/native-file-system" target="_blank" rel="noopener">ネイテイブファイルシステム</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=897276" target="_blank" rel="noopener">申請しなくもローカルでファイルを保存できる</a></li><li><a href="https://github.com/sso-google/sms-otp-retrieval" target="_blank" rel="noopener">SMS基づくユーザー検証</a></li></ul><blockquote><p>関連Session： What’s New with Chrome and the Web (Google I/O ’19)</p></blockquote><p><em>独自APIを開発するから海外でも好評得ていないらしい…</em></p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><ul><li><p>開発中</p><ul><li>ウェブシェア -&gt; Web Share API (Shipped) -&gt; Web Share Target (v2) (Working)</li><li>media control on System level -&gt; mediaSession API (Shipped)</li><li>バーコード、画像、実物探知 -&gt; Shape Detection API (FaceDetect / BarcodeDetect both shipped in Chrome Canary) </li><li>App Badging (アプリアイコンの数字) -&gt; window.Badge / window.ExperimentalBadge (Origin Trial 78)</li><li>Wake Lock -&gt; (Screen wake lock / System wake lock) -&gt; Wake Lock (In Development)</li><li>ファイル -&gt; File Picker -&gt; chooseFileSystemEntries (提案中 / In Development)</li><li>シリアルデバイスサクセス（プリンターなど） -&gt; Serial API (提案済み)</li><li>HID デバイスアクセス -&gt; WebHID (提案済み / In Development)</li><li>連絡帳サクセス -&gt; Contacts Picker (提案済み / Experimenting)</li><li>インストールしたフォントをアクセス -&gt; 提案済み / In Development</li></ul></li><li><p>もうすぐ実装します</p><ul><li>Clipboard API with Image （クリップボードAPIに画像も添付できる）</li><li><a href="https://bit.ly/sms-verification-explainer" target="_blank" rel="noopener">SMS基づくOTP検証</a></li><li>Notification Triggers API （時間基づくプッシュ通知）</li></ul></li></ul><blockquote><p>上記内容年内実装<br>Chrome で試すまたフィードバックは下記サイトまで<br><a href="https://developers.chrome.com/origintrials" target="_blank" rel="noopener">https://developers.chrome.com/origintrials</a></p></blockquote><blockquote><p>Web API は Project huguで 確認できます <a href="https://bugs.chromium.org/p/chromium/issues/list?can=2&q=proj-fugu&sort=m&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified" target="_blank" rel="noopener">Project hugu</a></p></blockquote><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356dbrkpgj21rs0xs4qp.jpg" alt="Web API スケジュール"></p><blockquote><p>関連Session： Unlocking New Capabilities for the Web (Google I/O ’19)</p></blockquote><h2 id="JavaScript-API-Syntax"><a href="#JavaScript-API-Syntax" class="headerlink" title="JavaScript API / Syntax"></a>JavaScript API / Syntax</h2><ul><li>Class のプライベート属性 (実装済み) - working on privatter method and getters and setters</li><li>String.prototype.matchAll (実装済み)</li><li>Number spearater (Chrome 75)</li><li>BigInt (Chrome 74 と Firefox nightly と node 実装済み &amp; transpiler available)</li><li>Array.prototype.flat (in chrome firefox safari node)</li><li>Entries から Object に転換する Object.entriesの逆操作 (in chrome firefox safari node )</li><li>globalThis (in chrome firefox safari node )</li><li>Array.sortの安定性を標準の中に書くように努力してる</li><li>多言語について<ul><li>Intl.RelativeTimeFormat -&gt; today yesterday tomorrow (in chrome firefox node)</li><li>Intl.ListFormat -&gt; ex. A, B or C  (in chrome node)</li><li>Intl.DateTimeFormat -&gt; ex. May, 5  (in chrome)</li><li>Intl.Locale -&gt; Internal Translation (in chrome node)</li></ul></li><li>Promise.allSettled (in chrome 76 nightly) / Promise.any</li><li>WeakRef and finalizers (in chrome with flags) &amp; 標準の中に書くように</li></ul><blockquote><p>関連Session： What’s new in JavaScript (Google I/O ’19)</p></blockquote><h1 id="経験シェアとパフォーマンス"><a href="#経験シェアとパフォーマンス" class="headerlink" title="経験シェアとパフォーマンス"></a>経験シェアとパフォーマンス</h1><p>Chrome はフレームワークなどスケジュールAPIを提供したい、<br>連続実行、レンダリングの時もユーザーの操作受けるように。</p><ul><li>Scheduling API<ul><li><a href="https://github.com/WICG/main-thread-scheduling" target="_blank" rel="noopener">https://github.com/WICG/main-thread-scheduling</a></li><li><a href="https://github.com/WICG/is-input-pending" target="_blank" rel="noopener">https://github.com/WICG/is-input-pending</a></li><li><a href="https://github.com/WICG/display-locking" target="_blank" rel="noopener">https://github.com/WICG/display-locking</a></li></ul></li></ul><p>Google はパフォーマンスにやり方とアドバイス</p><ul><li>段階的SSR</li><li>JS完全ロード前のクリック事件を取るように</li><li>一定サイズの初期JS</li><li>インタラクション駆動型遅延ロード</li><li>依存関係グラフ、宣言型機能ロード、同時にデータを取る</li></ul><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g356nnvqhfj21ra0z2e81.jpg" alt="Google Important Piece"></p><p>Google のパフォーマンスアドバイス</p><ol><li>遅延ロード</li><li>レスポンシブ画像（ピクセル密度による画像をロードする）</li><li>画像CDN</li><li>サードパーティのJSを遅延する</li><li>高価なライブラリを削除する</li><li>コード分割</li><li>Web Fontの白いフラッシュを避ける</li><li>Prefetch</li><li>Preconnect</li><li>Preload</li><li>クリティカルCSS（はじめの画面だけ必要のCSSをロードする）</li><li>gzip -&gt; Brotli </li><li>端末、ブラウザによるJSをロードする</li></ol><p>また、Lighthouse を使って、性能予算を設定する</p><p><img src="http://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g358gekpplj21430l4k2y.jpg" alt="Performance Suggestion"></p><blockquote><p>関連Session：<br>Elevating the Web Platform with the JavaScript Framework Community (Google I/O ’19)<br>Speed at Scale: Web Performance Tips and Tricks from the Trenches (Google I/O ’19)</p></blockquote><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><p>他のパフォーマンスユースケース、ノウハウ、Web内容はここへ<br><a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLNYkxOF6rcIATmAmz7HcCzongGvQEtx8i</a></p><!-- Google 的架构建议1. 为不断发展的Web API而设计程序2. 避免惩罚新浏览器（polyfill等）3. 持续服务器缓存，保持高CDN命中率4. 避免重大修改并增强现有工具 -->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-新プロダクト-新技術&quot;&gt;&lt;a href=&quot;#Web-新プロダクト-新技術&quot; class=&quot;headerlink&quot; title=&quot;Web 新プロダクト / 新技術&quot;&gt;&lt;/a&gt;Web 新プロダクト / 新技術&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;web.dev というサイト&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;フレームワーク、パフォーマンス、Web各種技術など載っているグーグルが作ったまとめサイト&lt;/li&gt;
&lt;li&gt;全部無料で学べる&lt;/li&gt;
&lt;li&gt;今フレームワークはReact.jsだけけど、今後追加予定&lt;/li&gt;
&lt;li&gt;実践 Codelab、その場で試すことはできます&lt;/li&gt;
&lt;li&gt;翻訳は今進行中らしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lighthouse Performance Budgets&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/budgets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/tools/lighthouse/audits/budgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lighthouseにパフォーマンス時間 / ファイル大きさ予算を設定し、Lighthouseが測ってくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PWA Desktop&lt;ul&gt;
&lt;li&gt;PWA 今デスクトップOSにインストールできます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trusted Web Activity&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/using-twa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/updates/2019/02/using-twa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome Custom Tab のアップグレード版、タイトルバーがない&lt;/li&gt;
&lt;li&gt;よく見られるユースケースは、現存のアプリの中で、ファミリーアプリのウェブ版を入れて、ネイテイブ感を作る&lt;/li&gt;
&lt;li&gt;ウェブページにはschema urlでアプリにメッセージ送れます&lt;/li&gt;
&lt;li&gt;アプリは URL の後ろにパラメータ付けるならウェブページにメッセージ送れます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perception Toolkit&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/perception-toolkit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://web.dev/perception-toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shape Detection APIを使ってるツールキット&lt;/li&gt;
&lt;li&gt;バーコード、実物、画像を取得してウェブサイトのmetaから取った情報と比較して、関連カードを出す&lt;/li&gt;
&lt;li&gt;APIまだ使えないブラウザにWeb Assemblyを使う、互換性を保つ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Puppeteer with Firefox&lt;ul&gt;
&lt;li&gt;Firefoxが使えるようになりました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i puppeteer-firefox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>群晖 NAS 打造自动电视录像服务器</title>
    <link href="https://blog.xingoxu.com/2019/05/2019-05-16-record-jp-digital-TV-on-nas/"/>
    <id>https://blog.xingoxu.com/2019/05/2019-05-16-record-jp-digital-TV-on-nas/</id>
    <published>2019-05-16T07:47:37.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是录像服务器"><a href="#什么是录像服务器" class="headerlink" title="什么是录像服务器"></a>什么是录像服务器</h1><p>录像服务器就是指将电脑接上电视天线，把电视节目自动录制下来并保存在硬盘上。在日本许多电视机都会自带录制功能，指定节目之后每周录制相同时间段的节目，或者指定条件，自动录制符合条件的节目。这次我们就要来尝试在NAS上搭建这么一个录制服务器。</p><h1 id="为什么我们要搭建这样的服务器"><a href="#为什么我们要搭建这样的服务器" class="headerlink" title="为什么我们要搭建这样的服务器"></a>为什么我们要搭建这样的服务器</h1><p>既然电视机已经有了这样的功能，为什么还需要额外搭建这样的服务器呢。<br>电视机确实已经很强大，但我们也有串流需求，在家，在外边，在笔记本上随时随地都想收看录制的电视节目的话，只有一个电视机和收看设备的话很难做到。<br>搭建了这个服务器之后，我们还能实现在手机在电脑实时观看电视直播功能，画质当然与电视台一致。</p><h1 id="为什么要放在NAS上"><a href="#为什么要放在NAS上" class="headerlink" title="为什么要放在NAS上"></a>为什么要放在NAS上</h1><p>还不是为了拯救我那24小时开机的NAS但却只用来同步文件的电老虎吗</p><a id="more"></a><h1 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h1><ul><li>你的一台NAS<ul><li>我们需要在上边接上电视天线并运行录制程序</li><li>需要能够运行Docker与虚拟机 （<a href="https://www.synology.com/en-us/dsm/packages/Virtualization" target="_blank" rel="noopener">你可以在这里查看兼容机型</a>）</li></ul></li><li>PLEX USB地上波天线 PX-S1UD V2.0<ul><li>一个作为录制电视的初始入门的USB天线</li><li>不贵，约4530日元</li><li>一根天线只能录制一个节目，需要录制多个电视节目可以买多个</li><li><a href="https://www.amazon.co.jp/gp/product/B0141NFWSG/" target="_blank" rel="noopener">亚马逊购买链接</a></li></ul></li><li>SCM IC读卡器<ul><li>用来读取 B-CAS 卡、1000日元左右</li><li><a href="https://www.amazon.co.jp/gp/product/B0085H4YZC/" target="_blank" rel="noopener">亚马逊购买链接</a></li><li>注意这个发货并不一定是同一个品牌同一型号的读卡器，在之后的测试读卡器部分可能会出现一些问题，需要做好强大的心理准备</li><li>也可以用SoftCAS，不过感觉不是很可靠以及有触犯法律风险，不在本篇讨论范围</li></ul></li><li>大硬盘<ul><li>用来保存你的节目</li></ul></li><li>B-CAS 卡<ul><li>测试你可以从现在的电视上拿下来借用</li><li>后期你可以从不用的中古电视或者DVD录像机上取下来借用</li><li>亚马逊上可能有人出品，但买卖B-CAS卡可能触及法律风险需要注意</li></ul></li><li>天线分波器 / 分配器、一根天线连接线<ul><li>把一根天线变成两根天线的东西，或者把地上波与BS/CS波分开的东西，根据个人需要进行购买，并不必须</li></ul></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>以下内容仅保证文章撰写时点的有效性，本文并不面向初级用户，请仅有一定动手能力以及自己能够解决途中出现的问题的读者进行搭建，并请自行负担出现的任何问题与责任。<br>电视节目的复制，传播可能触及相关法律，在使用时请十分注意。<br>由于参考了本文进行的操作发生的任何损失，作者不负担任何责任与赔偿。</p><h1 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h1><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336pg2yuyj30fm0akgm2.jpg" alt="架构"></p><h1 id="NAS-准备"><a href="#NAS-准备" class="headerlink" title="NAS 准备"></a>NAS 准备</h1><ul><li>安装Docker</li><li>安装 Virtual Machine Manager</li><li>在虚拟机里安装Ubuntu 16或者18.04 或者随便你喜欢的发行版<ul><li>本文将以Ubuntu 18.04作为参考进行，其他发行版本请自行注意路径等</li><li>但无论如何注意 Linux 内核版本必须高于3.15（原因下述）</li><li>建议将虚拟机的Ubuntu设置成仅内网访问</li></ul></li></ul><h1 id="准备天线"><a href="#准备天线" class="headerlink" title="准备天线"></a>准备天线</h1><p>进入Ubuntu虚拟机，安装天线驱动，具体操作步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;plex-net.co.jp&#x2F;plex&#x2F;px-s1ud&#x2F;PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ unzip PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ sudo cp PX-S1UD_driver_Ver.1.0.1&#x2F;x64&#x2F;amd64&#x2F;isdbt_rio.inp &#x2F;lib&#x2F;firmware&#x2F;</span><br></pre></td></tr></table></figure><p>就算完成了</p><p>因为天线驱动最低支持3.15的Linux内核，而群晖的内核是3.10，导致没有办法将天线与调用天线驱动的内容放置在主机本体运行，才不得不使用了虚拟机这样的结构。</p><p>如果群晖之后升级到了3.15以上的内核，那可以尝试一下使用 <a href="https://github.com/Chinachu/docker-mirakurun-chinachu" target="_blank" rel="noopener">https://github.com/Chinachu/docker-mirakurun-chinachu</a> 的 Docker 镜像。</p><h1 id="准备读卡器与B-CAS卡"><a href="#准备读卡器与B-CAS卡" class="headerlink" title="准备读卡器与B-CAS卡"></a>准备读卡器与B-CAS卡</h1><p>在Ubuntu虚拟机内安装一些工具（之后也会使用到）与读卡器驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential git cmake g++</span><br><span class="line">$ sudo apt-get install pcscd libpcsclite-dev libccid pcsc-tools</span><br></pre></td></tr></table></figure><p>安装完毕之后，使用 <code>sudo pcsc_scan</code> 命令，如果出现了 <code>Japanese Chijou Digital B-CAS Card (pay TV)</code> 类似的字样，那么B-CAS卡的安装和驱动就顺利完成了</p><p>笔者在这里碰到过两个问题，一个是B-CAS插反了，没读到芯片（汗），另一个是B-CAS卡无效问题。<br>B-CAS卡如果无效的话，是会顺利出线上述字样的，但是之后无法正常使用录制电视，可以将B-CAS插上电视看一下是否有错误提示。</p><p>另外如果使用的不是NEC读头的读卡器，可能会没法扫描出或者没法启动pcscd（参考的原文章作者碰到了这个问题），读者可以自行搜索相关方法或参考下方参考文章链接。</p><h1 id="安装B-CAS解码用的相关库"><a href="#安装B-CAS解码用的相关库" class="headerlink" title="安装B-CAS解码用的相关库"></a>安装B-CAS解码用的相关库</h1><p>由于日本地上波加密后进行广播，直接录制的话也没法播放和保存。因此我们需要在接收信号的同时使用B-CAS卡进行解码并无视加密。实现这个的是一个叫libarib25的库。</p><p>这个库需要编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;stz2012&#x2F;libarib25&#x2F;archive&#x2F;master.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ cd libarib25-master</span><br><span class="line">$ cmake .</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>完成安装</p><h1 id="安装录像指令"><a href="#安装录像指令" class="headerlink" title="安装录像指令"></a>安装录像指令</h1><p>我们需要安装recdvb这个录像指令，之后的录像管理都会调用这个指令来进行。<br>源代码是公开的但是没有放在github上，需要编译安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;www13.plala.or.jp&#x2F;sat&#x2F;recdvb&#x2F;recdvb-1.3.2.tgz</span><br><span class="line">$ tar xvzf recdvb-1.3.2.tgz</span><br><span class="line">$ cd recdvb-1.3.2</span><br><span class="line">$ .&#x2F;autogen.sh</span><br><span class="line">$ .&#x2F;configure --enable-b25</span><br><span class="line">$ make </span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>完成安装。</p><p>安装之后就可以使用这个指令直接录制电视节目了。<br>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip &lt;channel&gt; &lt;seconds&gt; test.m2ts</span><br></pre></td></tr></table></figure><p>channel根据地区，放送电波塔不同，数字不同，可以在<a href="http://www.maspro.co.jp/contact/channel.pdf" target="_blank" rel="noopener">这里</a>进行确认。</p><p>另外，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip --http &lt;port&gt;</span><br></pre></td></tr></table></figure><p>指令，在本地起一个服务器推送流，<br>使用VLC或者IINA可以打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IPアドレス]:8080&#x2F;[channel number]</span><br></pre></td></tr></table></figure><p>channel number就是上边那个数字。</p><p>但，在这之前，<br>需要在Ubuntu虚拟机的<code>/etc/hosts</code>中设定连接者的ip域名（为了保证安全），<br>我的话并没有在外网访问Tuner Server的想法，并不需要这样的设定，因此修改源代码重新编译安装。</p><blockquote><p>参考 <a href="https://nyanonon.hatenablog.com/entries/2015/11/17" target="_blank" rel="noopener">https://nyanonon.hatenablog.com/entries/2015/11/17</a></p></blockquote><p>按下 <code>Ctrl+C</code> 关闭推送流服务器。</p><h1 id="安装mirakurun-建立Tuner-Server"><a href="#安装mirakurun-建立Tuner-Server" class="headerlink" title="安装mirakurun 建立Tuner Server"></a>安装mirakurun 建立Tuner Server</h1><p>Mirakurun是一个Node.js编写的系统，具有同时多频道录像，多天线管理，优先度处理功能。<br>以及提供了各种API，以方便对应各种客户端的请求，在外网无法直接访问服务器也可以管理预约录制节目等。</p><p>安装Mirakurun可以参照</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md</a></p></blockquote><p>以下内容方便参照部分搬运</p><h2 id="安装-Node-js-10"><a href="#安装-Node-js-10" class="headerlink" title="安装 Node.js 10"></a>安装 Node.js 10</h2><blockquote><p>请参照 <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall" target="_blank" rel="noopener">https://github.com/nodesource/distributions/blob/master/README.md#debinstall</a></p></blockquote><h2 id="安装-PM2"><a href="#安装-PM2" class="headerlink" title="安装 PM2"></a>安装 PM2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="安装Mirakurun主程序"><a href="#安装Mirakurun主程序" class="headerlink" title="安装Mirakurun主程序"></a>安装Mirakurun主程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install mirakurun -g --unsafe-perm --production</span><br></pre></td></tr></table></figure><h2 id="配置Mirakurun"><a href="#配置Mirakurun" class="headerlink" title="配置Mirakurun"></a>配置Mirakurun</h2><p>主要是对Tuner进行配置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun config tuners</span><br></pre></td></tr></table></figure><p>这里卡了很久，一直没法成功录制，但最终注释掉了一些奇怪的配置就搞定了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PX-S1UD-1</span></span><br><span class="line">  <span class="attr">types:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GR</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">recdev</span> <span class="string">--b25</span> <span class="string">--strip</span> <span class="string">&lt;channel&gt;</span> <span class="bullet">-</span> <span class="bullet">-</span></span><br><span class="line">  <span class="attr">isDisabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun restart</span><br></pre></td></tr></table></figure><p>重启mirakurun之后查看 pm2 log，如果没有错误正常开始Recording，表示搭建成功。</p><p>频道的话对Tuner设置成功之后会自己更新频道并更新节目列表，因此无需其他操作，一个天线的情况下耐心等待5分钟到10分钟左右即可。</p><p>到这里为止，我们所有服务端的设置基本就完成了，Mirakurun本身已经提供了API，可以通过API进行调用获得节目信息或者录制，也提供了Http流推送，来方便其他客户端进行录制。</p><p>API使用等可以参阅</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun</a></p></blockquote><h1 id="安装Chinachu以及ffmpeg等软件"><a href="#安装Chinachu以及ffmpeg等软件" class="headerlink" title="安装Chinachu以及ffmpeg等软件"></a>安装Chinachu以及ffmpeg等软件</h1><p>我们需要一个可视化客户端来帮助我们管理预约，对Mirakurun进行下达命令。<br>于是我们需要安装Chinachu。</p><p>由于这里开始，我们可以在Docker中也能完成这样的任务，搭建过程就省略，取而代之大家可以到</p><blockquote><p><a href="https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg" target="_blank" rel="noopener">https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg</a></p></blockquote><p>查看DockerFile，或者参照DockerFile自行编写自己需要的脚本来进行搭建Chinachu。</p><p>如果读者按照我的镜像进行搭建，需要注意如下（自己编写Docker脚本时也需注意一些Docker问题）</p><ul><li><p>时区问题</p><ul><li>需要挂载 <code>/etc/localtime:/etc/localtime:ro</code></li></ul></li><li><p>Chinachu 的预约/设置数据</p><ul><li>挂载如下文件与目录以防止容器重建丢失数据、</li><li>./chinachu/data:/chinachu/data</li><li>./chinachu/rules.json:/chinachu/rules.json</li><li>./chinachu/config.json:/chinachu/config.json</li></ul></li><li><p>日志问题</p><ul><li>Chinachu和pm2已经自带日志，就不需要Docker再帮我们兜一层日志了</li><li>编写启动脚本 并设置入口点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">pm2-runtime processes.json &gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不要忘记挂载录像目录</p><ul><li>/volume2/TVRecorded:/chinachu/recorded</li></ul></li><li><p>不要忘记暴露端口</p></li></ul><h2 id="配置Chinachu设置"><a href="#配置Chinachu设置" class="headerlink" title="配置Chinachu设置"></a>配置Chinachu设置</h2><p>Chinachu的官方配置文档在这里</p><blockquote><p><a href="https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration" target="_blank" rel="noopener">https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration</a></p></blockquote><p>基本没有什么太多需要注意的，将预设内容拷贝一份挂载进Docker就可以。</p><p>需要注意vaapi相关内容，下述。</p><p>之后就启动Docker容器吧，启动脚本就请各位自行挂载并启动了<br>也可以使用docker-compose来启动，<code>docker-compose up</code></p><h2 id="搭建成功"><a href="#搭建成功" class="headerlink" title="搭建成功"></a>搭建成功</h2><p>输入 NAS 地址和端口号后进入Chinachu界面并能看到节目表基本就算成功了。</p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g336sgurv5j224s17k1ky.jpg" alt="节目表"></p><h2 id="添加录制后转码脚本"><a href="#添加录制后转码脚本" class="headerlink" title="添加录制后转码脚本"></a>添加录制后转码脚本</h2><p>录制后是m2ts的TS文件，我们可以利用 NAS 闲暇 CPU （x86架构的 nas 基本都具有硬件加速）将 TS 文件转换成 mp4，缩小文件体积保存等。</p><p>需要注意的是，如果我们需要使用vaapi（Intel CPU的硬件加速解码），那么我们在启动Docker时需要使用root权限，否则无法访问 <code>/dev/dri/renderD128</code>硬件。</p><p>但是录制后的文件的所有者就会变成root，其他应用程序读取或修改的时候会有一些问题，因此我推荐在录制后，转码后，可以自己编写脚本来重新设置权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown &lt;uid&gt;:&lt;gid&gt; &lt;&#x2F;path&#x2F;to&#x2F;file&gt;</span><br></pre></td></tr></table></figure><p>ffmpeg的相关参数我在这里贴出自己的进行共享，你当然也可以参照官方文档进行调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg \</span><br><span class="line">  -init_hw_device vaapi&#x3D;intel:&#x2F;dev&#x2F;dri&#x2F;renderD128 -hwaccel vaapi -hwaccel_output_format vaapi -hwaccel_device intel -filter_hw_device intel \</span><br><span class="line">  -i &#x2F;path&#x2F;to&#x2F;recorded&#x2F;file \</span><br><span class="line">  -analyzeduration 30M -probesize 30M \</span><br><span class="line">  -vf &#39;format&#x3D;nv12|vaapi,hwupload,deinterlace_vaapi&#39; \</span><br><span class="line">  -c:v h264_vaapi  \</span><br><span class="line">  -threads 4 \</span><br><span class="line">  &#x2F;path&#x2F;to&#x2F;output&#x2F;file</span><br></pre></td></tr></table></figure><p>注：这里的环境PATH比较微妙，请一定使用绝对路径。</p><p>我写了一个 shell 脚本，将脚本命名成你喜欢的名称，假设 <code>afterRecord</code> ，不要忘记赋予执行权限，在 <code>config.json</code> 中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;recordedCommand&quot;: &quot;.&#x2F;userScripts&#x2F;afterRecord&quot;,</span><br></pre></td></tr></table></figure><p>你可以根据自己需求修改转码设置，或者添加LINE通知等功能，打造属于自己的录像服务器。</p><h1 id="另外一些配置"><a href="#另外一些配置" class="headerlink" title="另外一些配置"></a>另外一些配置</h1><h2 id="给WebGUI设置访问权限"><a href="#给WebGUI设置访问权限" class="headerlink" title="给WebGUI设置访问权限"></a>给WebGUI设置访问权限</h2><p>直接把 WebGUI 暴露在公网上还是很危险的，我们给界面添加一个密码输入，保证录像服务器只能自己用。</p><p>由于我用了 docker-compose ，可以很方便的添加 nginx 并设置反代</p><h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo htpasswd -c &#x2F;path&#x2F;to&#x2F;.htpasswd &lt;username&gt;</span><br></pre></td></tr></table></figure><h3 id="拷贝至服务器"><a href="#拷贝至服务器" class="headerlink" title="拷贝至服务器"></a>拷贝至服务器</h3><p>在服务器上直接生成的可以跳过</p><h3 id="修改nginx-配置-重启-docker"><a href="#修改nginx-配置-重启-docker" class="headerlink" title="修改nginx 配置 重启 docker"></a>修改nginx 配置 重启 docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_pass   http:&#x2F;&#x2F;localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;&#x2F;etc&#x2F;nginx&#x2F;.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose restart</span><br></pre></td></tr></table></figure><p>刷新界面，此时应该被要求输入密码</p><h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><p>通过自己的脚本来创建的文件群晖是无法增加索引的，以至于在DLNA广播中无法显示我们转码或者录制的文件</p><p>假设我们的录像文件直接存储在<code>/path/to/record/folder</code>下面，我们可以编写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/record/folder</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mediafile <span class="keyword">in</span> $(find /path/to/record/folder -maxdepth 1 -<span class="built_in">type</span> f -mmin -&lt;minutes&gt; -not -name .DS_Store)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">synoindex -a <span class="variable">$mediafile</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>其中第三行 <code>cd</code> 不可漏去，否则群晖不会在此文件夹中执行 <code>find</code> 。</p><p>保存脚本，假设 <code>reindexTVRecorded</code>，在 <code>控制面板 - 任务计划 - 新增 - 计划任务 - 用户脚本</code>，输入计划，输入任务运行脚本保存即可</p><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336q15opxj31bx0u0wmy.jpg" alt="重新索引"></p><h1 id="存在的问题（没有实现的需求）"><a href="#存在的问题（没有实现的需求）" class="headerlink" title="存在的问题（没有实现的需求）"></a>存在的问题（没有实现的需求）</h1><ul><li>字幕<ul><li>有部分电视台同时放送字幕，录制的TS是有字幕的，可以在VLC确认到</li><li>但没有办法使用网上的通用方法比如assdumper提取出来，提取出来是空的</li><li>暂时没有尝试使用 <code>Caption2Ass.exe</code>等windows程序</li></ul></li><li>多国声道<ul><li>存在两个问题</li></ul><ol><li>使用双声道在单声道中分别放送两个国家的音源（多存在于NHK新闻）</li><li>使用多个流推送多国声道</li></ol><ul><li>无论哪种情况，使用了网上的无论哪种包括<br><code>-filter_complex channelsplit</code> 或者<br><code>-dual_mono_mode main</code><br>都无法成功解决</li></ul></li></ul><p>对以上问题如果有办法解决的读者请联系我 m__m</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>在手中有NAS的情况下1w不到搭建一个这样的录像服务器还是性价比很高的，之后就可以随时随地观看一些并不那么需要大屏幕观看的内容。</p><p>文章中还是充满了自己自身的需求，另外文章编写的时候已经间隔搭建完差不多有一个月左右的时间，有些细节可能没有办法很到位描写清楚，如果你有什么问题，可以在评论区留言。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://qiita.com/shotasano/items/3809b8f3e0b62d51d3c3" target="_blank" rel="noopener">Raspberry Pi 3+Chinachuで地デジ録画サーバー構築</a><br><a href="https://ywnb.net/p/201612/3264" target="_blank" rel="noopener">Linuxの自宅サーバをテレビ化して家中どこでもテレビが見れる環境を作ろう(2)</a><br><a href="https://www.jianshu.com/p/e62c2a1cd3ab" target="_blank" rel="noopener">通过Nginx反向代理配置Basic Authentication实现kibana的访问安全</a><br><a href="http://arc680.hatenablog.jp/entry/2017/01/31/005135" target="_blank" rel="noopener">2017/01/30 時点での録画サーバ構築手順</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是录像服务器&quot;&gt;&lt;a href=&quot;#什么是录像服务器&quot; class=&quot;headerlink&quot; title=&quot;什么是录像服务器&quot;&gt;&lt;/a&gt;什么是录像服务器&lt;/h1&gt;&lt;p&gt;录像服务器就是指将电脑接上电视天线，把电视节目自动录制下来并保存在硬盘上。在日本许多电视机都会自带录制功能，指定节目之后每周录制相同时间段的节目，或者指定条件，自动录制符合条件的节目。这次我们就要来尝试在NAS上搭建这么一个录制服务器。&lt;/p&gt;
&lt;h1 id=&quot;为什么我们要搭建这样的服务器&quot;&gt;&lt;a href=&quot;#为什么我们要搭建这样的服务器&quot; class=&quot;headerlink&quot; title=&quot;为什么我们要搭建这样的服务器&quot;&gt;&lt;/a&gt;为什么我们要搭建这样的服务器&lt;/h1&gt;&lt;p&gt;既然电视机已经有了这样的功能，为什么还需要额外搭建这样的服务器呢。&lt;br&gt;电视机确实已经很强大，但我们也有串流需求，在家，在外边，在笔记本上随时随地都想收看录制的电视节目的话，只有一个电视机和收看设备的话很难做到。&lt;br&gt;搭建了这个服务器之后，我们还能实现在手机在电脑实时观看电视直播功能，画质当然与电视台一致。&lt;/p&gt;
&lt;h1 id=&quot;为什么要放在NAS上&quot;&gt;&lt;a href=&quot;#为什么要放在NAS上&quot; class=&quot;headerlink&quot; title=&quot;为什么要放在NAS上&quot;&gt;&lt;/a&gt;为什么要放在NAS上&lt;/h1&gt;&lt;p&gt;还不是为了拯救我那24小时开机的NAS但却只用来同步文件的电老虎吗&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Synology NASに自宅で録画サーバーを立てました</title>
    <link href="https://blog.xingoxu.com/ja/2019/05/2019-05-16-record-jp-digital-TV-on-nas/"/>
    <id>https://blog.xingoxu.com/ja/2019/05/2019-05-16-record-jp-digital-TV-on-nas/</id>
    <published>2019-05-16T07:47:37.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="なぜNASに"><a href="#なぜNASに" class="headerlink" title="なぜNASに"></a>なぜNASに</h1><p>NASを持ってる方多いと思いますし、NASは24時間起動してるので、新しいデバイス買わなく節電できて録画サービスを任せろう。</p><h1 id="使うもの"><a href="#使うもの" class="headerlink" title="使うもの"></a>使うもの</h1><ul><li>Synology NAS 一台<ul><li>アンテナを接続してリコードする</li><li>DockerとVirtual Machine Manager対応機種 （<a href="https://www.synology.com/en-us/dsm/packages/Virtualization" target="_blank" rel="noopener">機種一覧</a>）</li></ul></li><li>PLEX USB地上波アンテナ PX-S1UD V2.0<ul><li>初心者に優しい地デジアンテナ</li><li>高くない、4530円</li><li>1チャンネルのみの視聴、録画が可能、買い足して同時受信チャンネルが増やせる</li><li><a href="https://www.amazon.co.jp/gp/product/B0141NFWSG/" target="_blank" rel="noopener">買う</a></li></ul></li><li>SCM IC读卡器<ul><li>B-CASカードの読み取り用、1000円ぐらい</li><li><a href="https://www.amazon.co.jp/gp/product/B0085H4YZC/" target="_blank" rel="noopener">買う</a></li><li>型番は同じではないかも、SCMじゃないやつ届けられたら自己調整必要</li><li>SoftCASも使えるらしいが、私は使わない</li></ul></li><li>HDD<ul><li>録画した映像保存用</li></ul></li><li>B-CAS カード<ul><li>テストはテレビから借りるのはいいと思います</li><li>アマゾンにも誰が売ってるらしいが、自己責任でお願いします</li></ul></li><li>アンテナ分波器 / 分配器 、接続線<ul><li>TVと同時視聴するため。必須ではない。</li></ul></li></ul><a id="more"></a><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>記事書く時点だけの有効性を保証します、エンドユーザー、コンピュータ初心者向けではない。<br>以下の手順は全て自己責任で、何かしらの問題が発生しても自力で対処できる方のみ実行してください。<br>テレビ番組のコピー、配信は違法となる場合があります。使用についても十分注意して下さい。<br>この記事を参考にしたことにより生じたあらゆる損害について、著者は一切の責任を負いません。</p><h1 id="構造"><a href="#構造" class="headerlink" title="構造"></a>構造</h1><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336pg2yuyj30fm0akgm2.jpg" alt="架构"></p><p>大体こういう感じでやっていきたいと思います。</p><h1 id="NAS-の準備"><a href="#NAS-の準備" class="headerlink" title="NAS の準備"></a>NAS の準備</h1><ul><li>Dockerをインストール</li><li>Virtual Machine Manager　をインストール</li><li>VMM に Ubuntu 16.04/18.04をインストール<ul><li>他のLinux Distrubtionもできるかも、本記事はUbuntu 18.04で説明します</li><li>Linuxのカーネルは3.15を越えないといけない（理由あと説明）</li><li>LANのみアクセスできるように設定するのはおすすめ</li></ul></li></ul><h1 id="アンテナ設置"><a href="#アンテナ設置" class="headerlink" title="アンテナ設置"></a>アンテナ設置</h1><p>VMにアンテナのドライバをインストールします</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;plex-net.co.jp&#x2F;plex&#x2F;px-s1ud&#x2F;PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ unzip PX-S1UD_driver_Ver.1.0.1.zip</span><br><span class="line">$ sudo cp PX-S1UD_driver_Ver.1.0.1&#x2F;x64&#x2F;amd64&#x2F;isdbt_rio.inp &#x2F;lib&#x2F;firmware&#x2F;</span><br></pre></td></tr></table></figure><p>完了。</p><p>アンテナドライバ最低3.15のLinux カーネル必要なので、Synology NASのLinuxカーネルは3.10なのでVMを立って使います。</p><p>もし今後 NAS のカーネルが3.15以上になったら、次回 <a href="https://github.com/Chinachu/docker-mirakurun-chinachu" target="_blank" rel="noopener">https://github.com/Chinachu/docker-mirakurun-chinachu</a> の Docker イメージを使ってみたいと思います。</p><h1 id="カードリーダーとB-CASの準備"><a href="#カードリーダーとB-CASの準備" class="headerlink" title="カードリーダーとB-CASの準備"></a>カードリーダーとB-CASの準備</h1><p>カードリーダーソフトとビルドツールのパッケージをインストールします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential git cmake g++</span><br><span class="line">$ sudo apt-get install pcscd libpcsclite-dev libccid pcsc-tools</span><br></pre></td></tr></table></figure><p>完了後、<code>sudo pcsc_scan</code> を実行して、<code>Japanese Chijou Digital B-CAS Card (pay TV)</code>みたいものでたら完成です。</p><p>しかし、私はここ２つ問題遭った、<br>１つ目は入れ間違えたww、<br>２つ目はB-CASカード無効問題、B-CASカードを最初にテレビに入れて見てみたら多分分かると思います。</p><p>型番も問題になるかもしれない、参考した記事の作家さんは遭ったのでそちらの記事をお越しいただければと思います。</p><h1 id="B-CASのデコード用ライブラリのインストール"><a href="#B-CASのデコード用ライブラリのインストール" class="headerlink" title="B-CASのデコード用ライブラリのインストール"></a>B-CASのデコード用ライブラリのインストール</h1><p>日本の地デジ放送は暗号化された状態で配信されているため、そのまま受信して保存すると再生や複製の際に問題が起こる。そこで、B-CASカードの情報を使って受信と同時に復号するのが望ましい。これを実現するライブラリがlibarib25だ。</p><p>コンパイル必要です</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;github.com&#x2F;stz2012&#x2F;libarib25&#x2F;archive&#x2F;master.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ cd libarib25-master</span><br><span class="line">$ cmake .</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>インストール完了です。</p><h1 id="録画用コマンドのインストール"><a href="#録画用コマンドのインストール" class="headerlink" title="録画用コマンドのインストール"></a>録画用コマンドのインストール</h1><p>録画ソフトはこれを使って録画しますので、recdvbをインストールします。<br>ソースコードあるんけど、Githubに載っていない。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;www13.plala.or.jp&#x2F;sat&#x2F;recdvb&#x2F;recdvb-1.3.2.tgz</span><br><span class="line">$ tar xvzf recdvb-1.3.2.tgz</span><br><span class="line">$ cd recdvb-1.3.2</span><br><span class="line">$ .&#x2F;autogen.sh</span><br><span class="line">$ .&#x2F;configure --enable-b25</span><br><span class="line">$ make </span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>インストール完了。</p><p>この時点で、コマンドでの録画が可能になった。例えば、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip &lt;channel&gt; &lt;seconds&gt; test.m2ts</span><br></pre></td></tr></table></figure><p>チャンネルは受信タワーによる違いますので、<a href="http://www.maspro.co.jp/contact/channel.pdf" target="_blank" rel="noopener">こちら</a>から確認できます。</p><p>また、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ recdvb --b25 --strip --http &lt;port&gt;</span><br></pre></td></tr></table></figure><p>を使ったらリアルタイムストリーミングを配信します。</p><p>Windows / MacのVLCかMacのIINAからURLを開いたら直接見れます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IPアドレス]:8080&#x2F;[channel number]</span><br></pre></td></tr></table></figure><p>チャンネルは上と同じです。</p><p>だが、その前に、<br>VMの<code>/etc/hosts</code>を設定しなければいけない（安全保障かな）、<br>でも私のチューナーサーバーはWANに公開するつもりはないので下のリンクを参考して解除しました。</p><blockquote><p><a href="https://nyanonon.hatenablog.com/entries/2015/11/17" target="_blank" rel="noopener">https://nyanonon.hatenablog.com/entries/2015/11/17</a></p></blockquote><p><code>Ctrl+C</code> を押して終了させます。</p><h1 id="Mirakurunをインストールしてチューナーサーバーを立ちます"><a href="#Mirakurunをインストールしてチューナーサーバーを立ちます" class="headerlink" title="Mirakurunをインストールしてチューナーサーバーを立ちます"></a>Mirakurunをインストールしてチューナーサーバーを立ちます</h1><p>チューナーサーバーMirakurunではWeb APIを提供して、録画コマンドの並列処理や、複数チューナーの管理、優先度処理など様々な機能が利用できます。<br>Mirakurunのクライエントを通じて外でも番組を予約もできる。</p><p>Mirakurunのインストールはこちらへ参考していただければと思います。</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun/blob/master/doc/Platforms.md</a></p></blockquote><p>ざっくりここで書きます</p><h2 id="Node-js-10-をインストール"><a href="#Node-js-10-をインストール" class="headerlink" title="Node.js 10 をインストール"></a>Node.js 10 をインストール</h2><blockquote><p>请参照 <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall" target="_blank" rel="noopener">https://github.com/nodesource/distributions/blob/master/README.md#debinstall</a></p></blockquote><h2 id="PM2をインストール"><a href="#PM2をインストール" class="headerlink" title="PM2をインストール"></a>PM2をインストール</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="Mirakurun-メインプログラムインストール"><a href="#Mirakurun-メインプログラムインストール" class="headerlink" title="Mirakurun メインプログラムインストール"></a>Mirakurun メインプログラムインストール</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install mirakurun -g --unsafe-perm --production</span><br></pre></td></tr></table></figure><h2 id="Mirakurun-を設定"><a href="#Mirakurun-を設定" class="headerlink" title="Mirakurun を設定"></a>Mirakurun を設定</h2><p>Tuner設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun config tuners</span><br></pre></td></tr></table></figure><p>ここで半日間かかった！わけわからんパラメーターを抜いたら使えました！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PX-S1UD-1</span></span><br><span class="line">  <span class="attr">types:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GR</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">recdev</span> <span class="string">--b25</span> <span class="string">--strip</span> <span class="string">&lt;channel&gt;</span> <span class="bullet">-</span> <span class="bullet">-</span></span><br><span class="line">  <span class="attr">isDisabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Mirakurun再起動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mirakurun restart</span><br></pre></td></tr></table></figure><p><code>pm2 log</code> で状況を見てみましょう、特になんのエラーが出てなく、<code>Recording</code> が出たら多分大丈夫です。</p><p>チャンネルの設定は Mirakurun は自分が取得しますので、5-10分ぐらい待てばいい。</p><p>ここまでチューナーサーバーの設定は完了しました。<br>MirakurunはAPIとHttp Streamingも提供してるので、<br>APIの使用はここへ</p><blockquote><p><a href="https://github.com/Chinachu/Mirakurun" target="_blank" rel="noopener">https://github.com/Chinachu/Mirakurun</a></p></blockquote><h1 id="Chinachu-ffmpeg-をインストールする"><a href="#Chinachu-ffmpeg-をインストールする" class="headerlink" title="Chinachu / ffmpeg をインストールする"></a>Chinachu / ffmpeg をインストールする</h1><p>でもGUIクライエントがないとめんどくさい、Chinachuをインストールします。</p><p>Dockerのイメージを作りましたので、DockerFile参照して使うか、自分がカストマイズするもよい。</p><blockquote><p><a href="https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg" target="_blank" rel="noopener">https://github.com/xingoxu/docker-chinachu-vaapi-ffmpeg</a></p></blockquote><p>もし私のDockerFileを参照して立ているなら、下記を注意してください。<br>（Dockerを利用する方も見るといい）</p><ul><li><p>タイムゾーン問題</p><ul><li><code>/etc/localtime:/etc/localtime:ro</code>をマウント</li></ul></li><li><p>Chinachu の予約、設定データ</p><ul><li>下記のファイルとフォルダをマウントしてデータを保存しましょう</li><li><code>./chinachu/data:/chinachu/data</code></li><li><code>./chinachu/rules.json:/chinachu/rules.json</code></li><li><code>./chinachu/config.json:/chinachu/config.json</code></li></ul></li><li><p>膨大ログ問題</p><ul><li>Chinachuとpm2はログ入ってるから、Dockerのログはいらない、エラーだけを出力させろう</li><li>下記スクリプトを書いて保存して入り口を設定します。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">pm2-runtime processes.json &gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure></li></ul></li><li><p>録画ファルダのマウントをお忘れなく</p><ul><li><code>/volume2/TVRecorded:/chinachu/recorded</code></li></ul></li><li><p>ポートの公開</p></li></ul><h2 id="Chinachu-設定"><a href="#Chinachu-設定" class="headerlink" title="Chinachu 設定"></a>Chinachu 設定</h2><p>公式ドキュメント</p><blockquote><p><a href="https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration" target="_blank" rel="noopener">https://github.com/Chinachu/Chinachu/wiki/Gamma-Configuration</a></p></blockquote><p>基本、コピーしてちょっとカストマイズすれば大丈夫。</p><p>VAAPIについてはあとトランスコードの部分で説明します。</p><p>それで、Dockerを起動して、<br><code>docker-compose</code>も利用可能ですので、自分のニーズをあわせてChinachuを起動します。</p><h2 id="できましたか"><a href="#できましたか" class="headerlink" title="できましたか"></a>できましたか</h2><p>NASのURLとポート番号をブラウザに入力して下の画面見れると成功です。</p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1g336sgurv5j224s17k1ky.jpg" alt="节目表"></p><h2 id="録画後のトランスコード"><a href="#録画後のトランスコード" class="headerlink" title="録画後のトランスコード"></a>録画後のトランスコード</h2><p>録画したファイルは大きな生TS、 大体 x86 アーキテクチャの NAS はハードウェアアクセラレーションついてるので、速いスピードでmp4にトランスコードして、どこでも見れるコーデックにしながら、ファイルサイズも小さくさせる。</p><p>注意するべきのはDockerにvaapi（Intel CPUのハードウェアアクセラレーション）を使うと、rootの権限でアプリを走らないと行けない（<code>/dev/dri/renderD128</code>をアクセスために）</p><p>だがこうすると、録画したファイルはrootが所有者になって、他のアプリの編集は出来ないので、録画後、トランスコードした後、chownを走らせましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown &lt;uid&gt;:&lt;gid&gt; &lt;&#x2F;path&#x2F;to&#x2F;file&gt;</span><br></pre></td></tr></table></figure><p>ffmpegのパラメーターも共有しますが、自分のニーズをあわせて公式ドキュメントを参照して調整できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg \</span><br><span class="line">  -init_hw_device vaapi&#x3D;intel:&#x2F;dev&#x2F;dri&#x2F;renderD128 -hwaccel vaapi -hwaccel_output_format vaapi -hwaccel_device intel -filter_hw_device intel \</span><br><span class="line">  -i &#x2F;path&#x2F;to&#x2F;recorded&#x2F;file \</span><br><span class="line">  -analyzeduration 30M -probesize 30M \</span><br><span class="line">  -vf &#39;format&#x3D;nv12|vaapi,hwupload,deinterlace_vaapi&#39; \</span><br><span class="line">  -c:v h264_vaapi  \</span><br><span class="line">  -threads 4 \</span><br><span class="line">  &#x2F;path&#x2F;to&#x2F;output&#x2F;file</span><br></pre></td></tr></table></figure><p>注意：ここのPATHは絶対にフルパスを指定してください、そうじゃないと妙なところに行っちゃいますよ。</p><p>名前をつけて、<code>afterRecord</code>とし、 <code>config.json</code> に</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "recordedCommand": "./userScripts/afterRecord",</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>を編集して。</p><p>自分のニーズ合わせてスクリプトをカストマイズして自分唯一無二のサーバーを作りましょう！<br>僕はLINE通知を入ってて録画したら通知がLINEに来ますね。</p><h1 id="NASでやるべきのこと"><a href="#NASでやるべきのこと" class="headerlink" title="NASでやるべきのこと"></a>NASでやるべきのこと</h1><h2 id="WebGUI-パスワードをつける"><a href="#WebGUI-パスワードをつける" class="headerlink" title="WebGUI パスワードをつける"></a>WebGUI パスワードをつける</h2><p>WebGUIそのままWANに公開するとちょっと危ない、入るときパスワード機能を入れましょう、自分だけ入ることを確保しましょう。</p><p>僕docker-compose を使ったから、すぐ nginx を追加できます。</p><h3 id="パスワードを生成する"><a href="#パスワードを生成する" class="headerlink" title="パスワードを生成する"></a>パスワードを生成する</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo htpasswd -c &#x2F;path&#x2F;to&#x2F;.htpasswd &lt;username&gt;</span><br></pre></td></tr></table></figure><h3 id="サーバーにコピーして"><a href="#サーバーにコピーして" class="headerlink" title="サーバーにコピーして"></a>サーバーにコピーして</h3><p>サーバーで生成する方はスキップー</p><h3 id="nginx-を設定して-docker-compose-再起動"><a href="#nginx-を設定して-docker-compose-再起動" class="headerlink" title="nginx を設定して docker-compose 再起動"></a>nginx を設定して docker-compose 再起動</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_pass   http:&#x2F;&#x2F;localhost:5601;</span><br><span class="line">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class="line">    auth_basic_user_file &quot;&#x2F;etc&#x2F;nginx&#x2F;.htpasswd&quot;;       </span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose restart</span><br></pre></td></tr></table></figure><p>ブラウザをリフレッシュして、ここでパスワードが求められてるはずです。</p><h2 id="NAS-再インデックス"><a href="#NAS-再インデックス" class="headerlink" title="NAS 再インデックス"></a>NAS 再インデックス</h2><p>自分のスクリプトで作ったファイルは NAS は知らないので、DLNAとかで出てこない。<br>そこで再インデックスする必要があります。</p><p>仮にすべて録画したファイルは<code>/path/to/record/folder</code>の第一層でいる、このようなスクリプトを書いて</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/record/folder</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mediafile <span class="keyword">in</span> $(find /path/to/record/folder -maxdepth 1 -<span class="built_in">type</span> f -mmin -&lt;minutes&gt; -not -name .DS_Store)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">synoindex -a <span class="variable">$mediafile</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>reindexTVRecorded</code>を名前を付けて、 <code>Control Panel - Task - New - Scheduled - User Script</code>、時間とか選択して、スクリプトのパス入れて「はい」を押したら完了。</p><p><img src="https://static.xingoxu.com/blog/sinaimg/005BYqpggy1g336q15opxj31bx0u0wmy.jpg" alt="重新索引"></p><h1 id="残りの問題と課題"><a href="#残りの問題と課題" class="headerlink" title="残りの問題と課題"></a>残りの問題と課題</h1><ul><li>字幕<ul><li>録画したTSはVLCで字幕見れますけど、どうすればsrtを抽出できる</li><li>assdumper使ったけど、何も出てこない</li><li><code>Caption2Ass.exe</code>などwindowsプログラムは使ってない</li></ul></li><li>多国音声<ul><li>２つの問題があって</li></ul><ol><li>ステレオで一つずつモノラル音声で２つ国の音声放送された（NHKニュースよくある）</li><li>多ストリーミングで多国音声放送された</li></ol><ul><li><code>-filter_complex channelsplit</code> か<br><code>-dual_mono_mode main</code><br>ネットによく見たパラメーターどっちを使ってもエラーが出ちゃう</li></ul></li></ul><p>心当たりがある方教えていただければ幸いです！ m__m</p><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>NASがある場合は5000ぐらいで立てるのはいいと思います、今後どこでもテレビを見れると嬉しい。</p><p>記事の中は自分自身の特集のニーズいっぱい詰まってるし、記事を書くときも立てたから一ヶ月ぐらいがあって、抜けている箇所があるかもしれないし、変な日本語もあるかも、もし何が不明点があればコメントで書いてくださいー</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://qiita.com/shotasano/items/3809b8f3e0b62d51d3c3" target="_blank" rel="noopener">Raspberry Pi 3+Chinachuで地デジ録画サーバー構築</a><br><a href="https://ywnb.net/p/201612/3264" target="_blank" rel="noopener">Linuxの自宅サーバをテレビ化して家中どこでもテレビが見れる環境を作ろう(2)</a><br><a href="https://www.jianshu.com/p/e62c2a1cd3ab" target="_blank" rel="noopener">通过Nginx反向代理配置Basic Authentication实现kibana的访问安全</a><br><a href="http://arc680.hatenablog.jp/entry/2017/01/31/005135" target="_blank" rel="noopener">2017/01/30 時点での録画サーバ構築手順</a></p></blockquote><p>最後まで読んでいただきありがとうございました！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;なぜNASに&quot;&gt;&lt;a href=&quot;#なぜNASに&quot; class=&quot;headerlink&quot; title=&quot;なぜNASに&quot;&gt;&lt;/a&gt;なぜNASに&lt;/h1&gt;&lt;p&gt;NASを持ってる方多いと思いますし、NASは24時間起動してるので、新しいデバイス買わなく節電できて録画サービスを任せろう。&lt;/p&gt;
&lt;h1 id=&quot;使うもの&quot;&gt;&lt;a href=&quot;#使うもの&quot; class=&quot;headerlink&quot; title=&quot;使うもの&quot;&gt;&lt;/a&gt;使うもの&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Synology NAS 一台&lt;ul&gt;
&lt;li&gt;アンテナを接続してリコードする&lt;/li&gt;
&lt;li&gt;DockerとVirtual Machine Manager対応機種 （&lt;a href=&quot;https://www.synology.com/en-us/dsm/packages/Virtualization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;機種一覧&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PLEX USB地上波アンテナ PX-S1UD V2.0&lt;ul&gt;
&lt;li&gt;初心者に優しい地デジアンテナ&lt;/li&gt;
&lt;li&gt;高くない、4530円&lt;/li&gt;
&lt;li&gt;1チャンネルのみの視聴、録画が可能、買い足して同時受信チャンネルが増やせる&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B0141NFWSG/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;買う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SCM IC读卡器&lt;ul&gt;
&lt;li&gt;B-CASカードの読み取り用、1000円ぐらい&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B0085H4YZC/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;買う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;型番は同じではないかも、SCMじゃないやつ届けられたら自己調整必要&lt;/li&gt;
&lt;li&gt;SoftCASも使えるらしいが、私は使わない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDD&lt;ul&gt;
&lt;li&gt;録画した映像保存用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B-CAS カード&lt;ul&gt;
&lt;li&gt;テストはテレビから借りるのはいいと思います&lt;/li&gt;
&lt;li&gt;アマゾンにも誰が売ってるらしいが、自己責任でお願いします&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アンテナ分波器 / 分配器 、接続線&lt;ul&gt;
&lt;li&gt;TVと同時視聴するため。必須ではない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>心灵盟友 Buddy Complex 圣地巡礼</title>
    <link href="https://blog.xingoxu.com/2018/05/buddy-complex-seichijunrei/"/>
    <id>https://blog.xingoxu.com/2018/05/buddy-complex-seichijunrei/</id>
    <published>2018-05-13T10:13:03.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>黄金周里因为自己喜欢的画手太太画了渡瀬青葉，所以又把一年前抛弃的 Buddy Complex 捡起来看了一下，意外的发现还挺好看的。全部看完后昨天圣地巡礼了一下。</p><p>这个动画也只有第一集是现实中出现的场景，后边都是未来在天上在船上并没有日本的景色。</p><h1 id="千葉県習志野市"><a href="#千葉県習志野市" class="headerlink" title="千葉県習志野市"></a>千葉県習志野市</h1><p></p><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg" alt="通学路のカーブ"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg" alt="通学路のカーブ"></div></p><div class="clear-float img-caption">通学路のカーブ</div><p>非常遗憾自行车店好像在翻新，去年在Google Map上貌似还有的样子</p><br /><link rel="stylesheet" type="text/css" href="/css/seichi.css"><a id="more"></a><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v74bns8j21hc0u0u15.jpg" alt="滑り台の公園"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73nt2sj21kw121e84.jpg" alt="滑り台の公園"></div></p><div class="clear-float img-caption">滑り台の公園</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v78ihtxj21hc0u07wp.jpg" alt="小高商店信号機"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v71em5qj21kw108npd.jpg" alt="小高商店信号機"></div></p><div class="clear-float img-caption">小高商店信号機</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7hhi18j21hc0u0npl.jpg" alt="小高商店"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7dvctbj21j515de82.jpg" alt="小高商店"></div></p><div class="clear-float img-caption">小高商店</div><p>小高商店 2013 年的时候好像因为车站周围改造所以关店了，好遗憾</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvggz6j21hc0u04qx.jpg" alt="津田沼駅5番線"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcrsid5j21kw0xb7wk.jpg" alt="津田沼駅5番線"></div></p><div class="clear-float img-caption">津田沼駅5番線</div><p>非常遗憾的是，没有07:12往三鷹的电车与7:15的中野非始发电车，样式也并不是动画的样子。</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅4番線"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcpd680j21kw13fqv5.jpg" alt="津田沼駅4番線"></div></p><div class="clear-float img-caption">津田沼駅4番線</div><p>刚才还在5番線的但事实上这里的镜头确实是4番線向5番線方向的景色，但是左边的广告牌却是5番線的广告牌</p><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅5番線の広告"></div><div class="pull-left img"></p><p><img src="https://i.loli.net/2018/05/13/5af80ae8da67b.jpg" alt="津田沼駅5番線の広告"></div></p><div class="clear-float img-caption">津田沼駅5番線の広告</div><h1 id="東京都笹塚"><a href="#東京都笹塚" class="headerlink" title="東京都笹塚"></a>東京都笹塚</h1><p>接下来就是男主被追的场景，这里大多都一模一样。</p><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypiy343j21hc0u0e89.jpg" alt="富士見丘高校前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yphw1vrj21kw17pqv9.jpg" alt="富士見丘高校前"></div></p><div class="clear-float img-caption">富士見丘高校前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypuq4ilj21hc0u0e89.jpg" alt="電気屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yprlci2j21kw0zz4qs.jpg" alt="電気屋前"></div></p><div class="clear-float img-caption">電気屋前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yq0qqmdj21hc0u0x6w.jpg" alt="松屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypt0zd0j21kw15cu0z.jpg" alt="松屋前"></div></p><div class="clear-float img-caption">松屋前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypym75nj21hc0u0e89.jpg" alt="みのん歯科医院前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypwxe3bj21kw0vxb2b.jpg" alt="みのん歯科医院前"></div></p><div class="clear-float img-caption">みのん歯科医院前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9psyzj21hc0u0kjt.jpg" alt="お茶屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9386bj21kw1634qr.jpg" alt="お茶屋前"></div></p><div class="clear-float img-caption">お茶屋前</div>TDK 变成了 alba，也是很久以前就变了的貌似<br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrjdl0nj21hc0u0he1.jpg" alt="栄湯の脇"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yres6h2j21kw0x2u11.jpg" alt="栄湯の脇"></div></p><div class="clear-float img-caption">栄湯の脇</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrmijcgj21hc0u0e89.jpg" alt="国道20号 不動産屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrlen9dj21kw16ohdw.jpg" alt="国道20号 不動産屋前"></div></p><div class="clear-float img-caption">国道20号 不動産屋前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vhnh93jj21hc0u0u14.jpg" alt="国道20号"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vid1c5ij23402454qw.jpg" alt="国道20号"></div></p><div class="clear-float img-caption">国道20号</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrwh3lyj21hc0u01l5.jpg" alt="国道20号"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrqaqqvj21kw0rz7wk.jpg" alt="国道20号"></div></p><div class="clear-float img-caption">国道20号</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vjz73pqj21hc0u07wp.jpg" alt="国道20号"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vkbwy2aj22c00sab2a.jpg" alt="国道20号"></div></p><div class="clear-float img-caption">国道20号</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu1hgwgj21hc0u0b2h.jpg" alt="笹塚交差点 DARUMA前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ytgi9rnj21kw16ox6s.jpg" alt="笹塚交差点 DARUMA前"></div></p><div class="clear-float img-caption">笹塚交差点 DARUMA前</div><p>だるま 2013 年关店的，不过其他的地方都能对上</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucd8gxj21hc0u04qx.jpg" alt="笹塚交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu0t3xrj21kw151hdv.jpg" alt="笹塚交差点"></div></p><div class="clear-float img-caption">笹塚交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhfjedj21hc0u0e89.jpg" alt="笹塚交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu5ays1j21kw13mnpe.jpg" alt="笹塚交差点"></div></p><div class="clear-float img-caption">笹塚交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhws22j21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucijqmj21kw1umnph.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv6tavtj21hc0u0qvc.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvag3s3j21kw14bx6t.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>从这里开始难度就变得好高，大家凑合看吧</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvs0kenj21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv3hcd2j21kw23v7wj.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>高架电车没有地方能拍，就跑的稍微远了一点，不过还是没能拍好</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvuux58j21hc0u0u14.jpg" alt="高架の鉄道"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv73ha9j20o20eudri.jpg" alt="高架の鉄道"></div></p><div class="clear-float img-caption">高架の鉄道</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvypfwhj21hc0u0he1.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvw28eoj21kw1kunph.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>正在制作 valiancer 的中◯屋工厂</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywfvp14j21hc0u0b2h.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywiii13j21kw12tu10.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>大山交差点这里并没有完全按照现实世界的布景画</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsysjhj21hc0u0e89.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsbvdpj21kw16oqv7.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxg5vp6j21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yx5v5kej21kw16ob2b.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxhyrcfj21hc0u04qx.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yyb62p3j20n00eagv4.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz7327tj21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz1jo80j21kw16o1l0.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><p>到这里就全部结束啦，顺带一提主人公的家是真实存在的，不过因为私人房屋的原因不会上传到SNS等地方，如果有兴趣的访问的话也请一定不要给对方带来困扰。</p><p>Google Maps：<a href="https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing" target="_blank" rel="noopener">https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;黄金周里因为自己喜欢的画手太太画了渡瀬青葉，所以又把一年前抛弃的 Buddy Complex 捡起来看了一下，意外的发现还挺好看的。全部看完后昨天圣地巡礼了一下。&lt;/p&gt;
&lt;p&gt;这个动画也只有第一集是现实中出现的场景，后边都是未来在天上在船上并没有日本的景色。&lt;/p&gt;
&lt;h1 id=&quot;千葉県習志野市&quot;&gt;&lt;a href=&quot;#千葉県習志野市&quot; class=&quot;headerlink&quot; title=&quot;千葉県習志野市&quot;&gt;&lt;/a&gt;千葉県習志野市&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&quot;clear-float img-caption&quot;&gt;通学路のカーブ&lt;/div&gt;

&lt;p&gt;非常遗憾自行车店好像在翻新，去年在Google Map上貌似还有的样子&lt;/p&gt;
&lt;br /&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>バディ・コンプレックス 聖地巡礼</title>
    <link href="https://blog.xingoxu.com/ja/2018/05/buddy-complex-seichijunrei/"/>
    <id>https://blog.xingoxu.com/ja/2018/05/buddy-complex-seichijunrei/</id>
    <published>2018-05-13T10:13:03.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>GWなか好きな絵描きさんが渡瀬青葉を描きましたので、一年前見放したバディ・コンプレックスをまた見ていて、意外といい作品と思っています。<br>全部見ました昨日聖地巡礼しました。</p><p>1話ラストで未来へ行ってしまって以来、完結編の最後に至っても2014年の東京、千葉の景色が再度登場することはありませんでした<br>なお本作品の舞台には高校や閑静な住宅街を含みます。もし訪問される際は現地の方へ最大限配慮して行動されるようお願いしたく思います。</p><h1 id="千葉県習志野市"><a href="#千葉県習志野市" class="headerlink" title="千葉県習志野市"></a>千葉県習志野市</h1><p></p><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg" alt="通学路のカーブ"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg" alt="通学路のカーブ"></div></p><div class="clear-float img-caption">通学路のカーブ</div><p>津田沼サイクルなくなった、リニューアル中みたいです、グーグルマップによる去年まだあるらしい、残念</p><br /><link rel="stylesheet" type="text/css" href="/css/seichi.css"><a id="more"></a><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v74bns8j21hc0u0u15.jpg" alt="滑り台の公園"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73nt2sj21kw121e84.jpg" alt="滑り台の公園"></div></p><div class="clear-float img-caption">滑り台の公園</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v78ihtxj21hc0u07wp.jpg" alt="小高商店信号機"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v71em5qj21kw108npd.jpg" alt="小高商店信号機"></div></p><div class="clear-float img-caption">小高商店信号機</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7hhi18j21hc0u0npl.jpg" alt="小高商店"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v7dvctbj21j515de82.jpg" alt="小高商店"></div></p><div class="clear-float img-caption">小高商店</div><p>小高商店もなくなった、調べたら2013年の時駅周辺改造のため、本当残念</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvggz6j21hc0u04qx.jpg" alt="津田沼駅5番線"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcrsid5j21kw0xb7wk.jpg" alt="津田沼駅5番線"></div></p><div class="clear-float img-caption">津田沼駅5番線</div><p>07:12の三鷹行き電車と07:15の中野行き非津田沼駅始発電車はない、仕様もアニメのものではない。</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅4番線"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcpd680j21kw13fqv5.jpg" alt="津田沼駅4番線"></div></p><div class="clear-float img-caption">津田沼駅4番線</div><p>作中では5番線になっているが実際描かれていたのは4番線からの景色。でも左端に写っているユザワヤの広告は５番線の広告。</p><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8vcvkz1bj21hc0u0b2h.jpg" alt="津田沼駅5番線の広告"></div><div class="pull-left img"></p><p><img src="https://i.loli.net/2018/05/13/5af80ae8da67b.jpg" alt="津田沼駅5番線の広告"></div></p><div class="clear-float img-caption">津田沼駅5番線の広告</div><h1 id="東京都笹塚"><a href="#東京都笹塚" class="headerlink" title="東京都笹塚"></a>東京都笹塚</h1><p>これからは主人公追われた景色。大体一緒です。</p><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypiy343j21hc0u0e89.jpg" alt="富士見丘高校前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yphw1vrj21kw17pqv9.jpg" alt="富士見丘高校前"></div></p><div class="clear-float img-caption">富士見丘高校前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypuq4ilj21hc0u0e89.jpg" alt="電気屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yprlci2j21kw0zz4qs.jpg" alt="電気屋前"></div></p><div class="clear-float img-caption">電気屋前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8yq0qqmdj21hc0u0x6w.jpg" alt="松屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypt0zd0j21kw15cu0z.jpg" alt="松屋前"></div></p><div class="clear-float img-caption">松屋前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypym75nj21hc0u0e89.jpg" alt="みのん歯科医院前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr8ypwxe3bj21kw0vxb2b.jpg" alt="みのん歯科医院前"></div></p><div class="clear-float img-caption">みのん歯科医院前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9psyzj21hc0u0kjt.jpg" alt="お茶屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yr9386bj21kw1634qr.jpg" alt="お茶屋前"></div></p><div class="clear-float img-caption">お茶屋前</div>TDKからalbaになっちゃった、多分も大昔の事<br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrjdl0nj21hc0u0he1.jpg" alt="栄湯の脇"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yres6h2j21kw0x2u11.jpg" alt="栄湯の脇"></div></p><div class="clear-float img-caption">栄湯の脇</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrmijcgj21hc0u0e89.jpg" alt="国道20号 不動産屋前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrlen9dj21kw16ohdw.jpg" alt="国道20号 不動産屋前"></div></p><div class="clear-float img-caption">国道20号 不動産屋前</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vhnh93jj21hc0u0u14.jpg" alt="国道20号"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr9vid1c5ij23402454qw.jpg" alt="国道20号"></div></p><div class="clear-float img-caption">国道20号</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrwh3lyj21hc0u01l5.jpg" alt="国道20号"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yrqaqqvj21kw0rz7wk.jpg" alt="国道20号"></div></p><div class="clear-float img-caption">国道20号</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vjz73pqj21hc0u07wp.jpg" alt="国道20号"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7egy1fr9vkbwy2aj22c00sab2a.jpg" alt="国道20号"></div></p><div class="clear-float img-caption">国道20号</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu1hgwgj21hc0u0b2h.jpg" alt="笹塚交差点 DARUMA前"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ytgi9rnj21kw16ox6s.jpg" alt="笹塚交差点 DARUMA前"></div></p><div class="clear-float img-caption">笹塚交差点 DARUMA前</div><p>だるま 2013 年閉店ですが、他の施設ちゃんと合った。</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucd8gxj21hc0u04qx.jpg" alt="笹塚交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu0t3xrj21kw151hdv.jpg" alt="笹塚交差点"></div></p><div class="clear-float img-caption">笹塚交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhfjedj21hc0u0e89.jpg" alt="笹塚交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yu5ays1j21kw13mnpe.jpg" alt="笹塚交差点"></div></p><div class="clear-float img-caption">笹塚交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yuhws22j21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yucijqmj21kw1umnph.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv6tavtj21hc0u0qvc.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvag3s3j21kw14bx6t.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>難易度高くなった</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvs0kenj21hc0u07wp.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv3hcd2j21kw23v7wj.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>高架の電車はどこでも取れないから、ちょっと遠いから取ったけど、良くないね</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvuux58j21hc0u0u14.jpg" alt="高架の鉄道"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yv73ha9j20o20eudri.jpg" alt="高架の鉄道"></div></p><div class="clear-float img-caption">高架の鉄道</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvypfwhj21hc0u0he1.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yvw28eoj21kw1kunph.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>ヴァリアンサーを生産している中◯屋工場です</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywfvp14j21hc0u0b2h.jpg" alt="高架下"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywiii13j21kw12tu10.jpg" alt="高架下"></div></p><div class="clear-float img-caption">高架下</div><p>大山交差点周りは今までと違ってあまり実際の景色に忠実ではない様子。看板や窓の形など、細かいパーツが一致する程度でしかありませんでした。</p><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsysjhj21hc0u0e89.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8ywsbvdpj21kw16oqv7.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxg5vp6j21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yx5v5kej21kw16ob2b.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yxhyrcfj21hc0u04qx.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yyb62p3j20n00eagv4.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><br /><div class="pull-left img"><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz7327tj21hc0u0b2h.jpg" alt="大山交差点"></div><div class="pull-left img"></p><p><img src="https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8yz1jo80j21kw16o1l0.jpg" alt="大山交差点"></div></p><div class="clear-float img-caption">大山交差点</div><p>ここまで全部終わりました、ちなみに主人公の家は本当に存在している、個人宅なので掲載はしません、興味があれば訪れる時絶対迷惑かけないように</p><p>最後までご閲覧いただきありがとうございました。</p><p>Google Maps：<a href="https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing" target="_blank" rel="noopener">https://drive.google.com/open?id=1fTiF9I8exv6jFB-86H49elu6EntfaA1q&amp;usp=sharing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GWなか好きな絵描きさんが渡瀬青葉を描きましたので、一年前見放したバディ・コンプレックスをまた見ていて、意外といい作品と思っています。&lt;br&gt;全部見ました昨日聖地巡礼しました。&lt;/p&gt;
&lt;p&gt;1話ラストで未来へ行ってしまって以来、完結編の最後に至っても2014年の東京、千葉の景色が再度登場することはありませんでした&lt;br&gt;なお本作品の舞台には高校や閑静な住宅街を含みます。もし訪問される際は現地の方へ最大限配慮して行動されるようお願いしたく思います。&lt;/p&gt;
&lt;h1 id=&quot;千葉県習志野市&quot;&gt;&lt;a href=&quot;#千葉県習志野市&quot; class=&quot;headerlink&quot; title=&quot;千葉県習志野市&quot;&gt;&lt;/a&gt;千葉県習志野市&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;pull-left img&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v6ybw31j21hc0u0kjt.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pull-left img&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.xingoxu.com/blog/sinaimg/6b8bbe7ely1fr8v73zuchj21kw0y5kjp.jpg&quot; alt=&quot;通学路のカーブ&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&quot;clear-float img-caption&quot;&gt;通学路のカーブ&lt;/div&gt;

&lt;p&gt;津田沼サイクルなくなった、リニューアル中みたいです、グーグルマップによる去年まだあるらしい、残念&lt;/p&gt;
&lt;br /&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/seichi.css&quot;&gt;
    
    </summary>
    
    
      <category term="ACG" scheme="https://blog.xingoxu.com/categories/ACG/"/>
    
      <category term="Travel" scheme="https://blog.xingoxu.com/categories/ACG/Travel/"/>
    
    
  </entry>
  
  <entry>
    <title>推特 Account Activity API 使用体验</title>
    <link href="https://blog.xingoxu.com/2018/04/twitter-account-activity-api/"/>
    <id>https://blog.xingoxu.com/2018/04/twitter-account-activity-api/</id>
    <published>2018-04-30T12:59:43.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>前几天使用了一下推特的 Account Activity API，这个 API 支持注册一个 webhook，用于接受授权账户的实时活动（推特文，事件，设置）。</p><p>包括以下内容：</p><ul><li>推特内容</li><li>at 提醒</li><li>回复</li><li>转发</li><li>带评论转发</li><li>点赞</li><li>发出的私信和接收到的私信</li><li>关注</li><li>拉黑</li><li>屏蔽</li><li>阅读回执</li></ul><p>在试用的过程中，碰到了一些问题，做一个整理。</p><a id="more"></a><h1 id="应用中心创建应用"><a href="#应用中心创建应用" class="headerlink" title="应用中心创建应用"></a>应用中心创建应用</h1><p>首先需要到 <a href="https://apps.twitter.com/" target="_blank" rel="noopener">https://apps.twitter.com/</a> 在这里按提示创建应用，获得应用的 key 与 Secret。</p><h1 id="申请-Account-Activity-API-试用权限"><a href="#申请-Account-Activity-API-试用权限" class="headerlink" title="申请 Account Activity API 试用权限"></a>申请 Account Activity API 试用权限</h1><p><a href="https://developer.twitter.com/en/apply" target="_blank" rel="noopener">https://developer.twitter.com/en/apply</a><br>到这里按照提示申请API权限，并附上 app ID（app ID相关解释：<a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview</a> ）</p><p>申请完成后会收到邮件<br><img src="https://i.loli.net/2018/04/30/5ae7000843f53.png" alt="申请成功回执"></p><h1 id="注册-webhook"><a href="#注册-webhook" class="headerlink" title="注册 webhook"></a>注册 webhook</h1><h2 id="CRC-测试"><a href="#CRC-测试" class="headerlink" title="CRC 测试"></a>CRC 测试</h2><p>webhook 的地址要求通过 CRC 测试，详细要求可以查看<br><a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks</a></p><p>写了一个自己的demo，关于CRC测试的代码：<br><a href="https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23</a></p><h2 id="通过-postman-发送请求注册-webhook"><a href="#通过-postman-发送请求注册-webhook" class="headerlink" title="通过 postman 发送请求注册 webhook"></a>通过 postman 发送请求注册 webhook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;webhooks.json?url&#x3D;$&#123;你的webhook地址&#125;</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p><code>Bearer TOKEN</code> 可以通过<code>https://api.twitter.com/oauth2/token</code>接口获得</p><p>注意</p><ul><li>webhook 地址 需要https，且只能使用443端口（<a href="https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36" target="_blank" rel="noopener">https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36</a> ）</li></ul><h2 id="通过-postman-发送请求在-subscription-里注册-webhook"><a href="#通过-postman-发送请求在-subscription-里注册-webhook" class="headerlink" title="通过 postman 发送请求在 subscription 里注册 webhook"></a>通过 postman 发送请求在 subscription 里注册 webhook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;webhooks.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>获取到刚才的 webhook id</p><p>之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;subscriptions.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: OAuth 1.0</span><br><span class="line"></span><br><span class="line">Body:</span><br><span class="line">webhook_id: 刚才的 webhook id</span><br></pre></td></tr></table></figure><p>注意这里需要用OAuth 1.0（用于识别注册的user id）</p><p>注册完成后不会有任何返回，<code>HTTP Code: 204 No Conent</code></p><p>注册完成后可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET：https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;subscriptions&#x2F;list.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>可以收到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"env-beta"</span>,</span><br><span class="line">    <span class="attr">"application_id"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">    <span class="attr">"subscriptions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"user_id"</span>: <span class="string">"12345678"</span>  <span class="comment">// &lt;- 自己的user_id</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>随便对一条推特点赞</p><p>可以收到推特来的 webhook object。</p><p>自己用这个写了一个推特的bot，可以作为参考。<br><a href="https://github.com/xingoxu/twitter-like-downloader" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天使用了一下推特的 Account Activity API，这个 API 支持注册一个 webhook，用于接受授权账户的实时活动（推特文，事件，设置）。&lt;/p&gt;
&lt;p&gt;包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推特内容&lt;/li&gt;
&lt;li&gt;at 提醒&lt;/li&gt;
&lt;li&gt;回复&lt;/li&gt;
&lt;li&gt;转发&lt;/li&gt;
&lt;li&gt;带评论转发&lt;/li&gt;
&lt;li&gt;点赞&lt;/li&gt;
&lt;li&gt;发出的私信和接收到的私信&lt;/li&gt;
&lt;li&gt;关注&lt;/li&gt;
&lt;li&gt;拉黑&lt;/li&gt;
&lt;li&gt;屏蔽&lt;/li&gt;
&lt;li&gt;阅读回执&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在试用的过程中，碰到了一些问题，做一个整理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>ツイッターの Account Activity API 使ってみた</title>
    <link href="https://blog.xingoxu.com/ja/2018/04/twitter-account-activity-api/"/>
    <id>https://blog.xingoxu.com/ja/2018/04/twitter-account-activity-api/</id>
    <published>2018-04-30T12:59:43.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>前日ツイッターのAccount Activity APIを使ってみました、この API が一つ webhook 登録が可能です、アカウントのリアル活動（ツィート、通知、設定）を受信します。</p><p>以下のものが含まれます：</p><ul><li>ツィート</li><li>at 通知</li><li>リプライ</li><li>リツイート</li><li>引用リツイート</li><li>いいね</li><li>ダイレクトメッセージとその受信</li><li>フォロー</li><li>ブロック</li><li>ミュート</li></ul><p>使う時実際起こった問題を書きました。</p><a id="more"></a><h1 id="アプリを作ります"><a href="#アプリを作ります" class="headerlink" title="アプリを作ります"></a>アプリを作ります</h1><p>まずここで <a href="https://apps.twitter.com/" target="_blank" rel="noopener">https://apps.twitter.com/</a> チュートリアルに従ってアプリを作って、アプリの key と secret を取得します。</p><h1 id="Account-Activity-API-を申請します"><a href="#Account-Activity-API-を申請します" class="headerlink" title="Account Activity API を申請します"></a>Account Activity API を申請します</h1><p><a href="https://developer.twitter.com/en/apply" target="_blank" rel="noopener">https://developer.twitter.com/en/apply</a><br>ここで権限を申請します，app ID の添付を忘れずに（app ID について：<a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview</a> ）</p><p>申請成功したらメールが来ます<br><img src="https://i.loli.net/2018/04/30/5ae7000843f53.png" alt="申請成功のメール"></p><h1 id="webhook-URL-を登録"><a href="#webhook-URL-を登録" class="headerlink" title="webhook URL を登録"></a>webhook URL を登録</h1><h2 id="CRC-テスト"><a href="#CRC-テスト" class="headerlink" title="CRC テスト"></a>CRC テスト</h2><p>webhook は CRC テストを合格しなければ登録できない、具体的な要望はここに書いている -&gt;<br><a href="https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks" target="_blank" rel="noopener">https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/guides/securing-webhooks</a></p><p>自分もNode.jsのdemoを書きました、一応参考になれば：<br><a href="https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader/blob/master/routes/twitter.js#L13-L23</a></p><h2 id="postman-でリクエストを送って-webhook-URL-を登録します"><a href="#postman-でリクエストを送って-webhook-URL-を登録します" class="headerlink" title="postman でリクエストを送って webhook URL を登録します"></a>postman でリクエストを送って webhook URL を登録します</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;webhooks.json?url&#x3D;$&#123;あなたのwebhook URL&#125;</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p><code>Bearer TOKEN</code> は<code>https://api.twitter.com/oauth2/token</code>で取得できます。</p><p>注意</p><ul><li>webhook URL は https と 443 ポートのみサポートします（<a href="https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36" target="_blank" rel="noopener">https://twittercommunity.com/t/how-to-register-a-webhook-url-in-twitter/86096/36</a> ）</li></ul><h2 id="postman-でリクエストを送って-subscription-に-webhook-を登録します"><a href="#postman-でリクエストを送って-subscription-に-webhook-を登録します" class="headerlink" title="postman でリクエストを送って subscription に webhook を登録します"></a>postman でリクエストを送って subscription に webhook を登録します</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;webhooks.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>さっきの webhook の id を取って</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;subscriptions.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: OAuth 1.0</span><br><span class="line"></span><br><span class="line">Body:</span><br><span class="line">webhook_id: さっきの webhook の id</span><br></pre></td></tr></table></figure><p>注意すべきところ：ここAuthorization は OAuth 1.0（user id 認識ため）</p><p>リスポンス内容はない、<code>HTTP Code: 204 No Conent</code></p><p>登録したらここに見えます</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET：https:&#x2F;&#x2F;api.twitter.com&#x2F;1.1&#x2F;account_activity&#x2F;all&#x2F;env-beta&#x2F;subscriptions&#x2F;list.json</span><br><span class="line"></span><br><span class="line">Header:</span><br><span class="line">Authorization: Bearer TOKEN</span><br></pre></td></tr></table></figure><p>これを受けれます</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"environment"</span>: <span class="string">"env-beta"</span>,</span><br><span class="line">    <span class="attr">"application_id"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">    <span class="attr">"subscriptions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"user_id"</span>: <span class="string">"12345678"</span>  <span class="comment">// &lt;- 自分のuser_id</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>好きなツイートをいいねすると</p><p>ツイッターサーバーから webhook object 受けれます。</p><p>最後、Account Activity API使ってる自家用ツイッターBotです、参考になればぜひ<br><a href="https://github.com/xingoxu/twitter-like-downloader" target="_blank" rel="noopener">https://github.com/xingoxu/twitter-like-downloader</a></p><p>最後まで閲覧いただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前日ツイッターのAccount Activity APIを使ってみました、この API が一つ webhook 登録が可能です、アカウントのリアル活動（ツィート、通知、設定）を受信します。&lt;/p&gt;
&lt;p&gt;以下のものが含まれます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ツィート&lt;/li&gt;
&lt;li&gt;at 通知&lt;/li&gt;
&lt;li&gt;リプライ&lt;/li&gt;
&lt;li&gt;リツイート&lt;/li&gt;
&lt;li&gt;引用リツイート&lt;/li&gt;
&lt;li&gt;いいね&lt;/li&gt;
&lt;li&gt;ダイレクトメッセージとその受信&lt;/li&gt;
&lt;li&gt;フォロー&lt;/li&gt;
&lt;li&gt;ブロック&lt;/li&gt;
&lt;li&gt;ミュート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使う時実際起こった問題を書きました。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>再见 2017</title>
    <link href="https://blog.xingoxu.com/2018/04/2017-end/"/>
    <id>https://blog.xingoxu.com/2018/04/2017-end/</id>
    <published>2018-04-10T04:15:49.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>忙完这一阵，回过神来已经是2018年的4月了，才有空开始补一些之前没有干完的事情，比如写这一篇2017年的总结。</p><p>仔细想想还真的是2017年经历了太多太多事情，很多事情甚至自己都没有想到，感觉自己非常幸运，总的来说是一个很开心的一年。</p><a id="more"></a><p>按时间顺序</p><h1 id="跳槽到饿了妈"><a href="#跳槽到饿了妈" class="headerlink" title="跳槽到饿了妈"></a>跳槽到饿了妈</h1><p>怎么说，年前就有想跳槽的想法，其实在萌购干着也挺好的，老板也承诺说毕业之后的工资多少多少，价格嘛也不低（跟饿了妈差不多），但始终是有那么点没有安全感，终于逮到个机会去了饿了妈面试，虽然自己是个菜鸡，不过面试的问题还算是都自我感觉挺好的答了下来，于是就很顺利的跳槽到了饿了妈。</p><p>也算走到了算是一个不太容易倒闭的公司，体验了各种大公司的流程，效率也挺高的，时间嘛也还行自己手脚比较快所以基本会有一定的空闲时间，不算很多，但可以。</p><h1 id="去日本玩"><a href="#去日本玩" class="headerlink" title="去日本玩"></a>去日本玩</h1><p>刚进饿了妈不久，就要收拾东西准备攻略自己一个人出去玩啦。半年前的既定安排跟跳槽也无关，不过当时想着4月底5月初的时间段怎么说也得三方啊毕业的准备都差不多了吧，那又是谁知道这个点了我自己居然还会跳槽，真是。。。</p><p>嘛操着自己零零碎碎平假名和片假名，也没跟太多人说话，现在想起来我当时到底是怎么旅游的都完全不怎么会说日语，顺顺利利的玩了10天，肥肠快乐，嘛钱也用了不少，差不多一共两万左右吧？</p><p><a href="https://photos.app.goo.gl/Gh0Qox7rmOz3rRqz2" target="_blank" rel="noopener">Google Photo</a></p><h1 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h1><div class="IMGalignRight" style="width: 330px;"><p><img src="https://i.loli.net/2018/04/10/5acc59ab88143.jpg" alt="毕业啦"></div></p><p>一霎眼毕业了，当时好像没有什么感觉，取了毕业证书，学位证书，回家就往公司的系统上传表示7.1日起就可以拿正式工资了，只有这点才让我感觉到了毕业。不过现在想想，我居然已经是个社会人了，而且已经实习+上班上了一年了，时间的力量还真是强大，把自己给塑造成了什么样只有回头看的时候才能知道。</p><p>我对学校没什么好感，对周围同学也没什么太多好感，4年自己也不知道自己干了什么，只是埋头学了很多东西，所以这4年，嘛也就这样。</p><h1 id="N2合格"><a href="#N2合格" class="headerlink" title="N2合格"></a>N2合格</h1><p>旅游回来之后发现自己只有一个月时间就要考N2于是工作之余还不停的去做之前买来没做的练习再去查字典，最后考前一星期还买了一本书再做练习，直接就上了考场。考完回来感觉应该能过吧，虽然有一半的语法题我是瞎蒙的，有一篇阅读没有时间看。这种没有范围的考试真的非常吓人，又或者说因为是第一次正正经经考一个完全自学的语言所以会如此害怕。</p><p>复习非常累，考试也很累，幸好最后顺利通过，还是很开心的（分数不高啦）</p><h1 id="跳槽去了LINE"><a href="#跳槽去了LINE" class="headerlink" title="跳槽去了LINE"></a>跳槽去了LINE</h1><p>这算是下半年一直在做的一件事情吧，从9月初开始试试的心态投了一封简历，结果到最后面试走完被发了offer真的非常非常开心又意外，一个是LINE是日本的企业之中应该是我心中最想去的一个企业，Google也好Twitter也好也很想去，但那些真的水平太高，自己99%是不太可能的，不过LINE的话最初我觉得自己可能70%不太可能，不过最后居然能进是非常意外的，另一个意外就是自己其实日语也就是三脚猫水准，也不要说三脚猫了，一脚猫吧，顶多也就看看小学生向的普通动画，在这之前都没跟日本人说过话，推特也只是在去日本玩送东西给太太的时候结下的太太聊天，聊的也不多还不需要太注重细节，就这么烂的水平，居然最后被采用了。</p><p>然后就是递签证，返签证，去日本找地方睡觉，上班这样的过程，签证只花了一周不过递签证跟返签证还真是艰辛前前后后块花了一个半月，嘛只能算是好事多磨。期间当然是在饿了妈当没事人一样刷KPI，我觉得如果我不走的话我KPI至少有B吧，A能不能有就不太清楚了。</p><p>第一次离开自己家自己一个人住，唔太幸福了，小黄本放题啊~~</p><p>要说原因的话，也不太那么好明着说吧，嘛自己来日本的时候的确也是觉得哇这里真好真舒服，想来这里上班呢，另一个是2017下半年也的确发生了很多事，让自己对周围的环境有了一些看法吧。</p><h1 id="2018年的计划？"><a href="#2018年的计划？" class="headerlink" title="2018年的计划？"></a>2018年的计划？</h1><p>天呐看看去年的计划，什么rxJs，什么后端，什么可视化前端，什么游戏开发，完全没有学嘛。<br>2018年的话，先把欠账还清吧，下的动画啥的赶紧看完，不过游戏啥的基本都完成了还算是，摸鱼上手（笑）</p><p><a href="https://bgm.tv/award/2017/xingo" target="_blank" rel="noopener">Bangumi 2017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忙完这一阵，回过神来已经是2018年的4月了，才有空开始补一些之前没有干完的事情，比如写这一篇2017年的总结。&lt;/p&gt;
&lt;p&gt;仔细想想还真的是2017年经历了太多太多事情，很多事情甚至自己都没有想到，感觉自己非常幸运，总的来说是一个很开心的一年。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://blog.xingoxu.com/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue + TypeScript 尝鲜体验</title>
    <link href="https://blog.xingoxu.com/2017/10/vue-typescript-early/"/>
    <id>https://blog.xingoxu.com/2017/10/vue-typescript-early/</id>
    <published>2017-10-18T07:04:23.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>适用 Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2</p></blockquote><p>其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 Javascript，便爱上了这门语言。</p><p>但现在的我稍稍又觉得这样的东西其实还行，只使用类型系统也并没有完全限制 Javascript 本身的灵活性，并且他帮助我不会犯一些低级错误，而且还能配合 Visual Studio Code 的提示，我觉得这个还是很不错的，最近忙起来的时候，甚至经常把两个输入框的 value 直接进行比较了，于是就想尝试一下 TypeScript。</p><a id="more"></a><h1 id="官方做法"><a href="#官方做法" class="headerlink" title="官方做法"></a>官方做法</h1><p>Vue 2.2 以上之后，官方给 Vue已经添加了很多类型声明，那么我们就来实践一下在单文件 Vue 中使用 TypeScript。</p><h2 id="webpack-rules-中添加-ts-loader-相关（这里使用-webpack-2）"><a href="#webpack-rules-中添加-ts-loader-相关（这里使用-webpack-2）" class="headerlink" title="webpack rules 中添加 ts-loader 相关（这里使用 webpack 2）"></a>webpack rules 中添加 ts-loader 相关（这里使用 webpack 2）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules|vue\/src/</span>,</span><br><span class="line">  loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示对 .ts 文件编译时使用 ts-loader 进行读取，appendTsSuffixTo 是为了让 tsc 对 vue 文件能够当成一个 module 进行处理，以解决 moudle not found 的问题（tsc 本身不认识 vue 结尾的文件）</p><h2 id="添加-d-ts文件"><a href="#添加-d-ts文件" class="headerlink" title="添加 .d.ts文件"></a>添加 .d.ts文件</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是为了让 vscode 在 ts 文件中识别 vue 结尾文件</p><h2 id="项目根目录下添加-tsconfig-json"><a href="#项目根目录下添加-tsconfig-json" class="headerlink" title="项目根目录下添加 tsconfig.json"></a>项目根目录下添加 tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>allowSyntheticDefaultImports</code> 是为了能够用 es6 形式的 import，其他就参照 Vue 和官网的弄了个最小化的 json。</p><h2 id="万事俱备，让我们-npm-run-dev-跑起来！"><a href="#万事俱备，让我们-npm-run-dev-跑起来！" class="headerlink" title="万事俱备，让我们 npm run dev 跑起来！"></a>万事俱备，让我们 <code>npm run dev</code> 跑起来！</h2><p>在这里，我们假设使用 Vue 官方的 webpack boilerplate，对 Hello.vue 进行一下改造。</p><p>在模板的 msg 下新增一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Say Hello Times: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并将 script 部分修改成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Declare the component's type</span></span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">interface</span> <span class="title">HelloInterface</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">    msg: string,</span><br><span class="line">    count: number,</span><br><span class="line">    sayHello(): number</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="actionscript">    HelloInterface <span class="keyword">as</span> <span class="class"><span class="keyword">interface</span></span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// We need to explicitly annotate the exported options object</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// with the Hello type</span></span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;HelloInterface&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码没有什么太大的问题</p><p>接着我们改造一下 App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span> @<span class="attr">click</span>=<span class="string">"sayHello"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; interface <span class="keyword">as</span> helloInterface, <span class="keyword">default</span> <span class="keyword">as</span> Hello &#125; <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">interface</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">    $refs: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 对 helloComponent 进行声明，可以使用 helloComponent 上的方法和属性</span></span></span><br><span class="line">      helloComponent: helloInterface</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Hello</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;App&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，像 refs 这种动态的在运行时才能确定的东西，如果需要在 coding 过程中静态化，则需要在 interface 中对其进行声明，写的 code 稍微有点多，不过可以接受。</p><blockquote><p>注： App.vue 修改成 <code>lang=ts</code> 后，顶层的 main.js 需要换成 main.ts 并修改 webpack 入口点，否则发生 file not found 错误</p></blockquote><h1 id="vue-class-component"><a href="#vue-class-component" class="headerlink" title="vue-class-component"></a>vue-class-component</h1><p>官方的另一种推荐做法是 <code>vue-class-component</code>，不过 demo 和 readme 有点小问题，可把我这个 TypeScript 新手给难到啦，提了 pr 希望快快通过。</p><p>让我们看看使用 <code>vue-class-component</code> 之后的 Hello.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"></span><br><span class="line">  @Component</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    msg: string = <span class="string">'Welcome to Your Vue.js App'</span></span></span><br><span class="line">    count: number = 0</span><br><span class="line">    sayHello(): number &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再让我们看看 App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line">  </span><br><span class="line">  @Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Hello</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">    $refs: &#123;</span><br><span class="line">      helloComponent: Hello</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sayHello() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非常 Cool，非常精炼，暂时没有想到可能会发生的没法解决的因为 vue 或者 vue 组件 和 TypeScript 水土不服的编译错误，而且都有了类型和提示。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>尤大佬说在接下来的 Vue 2.5 还会加强一系列的 TypeScript 支持（<a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08" target="_blank" rel="noopener">链接</a>），不知道是怎样的支持呢。<br>另外，欢迎大家在评论区发表 Vue + TypeScript 的使用场景以及你遇到的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;适用 Vue.version &amp;lt; 2.5 &amp;amp;&amp;amp; Vue.version &amp;gt;= 2.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 Javascript，便爱上了这门语言。&lt;/p&gt;
&lt;p&gt;但现在的我稍稍又觉得这样的东西其实还行，只使用类型系统也并没有完全限制 Javascript 本身的灵活性，并且他帮助我不会犯一些低级错误，而且还能配合 Visual Studio Code 的提示，我觉得这个还是很不错的，最近忙起来的时候，甚至经常把两个输入框的 value 直接进行比较了，于是就想尝试一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue + TypeScript 早期体験</title>
    <link href="https://blog.xingoxu.com/ja/2017/10/vue-typescript-early/"/>
    <id>https://blog.xingoxu.com/ja/2017/10/vue-typescript-early/</id>
    <published>2017-10-10T09:33:23.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2　適用される</p></blockquote><h1 id="公式ドキュメントによるやり方"><a href="#公式ドキュメントによるやり方" class="headerlink" title="公式ドキュメントによるやり方"></a>公式ドキュメントによるやり方</h1><p>Vue 2.2 から、Vue にいろんな公式型宣言を提供しており、さっそく、単一ファイルコンポーネントに TypeScript を試してみましょう。</p><h2 id="webpack-rules-に-ts-loader-相関を添付しましょう"><a href="#webpack-rules-に-ts-loader-相関を添付しましょう" class="headerlink" title="webpack rules に ts-loader 相関を添付しましょう"></a>webpack rules に ts-loader 相関を添付しましょう</h2><blockquote><p>こっちは webpack2</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+     test: /\.ts$/,</span></span><br><span class="line"><span class="addition">+     exclude: /node_modules|vue\/src/,</span></span><br><span class="line"><span class="addition">+     loader: 'ts-loader',</span></span><br><span class="line"><span class="addition">+     options: &#123;</span></span><br><span class="line"><span class="addition">+       appendTsSuffixTo: [/\.vue$/]</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><a id="more"></a><p>.ts のファイルを ts-loader で読み込む<br><code>appendTsSuffixTo</code>は vue を module として tsc でプロセスして、module not found の問題を解決する（tsc は .vue ファイルが知らない）</p><h2 id="d-ts-ファイルを作成する"><a href="#d-ts-ファイルを作成する" class="headerlink" title=".d.ts ファイルを作成する"></a>.d.ts ファイルを作成する</h2><p>どんな名前もいい、どこでもいい、tsconfig.json の include PATH にいればいい、必ず .d.ts を名前の終わりします。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode の .ts ファイルに .vueファイルも知らせます。</p><h2 id="tsconfig-json-を作成する"><a href="#tsconfig-json-を作成する" class="headerlink" title="tsconfig.json を作成する"></a>tsconfig.json を作成する</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es5"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"./src/**/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>allowSyntheticDefaultImports</code> は es6 の import を直接使えるの option</p><h2 id="準備万端、npm-run-dev-いきましょう！"><a href="#準備万端、npm-run-dev-いきましょう！" class="headerlink" title="準備万端、npm run dev いきましょう！"></a>準備万端、<code>npm run dev</code> いきましょう！</h2><p>こっちは vue-cli の webpack boilerplate を例として、Hello.vue を改造しましょう。</p><p>html template の msg の下に</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"><span class="addition">+ &lt;h2&gt;Say Hello Times: &#123;&#123; count &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line">  &lt;h2&gt;Essential Links&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>script の部分を</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Declare the component's type</span></span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">interface</span> <span class="title">HelloInterface</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">    msg: string,</span><br><span class="line">    count: number,</span><br><span class="line">    sayHello(): number</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> &#123;</span></span><br><span class="line"><span class="actionscript">    HelloInterface <span class="keyword">as</span> <span class="class"><span class="keyword">interface</span></span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">'Welcome to Your Vue.js App'</span>,</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.count++;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.count;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// We need to explicitly annotate the exported options object</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// with the Hello type</span></span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;HelloInterface&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>こうして改造します</p><p>親としての App.vue を改造してみて</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id="app"&gt;</span><br><span class="line"><span class="deletion">-   &lt;img src="./assets/logo.png"&gt;</span></span><br><span class="line"><span class="addition">+   &lt;img src="./assets/logo.png" @click="sayHello"&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="addition">+   &lt;hello ref="helloComponent"&gt;&lt;/hello&gt;</span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; interface <span class="keyword">as</span> helloInterface, <span class="keyword">default</span> <span class="keyword">as</span> Hello &#125; <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">interface</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line">    $refs: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// helloComponent を宣言する、helloComponent のメソッドとプロパティを使えようになるました</span></span></span><br><span class="line">      helloComponent: helloInterface</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      sayHello() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.helloComponent.count++;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Hello</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">as</span> ComponentOptions&lt;App&gt;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>refsといった動的なもの、interface に宣言して、typescript にオートコンプリートを使えます。</p><blockquote><p>App.vue の <code>script</code> を <code>lang=ts</code> 変更すると、main.js を main.ts に変更する必要があります、webpack の entry も忘れないでください，そうしないと file not found のエラーが発生する可能性がある。</p></blockquote><p>コードはちょっと多いね、公式サイトによるの <code>vue-class-component</code> を使ってみますか？</p><h1 id="vue-class-component"><a href="#vue-class-component" class="headerlink" title="vue-class-component"></a>vue-class-component</h1><p><code>vue-class-component</code>の demo と readme はちょっと問題がある、TypeScript の新入りの私が困った、pr を提出した、速くマージされて欲しい。</p><p><code>vue-class-component</code> を使っている Hello.vue の script 部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Hello <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  msg: <span class="built_in">string</span> = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">  count: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  sayHello(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>で、App.vue</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Hello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> App <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  $refs: &#123;</span><br><span class="line">    helloComponent: Hello</span><br><span class="line">  &#125;</span><br><span class="line">　</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.helloComponent.count++;</span><br><span class="line">    <span class="keyword">this</span>.$refs.helloComponent.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随分清潔になりました、オートコンプリートもバッチリ！他の vue コンポーネントと TypeScript の不具合は一時的に考え出来ません。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Vue 2.5から TypeScript のサポートはどんどん増えますと<a href="https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08" target="_blank" rel="noopener">言います</a>、どんなサポートですね〜</p><p>日本語まだ下手ですから、変なところいっぱいと思います、コメントエリアに指摘すれば幸いです。</p><p>最後まで閲覧いただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vue.version &amp;lt; 2.5 &amp;amp;&amp;amp; Vue.version &amp;gt;= 2.2　適用される&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;公式ドキュメントによるやり方&quot;&gt;&lt;a href=&quot;#公式ドキュメントによるやり方&quot; class=&quot;headerlink&quot; title=&quot;公式ドキュメントによるやり方&quot;&gt;&lt;/a&gt;公式ドキュメントによるやり方&lt;/h1&gt;&lt;p&gt;Vue 2.2 から、Vue にいろんな公式型宣言を提供しており、さっそく、単一ファイルコンポーネントに TypeScript を試してみましょう。&lt;/p&gt;
&lt;h2 id=&quot;webpack-rules-に-ts-loader-相関を添付しましょう&quot;&gt;&lt;a href=&quot;#webpack-rules-に-ts-loader-相関を添付しましょう&quot; class=&quot;headerlink&quot; title=&quot;webpack rules に ts-loader 相関を添付しましょう&quot;&gt;&lt;/a&gt;webpack rules に ts-loader 相関を添付しましょう&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;こっちは webpack2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rules: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+   &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     test: /\.ts$/,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     exclude: /node_modules|vue\/src/,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     loader: &#39;ts-loader&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     options: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+       appendTsSuffixTo: [/\.vue$/]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+     &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+   &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
      <category term="Front-End-Dev" scheme="https://blog.xingoxu.com/categories/dev/Front-End-Dev/"/>
    
    
  </entry>
  
  <entry>
    <title>いくつのユーザー状態の記録方法</title>
    <link href="https://blog.xingoxu.com/ja/2017/09/record-user-login-status-methods/"/>
    <id>https://blog.xingoxu.com/ja/2017/09/record-user-login-status-methods/</id>
    <published>2017-09-28T10:03:55.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>昔のやり方は、Cookie に直接保存する。サーバーストレージはまだそんな安いの状況下で、たくさんのウェブサイトはユーザーの登録そういうインフォメーションを変化してサインして Cookie に保存する。</p><p>変化やサインは、md5+salt、または secret を使って双方向の暗号化するとかの方法。</p><p>ウェブサイトに二回アクセスとしたら、Cookieに指定のkeyのvalueを検証する、それはただしかどうか。</p><a id="more"></a><p>こうやっていいところは：<br>サーバーストレージ占有なし、Cookie はユーザーの情報です</p><p>こうやって悪いところは：<br>ユーザー情報盗むはやすい、特にhttpsなし、中間者攻撃されたら、悪い人にログインされたことはできる。<br>また、別々に保存するのデータを改ざんされるはやすい。</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>計算力とストレージの速い発展、問題は次々に現れた。保存希望のユーザー情報はますます多くなる、Cookie のサイズ制限は少ない。</p><p>原理的には、Session は Cookie です。</p><p>サイトにアクセスとき、サーバーから唯一の Session ID を配ってCookie に保存する。ログインのとき、この Session ID による、サーバーに Session Object を作る、このオブジェクトにuser idとか、状態というユーザーの情報を保存している。</p><p>Session ID は Session Object を作るのときに配れも可能です、Session IDの作る方法は時間によるに限らない、sidの唯一を保証すればいい。</p><p>Session Object のストレージ場所も選べる。Sessionはとても大事ですと思われなら、mysql に保存するは可能です、そうではない場合は、redis に、メモリにも可能です。</p><p>だから、Sessionはとてもフレキシブル。</p><p>Session は過去の技術ではない、今はたくさんのウェブサイトに使われている。その原因は、httpしか問題いません。Internet Explorer &gt;= 10 の場合も CORS に Cookie の伝送が可能ですから、問題ない。</p><p>いいところ：<br>クライエントサイド sid しか見えない</p><p>悪いところ：<br>情報を取得する、一つ query 必要です。<br>盗むも可能ですが、Session / Cookie の問題ではない、http の問題です、httpで何も見える。</p><p>いいと悪いは時代に応じるです、Cookie に保存するときは、サーバーの計算力は低い、memcacheやredisもない、Sessionの時間はかかる、今はこれは決して悪いところじゃない。</p><p>Session と Cookie はフロントエンドにとって何をする必要はない、サーバーは Set-Cookie の http header で sid と Cookie の更新を完成することはできる。</p><h1 id="Token-Based"><a href="#Token-Based" class="headerlink" title="Token Based"></a>Token Based</h1><p>上記２つの方法は、２つの異なるアイデアを表しています。一つは情報をクライエントサイドに保存する、一つはサーバーにする。</p><p>フロントエンドとバックエンドを分けるときは、上記の２つアイデアも Cookie なしに進化する。</p><p>一つは<br>Session Token を取って、JSON、または 他のhttp header に伝送する</p><p>一つは<br>JWT（JSON Web Token） 情報をクライエントサイドに保存するというアイデアを表す。Cookie とちょっと似ているけど，情報を base64 に変化して、secretでサインして、一緒に token になる。</p><p>クライエントサイドに保存するのいいところは：<br>情報はクライエントに保存しているから、コードに直接処理はできる、ロードバランスとかの心配いらない。<br>また、Session の期限切れば、データベースに delete の必要がある。</p><p>悪いところは：<br>情報多くなるとき、Token は長くなる、http request は大きいになる、伝送の時間がかかる。</p><p>JWT の payload は base64 コーディングする、誰か標準に通じれば、内容を見られます。</p><p>Token Based 認証はフロントエンドに保存して、コーディングは必要です、一般はlocalStorageで。<br>だから、Token Based 認証は XSS に攻撃される可能性はある、Cookie Based 認証は CSRF に攻撃される可能性はある。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>いくつかの単語をすべての場合に要約することはできません、Token と Cookie また 情報をクライエントサイドに保存するとサーバーにするの場合を想像する、どんな方法を採用しようか、現業務を基にして、ちょっと長いのビジョンで選択を考える。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;p&gt;昔のやり方は、Cookie に直接保存する。サーバーストレージはまだそんな安いの状況下で、たくさんのウェブサイトはユーザーの登録そういうインフォメーションを変化してサインして Cookie に保存する。&lt;/p&gt;
&lt;p&gt;変化やサインは、md5+salt、または secret を使って双方向の暗号化するとかの方法。&lt;/p&gt;
&lt;p&gt;ウェブサイトに二回アクセスとしたら、Cookieに指定のkeyのvalueを検証する、それはただしかどうか。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>用户登录状态 验证权限的时代变迁</title>
    <link href="https://blog.xingoxu.com/2017/09/record-user-login-status-methods/"/>
    <id>https://blog.xingoxu.com/2017/09/record-user-login-status-methods/</id>
    <published>2017-09-28T09:57:15.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>直接在Cookie中存信息可谓是上古时代的操作了，在服务器还没有那么便宜的情况下，好多网站选择将用户的登录信息存在cookie中，他们把用户名或者用户id转换并签名之后，直接存入Cookie，如果有其他需要的信息，也是如此操作</p><p>转换或签名可以是加盐md5，也可以是使用secret的双向加密</p><p>用户第二次访问网站的时候，代码中对这段信息进行验证，看看是否是正确的签名的</p><a id="more"></a><p>这样做的好处是：<br>不会再占用服务器资源，直接就在cookie中读取数据，获得结果</p><p>坏处是：<br>登录凭据容易被窃取，尤其是那个年代还没有流行https，如果被中间人了，或者以另一种方式拿到了cookie，那就会被窃取登录，另外，每个数据还可能是分开存储的，因此容易被篡改</p><p>当然那时的互联网也并没有那么发达，cookie也就存存用户名什么的用于显示</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>后来网速变快了，web 应用高速发展，大家意识到了很多问题，cookie 大小不够啊，cookie 每个 key 都这么搞一下暴露太多了等等</p><p>从原理上来说，Session 就是 Cookie</p><p>客户端进入网站后，服务器分配一个 Session ID 给客户端种入 Cookie，用户登录时，在服务器查询 Session ID，在服务器写入 Session Object，这个对象里存了用户的登录数据，比如 id 啦，用户名啦，登录状态 / 角色等等</p><p>另外分配 Session ID 也可以是懒分配，也就是等到在服务器存 Session Object 的时候再分配也没有关系，Session ID 的分配可以是用 UserID 来进行加密分配，也可以用毫不相关的时间等信息进行加密分配，只需要保证这个 sid 唯一，不容易被伪造即可</p><p>Session 的存放也是可重可轻，如果觉得 Session 很重要，那么可以放入 mysql，如果觉得 Session 不怎么重要，甚至可以放入内存，重启丢失</p><p>Session 到至今还是非常非常多的网站在用，原因就是在于其实除了 https 以外的问题，并没有什么问题，IE &gt;= 10 之后，Cookie 也可以跨域，那么 Session 就没有什么问题</p><p>好处是：<br>在客户端除了 sid 以外，看不到任何信息，当然不太容易篡改</p><p>坏处是：<br>取 Session 的时候，是会需要再 query 一次的<br>也容易被窃取，当然这并不是 Session / Cookie 的锅，http 下，啥都是一清二楚的</p><p>另外，优缺点都是相对于时代来说的，存 Cookie 的时代服务器的性能不高，也没有 memcache 或者 redis 这种东西，存入 mysql 就需要再 query 一次，负载均衡当然不能同步 内存中的 Session，Cookie 成为了首选，那么现在呢，这点算力恐怕算不了什么，那么 Session 的那个坏处，就应该被划掉，Session 理所当然成为了流行的会话管理方式</p><p>Session 和 Cookie 都不需要前端介入，服务端通过 Set-Cookie http 头就可以完成 sid 和 Cookie 的更新</p><h1 id="Token-Based"><a href="#Token-Based" class="headerlink" title="Token Based"></a>Token Based</h1><p>上边两种方法代表了两种存登录凭据的思想，一种是把凭据存客户端，一种是把凭据存服务端</p><p>那么随着前后端分离的运动，上边两种的登录凭据的思想也发展出了两种不使用 Cookie 的方法</p><p>把凭据存服务端的 Session，把他的Token，单拿出来，在JSON中传递，或者在 http 头里传递或者其他方式传递</p><p>JWT（JSON Web Token） 代表了把凭据存客户端的思想，和当时的 Cookie 有点像，登录的时候把那些需要的信息 base64 编码作为一段，然后再对这些字段用 secret 进行签名，连起来这么一段 Token 去发给客户端作为凭据</p><p>凭据存在客户端的好处是：<br>因为登录状态都是跟着客户端跑的，时效信息都存在客户端，Session 如果过期了，要对 Session 数据库进行垃圾清理，那么凭据存在客户端就不需要，而且因为都是跟着客户端跑的，在服务器扩大搞集群，搞异地多活，就不需要考虑读数据库这种事情，因为都是客户端请求为 based ，随便哪个服务器来 handle 请求都没有问题</p><p>凭据存客户端坏处是：<br>当凭据内容越来越多，Token 也会越来越长，每一次请求都会携带这么大这么长的内容，显然不是非常合适</p><p>JWT 还有个问题就是中间那部分是 base64 编码的，如果熟悉标准的话，等于就是明文存储凭据了，虽然不能改，当然还是能看到</p><p>Token 类的鉴权需要前端参与并存储，存储一般会放在 localStorage等地方，因此其实是比较容易受到 XSS 的影响<br>Cookie 类的鉴权容易受到 CSRF 的影响</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实只言片语还是没法概括到所有的情况，只能大体的对Token 或者 Cookie 以及 凭据存服务端或者客户端的优缺点进行想象，究竟去使用哪一种鉴权方式，还是应该基于业务，对业务有非常深入的理解，以及稍带一些长远的思考</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;p&gt;直接在Cookie中存信息可谓是上古时代的操作了，在服务器还没有那么便宜的情况下，好多网站选择将用户的登录信息存在cookie中，他们把用户名或者用户id转换并签名之后，直接存入Cookie，如果有其他需要的信息，也是如此操作&lt;/p&gt;
&lt;p&gt;转换或签名可以是加盐md5，也可以是使用secret的双向加密&lt;/p&gt;
&lt;p&gt;用户第二次访问网站的时候，代码中对这段信息进行验证，看看是否是正确的签名的&lt;/p&gt;
    
    </summary>
    
    
      <category term="dev" scheme="https://blog.xingoxu.com/categories/dev/"/>
    
    
  </entry>
  
  <entry>
    <title>日本語ブログ始動</title>
    <link href="https://blog.xingoxu.com/ja/2017/08/hello-jp-world/"/>
    <id>https://blog.xingoxu.com/ja/2017/08/hello-jp-world/</id>
    <published>2017-08-26T08:55:10.000Z</published>
    <updated>2020-07-09T04:27:52.519Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちわ、はじめまして、こちらは xingo さんの日本語ブログ！</p><p>日本語まだ下手です、どうぞ、お気軽いに指導します、よろしくお願いします！</p><p>さて、このブログですが、まずはどのようなものかご説明したいと思います。</p><ul><li>xingo さんの技術相関</li><li>xingo さんの作品</li><li>xingo さんの日常生活</li><li>xingo さんの旅行</li></ul><p>このような感じで本番までお付き合いいただけたら幸いです</p><p>では、また次回</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちわ、はじめまして、こちらは xingo さんの日本語ブログ！&lt;/p&gt;
&lt;p&gt;日本語まだ下手です、どうぞ、お気軽いに指導します、よろしくお願いします！&lt;/p&gt;
&lt;p&gt;さて、このブログですが、まずはどのようなものかご説明したいと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xi
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://blog.xingoxu.com/categories/uncategorized/"/>
    
    
  </entry>
  
</feed>
